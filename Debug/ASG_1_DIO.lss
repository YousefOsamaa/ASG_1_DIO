
ASG_1_DIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003786  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00003786  0000381a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000030  0080007a  0080007a  00003834  2**0
                  ALLOC
  3 .stab         00004638  00000000  00000000  00003834  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002186  00000000  00000000  00007e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00009ff2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018e  00000000  00000000  0000a152  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001ec8  00000000  00000000  0000a2e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001045  00000000  00000000  0000c1a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000e80  00000000  00000000  0000d1ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000e070  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000295  00000000  00000000  0000e1f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000080a  00000000  00000000  0000e485  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ec8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 6a 10 	jmp	0x20d4	; 0x20d4 <__vector_1>
       8:	0c 94 a1 10 	jmp	0x2142	; 0x2142 <__vector_2>
       c:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__vector_3>
      10:	0c 94 e2 09 	jmp	0x13c4	; 0x13c4 <__vector_4>
      14:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__vector_10>
      2c:	0c 94 87 0a 	jmp	0x150e	; 0x150e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 e4 18 	jmp	0x31c8	; 0x31c8 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e8       	ldi	r30, 0x86	; 134
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3a       	cpi	r26, 0xAA	; 170
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8d 1a 	call	0x351a	; 0x351a <main>
      8a:	0c 94 c1 1b 	jmp	0x3782	; 0x3782 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8a 1b 	jmp	0x3714	; 0x3714 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a6 1b 	jmp	0x374c	; 0x374c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 96 1b 	jmp	0x372c	; 0x372c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 02 05 	call	0xa04	; 0xa04 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 02 05 	call	0xa04	; 0xa04 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 2d 04 	call	0x85a	; 0x85a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b2 1b 	jmp	0x3764	; 0x3764 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 96 1b 	jmp	0x372c	; 0x372c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 02 05 	call	0xa04	; 0xa04 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 02 05 	call	0xa04	; 0xa04 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 2d 04 	call	0x85a	; 0x85a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b2 1b 	jmp	0x3764	; 0x3764 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8a 1b 	jmp	0x3714	; 0x3714 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 02 05 	call	0xa04	; 0xa04 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 02 05 	call	0xa04	; 0xa04 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 2d 04 	call	0x85a	; 0x85a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a6 1b 	jmp	0x374c	; 0x374c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 96 1b 	jmp	0x372c	; 0x372c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 02 05 	call	0xa04	; 0xa04 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 02 05 	call	0xa04	; 0xa04 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b2 1b 	jmp	0x3764	; 0x3764 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 96 1b 	jmp	0x372c	; 0x372c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 02 05 	call	0xa04	; 0xa04 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 02 05 	call	0xa04	; 0xa04 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b2 1b 	jmp	0x3764	; 0x3764 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 96 1b 	jmp	0x372c	; 0x372c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 02 05 	call	0xa04	; 0xa04 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 02 05 	call	0xa04	; 0xa04 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b2 1b 	jmp	0x3764	; 0x3764 <__epilogue_restores__+0x18>

00000752 <__lesf2>:
     752:	a8 e1       	ldi	r26, 0x18	; 24
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 96 1b 	jmp	0x372c	; 0x372c <__prologue_saves__+0x18>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	2d 83       	std	Y+5, r18	; 0x05
     768:	3e 83       	std	Y+6, r19	; 0x06
     76a:	4f 83       	std	Y+7, r20	; 0x07
     76c:	58 87       	std	Y+8, r21	; 0x08
     76e:	89 e0       	ldi	r24, 0x09	; 9
     770:	e8 2e       	mov	r14, r24
     772:	f1 2c       	mov	r15, r1
     774:	ec 0e       	add	r14, r28
     776:	fd 1e       	adc	r15, r29
     778:	ce 01       	movw	r24, r28
     77a:	01 96       	adiw	r24, 0x01	; 1
     77c:	b7 01       	movw	r22, r14
     77e:	0e 94 02 05 	call	0xa04	; 0xa04 <__unpack_f>
     782:	8e 01       	movw	r16, r28
     784:	0f 5e       	subi	r16, 0xEF	; 239
     786:	1f 4f       	sbci	r17, 0xFF	; 255
     788:	ce 01       	movw	r24, r28
     78a:	05 96       	adiw	r24, 0x05	; 5
     78c:	b8 01       	movw	r22, r16
     78e:	0e 94 02 05 	call	0xa04	; 0xa04 <__unpack_f>
     792:	89 85       	ldd	r24, Y+9	; 0x09
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	40 f0       	brcs	.+16     	; 0x7a8 <__lesf2+0x56>
     798:	89 89       	ldd	r24, Y+17	; 0x11
     79a:	82 30       	cpi	r24, 0x02	; 2
     79c:	28 f0       	brcs	.+10     	; 0x7a8 <__lesf2+0x56>
     79e:	c7 01       	movw	r24, r14
     7a0:	b8 01       	movw	r22, r16
     7a2:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fpcmp_parts_f>
     7a6:	01 c0       	rjmp	.+2      	; 0x7aa <__lesf2+0x58>
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	68 96       	adiw	r28, 0x18	; 24
     7ac:	e6 e0       	ldi	r30, 0x06	; 6
     7ae:	0c 94 b2 1b 	jmp	0x3764	; 0x3764 <__epilogue_restores__+0x18>

000007b2 <__fixsfsi>:
     7b2:	ac e0       	ldi	r26, 0x0C	; 12
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
     7b6:	ef ed       	ldi	r30, 0xDF	; 223
     7b8:	f3 e0       	ldi	r31, 0x03	; 3
     7ba:	0c 94 9a 1b 	jmp	0x3734	; 0x3734 <__prologue_saves__+0x20>
     7be:	69 83       	std	Y+1, r22	; 0x01
     7c0:	7a 83       	std	Y+2, r23	; 0x02
     7c2:	8b 83       	std	Y+3, r24	; 0x03
     7c4:	9c 83       	std	Y+4, r25	; 0x04
     7c6:	ce 01       	movw	r24, r28
     7c8:	01 96       	adiw	r24, 0x01	; 1
     7ca:	be 01       	movw	r22, r28
     7cc:	6b 5f       	subi	r22, 0xFB	; 251
     7ce:	7f 4f       	sbci	r23, 0xFF	; 255
     7d0:	0e 94 02 05 	call	0xa04	; 0xa04 <__unpack_f>
     7d4:	8d 81       	ldd	r24, Y+5	; 0x05
     7d6:	82 30       	cpi	r24, 0x02	; 2
     7d8:	61 f1       	breq	.+88     	; 0x832 <__fixsfsi+0x80>
     7da:	82 30       	cpi	r24, 0x02	; 2
     7dc:	50 f1       	brcs	.+84     	; 0x832 <__fixsfsi+0x80>
     7de:	84 30       	cpi	r24, 0x04	; 4
     7e0:	21 f4       	brne	.+8      	; 0x7ea <__fixsfsi+0x38>
     7e2:	8e 81       	ldd	r24, Y+6	; 0x06
     7e4:	88 23       	and	r24, r24
     7e6:	51 f1       	breq	.+84     	; 0x83c <__fixsfsi+0x8a>
     7e8:	2e c0       	rjmp	.+92     	; 0x846 <__fixsfsi+0x94>
     7ea:	2f 81       	ldd	r18, Y+7	; 0x07
     7ec:	38 85       	ldd	r19, Y+8	; 0x08
     7ee:	37 fd       	sbrc	r19, 7
     7f0:	20 c0       	rjmp	.+64     	; 0x832 <__fixsfsi+0x80>
     7f2:	6e 81       	ldd	r22, Y+6	; 0x06
     7f4:	2f 31       	cpi	r18, 0x1F	; 31
     7f6:	31 05       	cpc	r19, r1
     7f8:	1c f0       	brlt	.+6      	; 0x800 <__fixsfsi+0x4e>
     7fa:	66 23       	and	r22, r22
     7fc:	f9 f0       	breq	.+62     	; 0x83c <__fixsfsi+0x8a>
     7fe:	23 c0       	rjmp	.+70     	; 0x846 <__fixsfsi+0x94>
     800:	8e e1       	ldi	r24, 0x1E	; 30
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	82 1b       	sub	r24, r18
     806:	93 0b       	sbc	r25, r19
     808:	29 85       	ldd	r18, Y+9	; 0x09
     80a:	3a 85       	ldd	r19, Y+10	; 0x0a
     80c:	4b 85       	ldd	r20, Y+11	; 0x0b
     80e:	5c 85       	ldd	r21, Y+12	; 0x0c
     810:	04 c0       	rjmp	.+8      	; 0x81a <__fixsfsi+0x68>
     812:	56 95       	lsr	r21
     814:	47 95       	ror	r20
     816:	37 95       	ror	r19
     818:	27 95       	ror	r18
     81a:	8a 95       	dec	r24
     81c:	d2 f7       	brpl	.-12     	; 0x812 <__fixsfsi+0x60>
     81e:	66 23       	and	r22, r22
     820:	b1 f0       	breq	.+44     	; 0x84e <__fixsfsi+0x9c>
     822:	50 95       	com	r21
     824:	40 95       	com	r20
     826:	30 95       	com	r19
     828:	21 95       	neg	r18
     82a:	3f 4f       	sbci	r19, 0xFF	; 255
     82c:	4f 4f       	sbci	r20, 0xFF	; 255
     82e:	5f 4f       	sbci	r21, 0xFF	; 255
     830:	0e c0       	rjmp	.+28     	; 0x84e <__fixsfsi+0x9c>
     832:	20 e0       	ldi	r18, 0x00	; 0
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	40 e0       	ldi	r20, 0x00	; 0
     838:	50 e0       	ldi	r21, 0x00	; 0
     83a:	09 c0       	rjmp	.+18     	; 0x84e <__fixsfsi+0x9c>
     83c:	2f ef       	ldi	r18, 0xFF	; 255
     83e:	3f ef       	ldi	r19, 0xFF	; 255
     840:	4f ef       	ldi	r20, 0xFF	; 255
     842:	5f e7       	ldi	r21, 0x7F	; 127
     844:	04 c0       	rjmp	.+8      	; 0x84e <__fixsfsi+0x9c>
     846:	20 e0       	ldi	r18, 0x00	; 0
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	40 e0       	ldi	r20, 0x00	; 0
     84c:	50 e8       	ldi	r21, 0x80	; 128
     84e:	b9 01       	movw	r22, r18
     850:	ca 01       	movw	r24, r20
     852:	2c 96       	adiw	r28, 0x0c	; 12
     854:	e2 e0       	ldi	r30, 0x02	; 2
     856:	0c 94 b6 1b 	jmp	0x376c	; 0x376c <__epilogue_restores__+0x20>

0000085a <__pack_f>:
     85a:	df 92       	push	r13
     85c:	ef 92       	push	r14
     85e:	ff 92       	push	r15
     860:	0f 93       	push	r16
     862:	1f 93       	push	r17
     864:	fc 01       	movw	r30, r24
     866:	e4 80       	ldd	r14, Z+4	; 0x04
     868:	f5 80       	ldd	r15, Z+5	; 0x05
     86a:	06 81       	ldd	r16, Z+6	; 0x06
     86c:	17 81       	ldd	r17, Z+7	; 0x07
     86e:	d1 80       	ldd	r13, Z+1	; 0x01
     870:	80 81       	ld	r24, Z
     872:	82 30       	cpi	r24, 0x02	; 2
     874:	48 f4       	brcc	.+18     	; 0x888 <__stack+0x29>
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	a0 e1       	ldi	r26, 0x10	; 16
     87c:	b0 e0       	ldi	r27, 0x00	; 0
     87e:	e8 2a       	or	r14, r24
     880:	f9 2a       	or	r15, r25
     882:	0a 2b       	or	r16, r26
     884:	1b 2b       	or	r17, r27
     886:	a5 c0       	rjmp	.+330    	; 0x9d2 <__stack+0x173>
     888:	84 30       	cpi	r24, 0x04	; 4
     88a:	09 f4       	brne	.+2      	; 0x88e <__stack+0x2f>
     88c:	9f c0       	rjmp	.+318    	; 0x9cc <__stack+0x16d>
     88e:	82 30       	cpi	r24, 0x02	; 2
     890:	21 f4       	brne	.+8      	; 0x89a <__stack+0x3b>
     892:	ee 24       	eor	r14, r14
     894:	ff 24       	eor	r15, r15
     896:	87 01       	movw	r16, r14
     898:	05 c0       	rjmp	.+10     	; 0x8a4 <__stack+0x45>
     89a:	e1 14       	cp	r14, r1
     89c:	f1 04       	cpc	r15, r1
     89e:	01 05       	cpc	r16, r1
     8a0:	11 05       	cpc	r17, r1
     8a2:	19 f4       	brne	.+6      	; 0x8aa <__stack+0x4b>
     8a4:	e0 e0       	ldi	r30, 0x00	; 0
     8a6:	f0 e0       	ldi	r31, 0x00	; 0
     8a8:	96 c0       	rjmp	.+300    	; 0x9d6 <__stack+0x177>
     8aa:	62 81       	ldd	r22, Z+2	; 0x02
     8ac:	73 81       	ldd	r23, Z+3	; 0x03
     8ae:	9f ef       	ldi	r25, 0xFF	; 255
     8b0:	62 38       	cpi	r22, 0x82	; 130
     8b2:	79 07       	cpc	r23, r25
     8b4:	0c f0       	brlt	.+2      	; 0x8b8 <__stack+0x59>
     8b6:	5b c0       	rjmp	.+182    	; 0x96e <__stack+0x10f>
     8b8:	22 e8       	ldi	r18, 0x82	; 130
     8ba:	3f ef       	ldi	r19, 0xFF	; 255
     8bc:	26 1b       	sub	r18, r22
     8be:	37 0b       	sbc	r19, r23
     8c0:	2a 31       	cpi	r18, 0x1A	; 26
     8c2:	31 05       	cpc	r19, r1
     8c4:	2c f0       	brlt	.+10     	; 0x8d0 <__stack+0x71>
     8c6:	20 e0       	ldi	r18, 0x00	; 0
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	40 e0       	ldi	r20, 0x00	; 0
     8cc:	50 e0       	ldi	r21, 0x00	; 0
     8ce:	2a c0       	rjmp	.+84     	; 0x924 <__stack+0xc5>
     8d0:	b8 01       	movw	r22, r16
     8d2:	a7 01       	movw	r20, r14
     8d4:	02 2e       	mov	r0, r18
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	76 95       	lsr	r23
     8da:	67 95       	ror	r22
     8dc:	57 95       	ror	r21
     8de:	47 95       	ror	r20
     8e0:	0a 94       	dec	r0
     8e2:	d2 f7       	brpl	.-12     	; 0x8d8 <__stack+0x79>
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	a0 e0       	ldi	r26, 0x00	; 0
     8ea:	b0 e0       	ldi	r27, 0x00	; 0
     8ec:	04 c0       	rjmp	.+8      	; 0x8f6 <__stack+0x97>
     8ee:	88 0f       	add	r24, r24
     8f0:	99 1f       	adc	r25, r25
     8f2:	aa 1f       	adc	r26, r26
     8f4:	bb 1f       	adc	r27, r27
     8f6:	2a 95       	dec	r18
     8f8:	d2 f7       	brpl	.-12     	; 0x8ee <__stack+0x8f>
     8fa:	01 97       	sbiw	r24, 0x01	; 1
     8fc:	a1 09       	sbc	r26, r1
     8fe:	b1 09       	sbc	r27, r1
     900:	8e 21       	and	r24, r14
     902:	9f 21       	and	r25, r15
     904:	a0 23       	and	r26, r16
     906:	b1 23       	and	r27, r17
     908:	00 97       	sbiw	r24, 0x00	; 0
     90a:	a1 05       	cpc	r26, r1
     90c:	b1 05       	cpc	r27, r1
     90e:	21 f0       	breq	.+8      	; 0x918 <__stack+0xb9>
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	a0 e0       	ldi	r26, 0x00	; 0
     916:	b0 e0       	ldi	r27, 0x00	; 0
     918:	9a 01       	movw	r18, r20
     91a:	ab 01       	movw	r20, r22
     91c:	28 2b       	or	r18, r24
     91e:	39 2b       	or	r19, r25
     920:	4a 2b       	or	r20, r26
     922:	5b 2b       	or	r21, r27
     924:	da 01       	movw	r26, r20
     926:	c9 01       	movw	r24, r18
     928:	8f 77       	andi	r24, 0x7F	; 127
     92a:	90 70       	andi	r25, 0x00	; 0
     92c:	a0 70       	andi	r26, 0x00	; 0
     92e:	b0 70       	andi	r27, 0x00	; 0
     930:	80 34       	cpi	r24, 0x40	; 64
     932:	91 05       	cpc	r25, r1
     934:	a1 05       	cpc	r26, r1
     936:	b1 05       	cpc	r27, r1
     938:	39 f4       	brne	.+14     	; 0x948 <__stack+0xe9>
     93a:	27 ff       	sbrs	r18, 7
     93c:	09 c0       	rjmp	.+18     	; 0x950 <__stack+0xf1>
     93e:	20 5c       	subi	r18, 0xC0	; 192
     940:	3f 4f       	sbci	r19, 0xFF	; 255
     942:	4f 4f       	sbci	r20, 0xFF	; 255
     944:	5f 4f       	sbci	r21, 0xFF	; 255
     946:	04 c0       	rjmp	.+8      	; 0x950 <__stack+0xf1>
     948:	21 5c       	subi	r18, 0xC1	; 193
     94a:	3f 4f       	sbci	r19, 0xFF	; 255
     94c:	4f 4f       	sbci	r20, 0xFF	; 255
     94e:	5f 4f       	sbci	r21, 0xFF	; 255
     950:	e0 e0       	ldi	r30, 0x00	; 0
     952:	f0 e0       	ldi	r31, 0x00	; 0
     954:	20 30       	cpi	r18, 0x00	; 0
     956:	a0 e0       	ldi	r26, 0x00	; 0
     958:	3a 07       	cpc	r19, r26
     95a:	a0 e0       	ldi	r26, 0x00	; 0
     95c:	4a 07       	cpc	r20, r26
     95e:	a0 e4       	ldi	r26, 0x40	; 64
     960:	5a 07       	cpc	r21, r26
     962:	10 f0       	brcs	.+4      	; 0x968 <__stack+0x109>
     964:	e1 e0       	ldi	r30, 0x01	; 1
     966:	f0 e0       	ldi	r31, 0x00	; 0
     968:	79 01       	movw	r14, r18
     96a:	8a 01       	movw	r16, r20
     96c:	27 c0       	rjmp	.+78     	; 0x9bc <__stack+0x15d>
     96e:	60 38       	cpi	r22, 0x80	; 128
     970:	71 05       	cpc	r23, r1
     972:	64 f5       	brge	.+88     	; 0x9cc <__stack+0x16d>
     974:	fb 01       	movw	r30, r22
     976:	e1 58       	subi	r30, 0x81	; 129
     978:	ff 4f       	sbci	r31, 0xFF	; 255
     97a:	d8 01       	movw	r26, r16
     97c:	c7 01       	movw	r24, r14
     97e:	8f 77       	andi	r24, 0x7F	; 127
     980:	90 70       	andi	r25, 0x00	; 0
     982:	a0 70       	andi	r26, 0x00	; 0
     984:	b0 70       	andi	r27, 0x00	; 0
     986:	80 34       	cpi	r24, 0x40	; 64
     988:	91 05       	cpc	r25, r1
     98a:	a1 05       	cpc	r26, r1
     98c:	b1 05       	cpc	r27, r1
     98e:	39 f4       	brne	.+14     	; 0x99e <__stack+0x13f>
     990:	e7 fe       	sbrs	r14, 7
     992:	0d c0       	rjmp	.+26     	; 0x9ae <__stack+0x14f>
     994:	80 e4       	ldi	r24, 0x40	; 64
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	a0 e0       	ldi	r26, 0x00	; 0
     99a:	b0 e0       	ldi	r27, 0x00	; 0
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__stack+0x147>
     99e:	8f e3       	ldi	r24, 0x3F	; 63
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	a0 e0       	ldi	r26, 0x00	; 0
     9a4:	b0 e0       	ldi	r27, 0x00	; 0
     9a6:	e8 0e       	add	r14, r24
     9a8:	f9 1e       	adc	r15, r25
     9aa:	0a 1f       	adc	r16, r26
     9ac:	1b 1f       	adc	r17, r27
     9ae:	17 ff       	sbrs	r17, 7
     9b0:	05 c0       	rjmp	.+10     	; 0x9bc <__stack+0x15d>
     9b2:	16 95       	lsr	r17
     9b4:	07 95       	ror	r16
     9b6:	f7 94       	ror	r15
     9b8:	e7 94       	ror	r14
     9ba:	31 96       	adiw	r30, 0x01	; 1
     9bc:	87 e0       	ldi	r24, 0x07	; 7
     9be:	16 95       	lsr	r17
     9c0:	07 95       	ror	r16
     9c2:	f7 94       	ror	r15
     9c4:	e7 94       	ror	r14
     9c6:	8a 95       	dec	r24
     9c8:	d1 f7       	brne	.-12     	; 0x9be <__stack+0x15f>
     9ca:	05 c0       	rjmp	.+10     	; 0x9d6 <__stack+0x177>
     9cc:	ee 24       	eor	r14, r14
     9ce:	ff 24       	eor	r15, r15
     9d0:	87 01       	movw	r16, r14
     9d2:	ef ef       	ldi	r30, 0xFF	; 255
     9d4:	f0 e0       	ldi	r31, 0x00	; 0
     9d6:	6e 2f       	mov	r22, r30
     9d8:	67 95       	ror	r22
     9da:	66 27       	eor	r22, r22
     9dc:	67 95       	ror	r22
     9de:	90 2f       	mov	r25, r16
     9e0:	9f 77       	andi	r25, 0x7F	; 127
     9e2:	d7 94       	ror	r13
     9e4:	dd 24       	eor	r13, r13
     9e6:	d7 94       	ror	r13
     9e8:	8e 2f       	mov	r24, r30
     9ea:	86 95       	lsr	r24
     9ec:	49 2f       	mov	r20, r25
     9ee:	46 2b       	or	r20, r22
     9f0:	58 2f       	mov	r21, r24
     9f2:	5d 29       	or	r21, r13
     9f4:	b7 01       	movw	r22, r14
     9f6:	ca 01       	movw	r24, r20
     9f8:	1f 91       	pop	r17
     9fa:	0f 91       	pop	r16
     9fc:	ff 90       	pop	r15
     9fe:	ef 90       	pop	r14
     a00:	df 90       	pop	r13
     a02:	08 95       	ret

00000a04 <__unpack_f>:
     a04:	fc 01       	movw	r30, r24
     a06:	db 01       	movw	r26, r22
     a08:	40 81       	ld	r20, Z
     a0a:	51 81       	ldd	r21, Z+1	; 0x01
     a0c:	22 81       	ldd	r18, Z+2	; 0x02
     a0e:	62 2f       	mov	r22, r18
     a10:	6f 77       	andi	r22, 0x7F	; 127
     a12:	70 e0       	ldi	r23, 0x00	; 0
     a14:	22 1f       	adc	r18, r18
     a16:	22 27       	eor	r18, r18
     a18:	22 1f       	adc	r18, r18
     a1a:	93 81       	ldd	r25, Z+3	; 0x03
     a1c:	89 2f       	mov	r24, r25
     a1e:	88 0f       	add	r24, r24
     a20:	82 2b       	or	r24, r18
     a22:	28 2f       	mov	r18, r24
     a24:	30 e0       	ldi	r19, 0x00	; 0
     a26:	99 1f       	adc	r25, r25
     a28:	99 27       	eor	r25, r25
     a2a:	99 1f       	adc	r25, r25
     a2c:	11 96       	adiw	r26, 0x01	; 1
     a2e:	9c 93       	st	X, r25
     a30:	11 97       	sbiw	r26, 0x01	; 1
     a32:	21 15       	cp	r18, r1
     a34:	31 05       	cpc	r19, r1
     a36:	a9 f5       	brne	.+106    	; 0xaa2 <__unpack_f+0x9e>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	11 f4       	brne	.+4      	; 0xa46 <__unpack_f+0x42>
     a42:	82 e0       	ldi	r24, 0x02	; 2
     a44:	37 c0       	rjmp	.+110    	; 0xab4 <__unpack_f+0xb0>
     a46:	82 e8       	ldi	r24, 0x82	; 130
     a48:	9f ef       	ldi	r25, 0xFF	; 255
     a4a:	13 96       	adiw	r26, 0x03	; 3
     a4c:	9c 93       	st	X, r25
     a4e:	8e 93       	st	-X, r24
     a50:	12 97       	sbiw	r26, 0x02	; 2
     a52:	9a 01       	movw	r18, r20
     a54:	ab 01       	movw	r20, r22
     a56:	67 e0       	ldi	r22, 0x07	; 7
     a58:	22 0f       	add	r18, r18
     a5a:	33 1f       	adc	r19, r19
     a5c:	44 1f       	adc	r20, r20
     a5e:	55 1f       	adc	r21, r21
     a60:	6a 95       	dec	r22
     a62:	d1 f7       	brne	.-12     	; 0xa58 <__unpack_f+0x54>
     a64:	83 e0       	ldi	r24, 0x03	; 3
     a66:	8c 93       	st	X, r24
     a68:	0d c0       	rjmp	.+26     	; 0xa84 <__unpack_f+0x80>
     a6a:	22 0f       	add	r18, r18
     a6c:	33 1f       	adc	r19, r19
     a6e:	44 1f       	adc	r20, r20
     a70:	55 1f       	adc	r21, r21
     a72:	12 96       	adiw	r26, 0x02	; 2
     a74:	8d 91       	ld	r24, X+
     a76:	9c 91       	ld	r25, X
     a78:	13 97       	sbiw	r26, 0x03	; 3
     a7a:	01 97       	sbiw	r24, 0x01	; 1
     a7c:	13 96       	adiw	r26, 0x03	; 3
     a7e:	9c 93       	st	X, r25
     a80:	8e 93       	st	-X, r24
     a82:	12 97       	sbiw	r26, 0x02	; 2
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	38 07       	cpc	r19, r24
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	48 07       	cpc	r20, r24
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	58 07       	cpc	r21, r24
     a92:	58 f3       	brcs	.-42     	; 0xa6a <__unpack_f+0x66>
     a94:	14 96       	adiw	r26, 0x04	; 4
     a96:	2d 93       	st	X+, r18
     a98:	3d 93       	st	X+, r19
     a9a:	4d 93       	st	X+, r20
     a9c:	5c 93       	st	X, r21
     a9e:	17 97       	sbiw	r26, 0x07	; 7
     aa0:	08 95       	ret
     aa2:	2f 3f       	cpi	r18, 0xFF	; 255
     aa4:	31 05       	cpc	r19, r1
     aa6:	79 f4       	brne	.+30     	; 0xac6 <__unpack_f+0xc2>
     aa8:	41 15       	cp	r20, r1
     aaa:	51 05       	cpc	r21, r1
     aac:	61 05       	cpc	r22, r1
     aae:	71 05       	cpc	r23, r1
     ab0:	19 f4       	brne	.+6      	; 0xab8 <__unpack_f+0xb4>
     ab2:	84 e0       	ldi	r24, 0x04	; 4
     ab4:	8c 93       	st	X, r24
     ab6:	08 95       	ret
     ab8:	64 ff       	sbrs	r22, 4
     aba:	03 c0       	rjmp	.+6      	; 0xac2 <__unpack_f+0xbe>
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	8c 93       	st	X, r24
     ac0:	12 c0       	rjmp	.+36     	; 0xae6 <__unpack_f+0xe2>
     ac2:	1c 92       	st	X, r1
     ac4:	10 c0       	rjmp	.+32     	; 0xae6 <__unpack_f+0xe2>
     ac6:	2f 57       	subi	r18, 0x7F	; 127
     ac8:	30 40       	sbci	r19, 0x00	; 0
     aca:	13 96       	adiw	r26, 0x03	; 3
     acc:	3c 93       	st	X, r19
     ace:	2e 93       	st	-X, r18
     ad0:	12 97       	sbiw	r26, 0x02	; 2
     ad2:	83 e0       	ldi	r24, 0x03	; 3
     ad4:	8c 93       	st	X, r24
     ad6:	87 e0       	ldi	r24, 0x07	; 7
     ad8:	44 0f       	add	r20, r20
     ada:	55 1f       	adc	r21, r21
     adc:	66 1f       	adc	r22, r22
     ade:	77 1f       	adc	r23, r23
     ae0:	8a 95       	dec	r24
     ae2:	d1 f7       	brne	.-12     	; 0xad8 <__unpack_f+0xd4>
     ae4:	70 64       	ori	r23, 0x40	; 64
     ae6:	14 96       	adiw	r26, 0x04	; 4
     ae8:	4d 93       	st	X+, r20
     aea:	5d 93       	st	X+, r21
     aec:	6d 93       	st	X+, r22
     aee:	7c 93       	st	X, r23
     af0:	17 97       	sbiw	r26, 0x07	; 7
     af2:	08 95       	ret

00000af4 <__fpcmp_parts_f>:
     af4:	1f 93       	push	r17
     af6:	dc 01       	movw	r26, r24
     af8:	fb 01       	movw	r30, r22
     afa:	9c 91       	ld	r25, X
     afc:	92 30       	cpi	r25, 0x02	; 2
     afe:	08 f4       	brcc	.+2      	; 0xb02 <__fpcmp_parts_f+0xe>
     b00:	47 c0       	rjmp	.+142    	; 0xb90 <__fpcmp_parts_f+0x9c>
     b02:	80 81       	ld	r24, Z
     b04:	82 30       	cpi	r24, 0x02	; 2
     b06:	08 f4       	brcc	.+2      	; 0xb0a <__fpcmp_parts_f+0x16>
     b08:	43 c0       	rjmp	.+134    	; 0xb90 <__fpcmp_parts_f+0x9c>
     b0a:	94 30       	cpi	r25, 0x04	; 4
     b0c:	51 f4       	brne	.+20     	; 0xb22 <__fpcmp_parts_f+0x2e>
     b0e:	11 96       	adiw	r26, 0x01	; 1
     b10:	1c 91       	ld	r17, X
     b12:	84 30       	cpi	r24, 0x04	; 4
     b14:	99 f5       	brne	.+102    	; 0xb7c <__fpcmp_parts_f+0x88>
     b16:	81 81       	ldd	r24, Z+1	; 0x01
     b18:	68 2f       	mov	r22, r24
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	61 1b       	sub	r22, r17
     b1e:	71 09       	sbc	r23, r1
     b20:	3f c0       	rjmp	.+126    	; 0xba0 <__fpcmp_parts_f+0xac>
     b22:	84 30       	cpi	r24, 0x04	; 4
     b24:	21 f0       	breq	.+8      	; 0xb2e <__fpcmp_parts_f+0x3a>
     b26:	92 30       	cpi	r25, 0x02	; 2
     b28:	31 f4       	brne	.+12     	; 0xb36 <__fpcmp_parts_f+0x42>
     b2a:	82 30       	cpi	r24, 0x02	; 2
     b2c:	b9 f1       	breq	.+110    	; 0xb9c <__fpcmp_parts_f+0xa8>
     b2e:	81 81       	ldd	r24, Z+1	; 0x01
     b30:	88 23       	and	r24, r24
     b32:	89 f1       	breq	.+98     	; 0xb96 <__fpcmp_parts_f+0xa2>
     b34:	2d c0       	rjmp	.+90     	; 0xb90 <__fpcmp_parts_f+0x9c>
     b36:	11 96       	adiw	r26, 0x01	; 1
     b38:	1c 91       	ld	r17, X
     b3a:	11 97       	sbiw	r26, 0x01	; 1
     b3c:	82 30       	cpi	r24, 0x02	; 2
     b3e:	f1 f0       	breq	.+60     	; 0xb7c <__fpcmp_parts_f+0x88>
     b40:	81 81       	ldd	r24, Z+1	; 0x01
     b42:	18 17       	cp	r17, r24
     b44:	d9 f4       	brne	.+54     	; 0xb7c <__fpcmp_parts_f+0x88>
     b46:	12 96       	adiw	r26, 0x02	; 2
     b48:	2d 91       	ld	r18, X+
     b4a:	3c 91       	ld	r19, X
     b4c:	13 97       	sbiw	r26, 0x03	; 3
     b4e:	82 81       	ldd	r24, Z+2	; 0x02
     b50:	93 81       	ldd	r25, Z+3	; 0x03
     b52:	82 17       	cp	r24, r18
     b54:	93 07       	cpc	r25, r19
     b56:	94 f0       	brlt	.+36     	; 0xb7c <__fpcmp_parts_f+0x88>
     b58:	28 17       	cp	r18, r24
     b5a:	39 07       	cpc	r19, r25
     b5c:	bc f0       	brlt	.+46     	; 0xb8c <__fpcmp_parts_f+0x98>
     b5e:	14 96       	adiw	r26, 0x04	; 4
     b60:	8d 91       	ld	r24, X+
     b62:	9d 91       	ld	r25, X+
     b64:	0d 90       	ld	r0, X+
     b66:	bc 91       	ld	r27, X
     b68:	a0 2d       	mov	r26, r0
     b6a:	24 81       	ldd	r18, Z+4	; 0x04
     b6c:	35 81       	ldd	r19, Z+5	; 0x05
     b6e:	46 81       	ldd	r20, Z+6	; 0x06
     b70:	57 81       	ldd	r21, Z+7	; 0x07
     b72:	28 17       	cp	r18, r24
     b74:	39 07       	cpc	r19, r25
     b76:	4a 07       	cpc	r20, r26
     b78:	5b 07       	cpc	r21, r27
     b7a:	18 f4       	brcc	.+6      	; 0xb82 <__fpcmp_parts_f+0x8e>
     b7c:	11 23       	and	r17, r17
     b7e:	41 f0       	breq	.+16     	; 0xb90 <__fpcmp_parts_f+0x9c>
     b80:	0a c0       	rjmp	.+20     	; 0xb96 <__fpcmp_parts_f+0xa2>
     b82:	82 17       	cp	r24, r18
     b84:	93 07       	cpc	r25, r19
     b86:	a4 07       	cpc	r26, r20
     b88:	b5 07       	cpc	r27, r21
     b8a:	40 f4       	brcc	.+16     	; 0xb9c <__fpcmp_parts_f+0xa8>
     b8c:	11 23       	and	r17, r17
     b8e:	19 f0       	breq	.+6      	; 0xb96 <__fpcmp_parts_f+0xa2>
     b90:	61 e0       	ldi	r22, 0x01	; 1
     b92:	70 e0       	ldi	r23, 0x00	; 0
     b94:	05 c0       	rjmp	.+10     	; 0xba0 <__fpcmp_parts_f+0xac>
     b96:	6f ef       	ldi	r22, 0xFF	; 255
     b98:	7f ef       	ldi	r23, 0xFF	; 255
     b9a:	02 c0       	rjmp	.+4      	; 0xba0 <__fpcmp_parts_f+0xac>
     b9c:	60 e0       	ldi	r22, 0x00	; 0
     b9e:	70 e0       	ldi	r23, 0x00	; 0
     ba0:	cb 01       	movw	r24, r22
     ba2:	1f 91       	pop	r17
     ba4:	08 95       	ret

00000ba6 <Timer_enu_Initialization>:
static void (* apfun_ISRpointers[TIMER_ISR_COUNT])(void*)= { NULL};
static void* apvid_ISRParameters[TIMER_ISR_COUNT] = {NULL};

//APIs implementaion
extern ErrorState_t Timer_enu_Initialization(void)
{
     ba6:	df 93       	push	r29
     ba8:	cf 93       	push	r28
     baa:	00 d0       	rcall	.+0      	; 0xbac <Timer_enu_Initialization+0x6>
     bac:	00 d0       	rcall	.+0      	; 0xbae <Timer_enu_Initialization+0x8>
     bae:	00 d0       	rcall	.+0      	; 0xbb0 <Timer_enu_Initialization+0xa>
     bb0:	cd b7       	in	r28, 0x3d	; 61
     bb2:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_OK;
     bb4:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_u8_Counter = 0;
     bb6:	19 82       	std	Y+1, r1	; 0x01

    u8 Local_au8_ErrorStates [4] ={0};
     bb8:	1b 82       	std	Y+3, r1	; 0x03
     bba:	1c 82       	std	Y+4, r1	; 0x04
     bbc:	1d 82       	std	Y+5, r1	; 0x05
     bbe:	1e 82       	std	Y+6, r1	; 0x06

    for ( Local_u8_Counter = 0; Local_u8_Counter < Timer_u8_TimerCount; Local_u8_Counter++)
     bc0:	19 82       	std	Y+1, r1	; 0x01
     bc2:	b3 c0       	rjmp	.+358    	; 0xd2a <Timer_enu_Initialization+0x184>
    {
        
      Local_au8_ErrorStates[0] = enu_SetTimerMode(Timer_astr_TimerList[Local_u8_Counter].TimerNumber, Timer_astr_TimerList[Local_u8_Counter].TimerMode);
     bc4:	89 81       	ldd	r24, Y+1	; 0x01
     bc6:	28 2f       	mov	r18, r24
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	c9 01       	movw	r24, r18
     bcc:	88 0f       	add	r24, r24
     bce:	99 1f       	adc	r25, r25
     bd0:	88 0f       	add	r24, r24
     bd2:	99 1f       	adc	r25, r25
     bd4:	82 0f       	add	r24, r18
     bd6:	93 1f       	adc	r25, r19
     bd8:	fc 01       	movw	r30, r24
     bda:	e7 59       	subi	r30, 0x97	; 151
     bdc:	ff 4f       	sbci	r31, 0xFF	; 255
     bde:	40 81       	ld	r20, Z
     be0:	89 81       	ldd	r24, Y+1	; 0x01
     be2:	28 2f       	mov	r18, r24
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	c9 01       	movw	r24, r18
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	88 0f       	add	r24, r24
     bee:	99 1f       	adc	r25, r25
     bf0:	82 0f       	add	r24, r18
     bf2:	93 1f       	adc	r25, r19
     bf4:	fc 01       	movw	r30, r24
     bf6:	e6 59       	subi	r30, 0x96	; 150
     bf8:	ff 4f       	sbci	r31, 0xFF	; 255
     bfa:	90 81       	ld	r25, Z
     bfc:	84 2f       	mov	r24, r20
     bfe:	69 2f       	mov	r22, r25
     c00:	0e 94 be 0a 	call	0x157c	; 0x157c <enu_SetTimerMode>
     c04:	8b 83       	std	Y+3, r24	; 0x03
      Local_au8_ErrorStates[1] = enu_SetClockSelection(Timer_astr_TimerList[Local_u8_Counter].TimerNumber, Timer_astr_TimerList[Local_u8_Counter].ClockSelection);
     c06:	89 81       	ldd	r24, Y+1	; 0x01
     c08:	28 2f       	mov	r18, r24
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	c9 01       	movw	r24, r18
     c0e:	88 0f       	add	r24, r24
     c10:	99 1f       	adc	r25, r25
     c12:	88 0f       	add	r24, r24
     c14:	99 1f       	adc	r25, r25
     c16:	82 0f       	add	r24, r18
     c18:	93 1f       	adc	r25, r19
     c1a:	fc 01       	movw	r30, r24
     c1c:	e7 59       	subi	r30, 0x97	; 151
     c1e:	ff 4f       	sbci	r31, 0xFF	; 255
     c20:	40 81       	ld	r20, Z
     c22:	89 81       	ldd	r24, Y+1	; 0x01
     c24:	28 2f       	mov	r18, r24
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	c9 01       	movw	r24, r18
     c2a:	88 0f       	add	r24, r24
     c2c:	99 1f       	adc	r25, r25
     c2e:	88 0f       	add	r24, r24
     c30:	99 1f       	adc	r25, r25
     c32:	82 0f       	add	r24, r18
     c34:	93 1f       	adc	r25, r19
     c36:	fc 01       	movw	r30, r24
     c38:	e5 59       	subi	r30, 0x95	; 149
     c3a:	ff 4f       	sbci	r31, 0xFF	; 255
     c3c:	90 81       	ld	r25, Z
     c3e:	84 2f       	mov	r24, r20
     c40:	69 2f       	mov	r22, r25
     c42:	0e 94 88 0b 	call	0x1710	; 0x1710 <enu_SetClockSelection>
     c46:	8c 83       	std	Y+4, r24	; 0x04
      Local_au8_ErrorStates[2] = enu_SetInterruptMode(Timer_astr_TimerList[Local_u8_Counter].TimerNumber, Timer_astr_TimerList[Local_u8_Counter].TimerMode, Timer_astr_TimerList[Local_u8_Counter].InterruptMode);
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	28 2f       	mov	r18, r24
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	c9 01       	movw	r24, r18
     c50:	88 0f       	add	r24, r24
     c52:	99 1f       	adc	r25, r25
     c54:	88 0f       	add	r24, r24
     c56:	99 1f       	adc	r25, r25
     c58:	82 0f       	add	r24, r18
     c5a:	93 1f       	adc	r25, r19
     c5c:	fc 01       	movw	r30, r24
     c5e:	e7 59       	subi	r30, 0x97	; 151
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	50 81       	ld	r21, Z
     c64:	89 81       	ldd	r24, Y+1	; 0x01
     c66:	28 2f       	mov	r18, r24
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	c9 01       	movw	r24, r18
     c6c:	88 0f       	add	r24, r24
     c6e:	99 1f       	adc	r25, r25
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	82 0f       	add	r24, r18
     c76:	93 1f       	adc	r25, r19
     c78:	fc 01       	movw	r30, r24
     c7a:	e6 59       	subi	r30, 0x96	; 150
     c7c:	ff 4f       	sbci	r31, 0xFF	; 255
     c7e:	40 81       	ld	r20, Z
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	28 2f       	mov	r18, r24
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	c9 01       	movw	r24, r18
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	88 0f       	add	r24, r24
     c8e:	99 1f       	adc	r25, r25
     c90:	82 0f       	add	r24, r18
     c92:	93 1f       	adc	r25, r19
     c94:	fc 01       	movw	r30, r24
     c96:	e4 59       	subi	r30, 0x94	; 148
     c98:	ff 4f       	sbci	r31, 0xFF	; 255
     c9a:	90 81       	ld	r25, Z
     c9c:	85 2f       	mov	r24, r21
     c9e:	64 2f       	mov	r22, r20
     ca0:	49 2f       	mov	r20, r25
     ca2:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <enu_SetInterruptMode>
     ca6:	8d 83       	std	Y+5, r24	; 0x05
      Local_au8_ErrorStates[3] = enu_SetOCxBehavior(Timer_astr_TimerList[Local_u8_Counter].TimerNumber, Timer_astr_TimerList[Local_u8_Counter].TimerMode ,Timer_astr_TimerList[Local_u8_Counter].OCxPinBehavior);
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	c9 01       	movw	r24, r18
     cb0:	88 0f       	add	r24, r24
     cb2:	99 1f       	adc	r25, r25
     cb4:	88 0f       	add	r24, r24
     cb6:	99 1f       	adc	r25, r25
     cb8:	82 0f       	add	r24, r18
     cba:	93 1f       	adc	r25, r19
     cbc:	fc 01       	movw	r30, r24
     cbe:	e7 59       	subi	r30, 0x97	; 151
     cc0:	ff 4f       	sbci	r31, 0xFF	; 255
     cc2:	50 81       	ld	r21, Z
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	c9 01       	movw	r24, r18
     ccc:	88 0f       	add	r24, r24
     cce:	99 1f       	adc	r25, r25
     cd0:	88 0f       	add	r24, r24
     cd2:	99 1f       	adc	r25, r25
     cd4:	82 0f       	add	r24, r18
     cd6:	93 1f       	adc	r25, r19
     cd8:	fc 01       	movw	r30, r24
     cda:	e6 59       	subi	r30, 0x96	; 150
     cdc:	ff 4f       	sbci	r31, 0xFF	; 255
     cde:	40 81       	ld	r20, Z
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	c9 01       	movw	r24, r18
     ce8:	88 0f       	add	r24, r24
     cea:	99 1f       	adc	r25, r25
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	82 0f       	add	r24, r18
     cf2:	93 1f       	adc	r25, r19
     cf4:	fc 01       	movw	r30, r24
     cf6:	e3 59       	subi	r30, 0x93	; 147
     cf8:	ff 4f       	sbci	r31, 0xFF	; 255
     cfa:	90 81       	ld	r25, Z
     cfc:	85 2f       	mov	r24, r21
     cfe:	64 2f       	mov	r22, r20
     d00:	49 2f       	mov	r20, r25
     d02:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <enu_SetOCxBehavior>
     d06:	8e 83       	std	Y+6, r24	; 0x06
    
      if((Local_au8_ErrorStates[0] == ES_NOK) || (Local_au8_ErrorStates[1] == ES_NOK) || (Local_au8_ErrorStates[2] == ES_NOK) || (Local_au8_ErrorStates[3] == ES_NOK))
     d08:	8b 81       	ldd	r24, Y+3	; 0x03
     d0a:	81 30       	cpi	r24, 0x01	; 1
     d0c:	49 f0       	breq	.+18     	; 0xd20 <Timer_enu_Initialization+0x17a>
     d0e:	8c 81       	ldd	r24, Y+4	; 0x04
     d10:	81 30       	cpi	r24, 0x01	; 1
     d12:	31 f0       	breq	.+12     	; 0xd20 <Timer_enu_Initialization+0x17a>
     d14:	8d 81       	ldd	r24, Y+5	; 0x05
     d16:	81 30       	cpi	r24, 0x01	; 1
     d18:	19 f0       	breq	.+6      	; 0xd20 <Timer_enu_Initialization+0x17a>
     d1a:	8e 81       	ldd	r24, Y+6	; 0x06
     d1c:	81 30       	cpi	r24, 0x01	; 1
     d1e:	11 f4       	brne	.+4      	; 0xd24 <Timer_enu_Initialization+0x17e>
      {
        Local_u8_ErrorFlag = ES_NOK;
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_OK;
    u8 Local_u8_Counter = 0;

    u8 Local_au8_ErrorStates [4] ={0};

    for ( Local_u8_Counter = 0; Local_u8_Counter < Timer_u8_TimerCount; Local_u8_Counter++)
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	8f 5f       	subi	r24, 0xFF	; 255
     d28:	89 83       	std	Y+1, r24	; 0x01
     d2a:	90 91 68 00 	lds	r25, 0x0068
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	89 17       	cp	r24, r25
     d32:	08 f4       	brcc	.+2      	; 0xd36 <Timer_enu_Initialization+0x190>
     d34:	47 cf       	rjmp	.-370    	; 0xbc4 <Timer_enu_Initialization+0x1e>
      }
    }
    


    return Local_u8_ErrorFlag;
     d36:	8a 81       	ldd	r24, Y+2	; 0x02
}
     d38:	26 96       	adiw	r28, 0x06	; 6
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	f8 94       	cli
     d3e:	de bf       	out	0x3e, r29	; 62
     d40:	0f be       	out	0x3f, r0	; 63
     d42:	cd bf       	out	0x3d, r28	; 61
     d44:	cf 91       	pop	r28
     d46:	df 91       	pop	r29
     d48:	08 95       	ret

00000d4a <Timer_enu_SetOCRxValue>:

extern ErrorState_t Timer_enu_SetOCRxValue(u8 Copy_u8_TimerNumber, u16 Copy_u16_Value)
{
     d4a:	df 93       	push	r29
     d4c:	cf 93       	push	r28
     d4e:	00 d0       	rcall	.+0      	; 0xd50 <Timer_enu_SetOCRxValue+0x6>
     d50:	00 d0       	rcall	.+0      	; 0xd52 <Timer_enu_SetOCRxValue+0x8>
     d52:	00 d0       	rcall	.+0      	; 0xd54 <Timer_enu_SetOCRxValue+0xa>
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
     d58:	8a 83       	std	Y+2, r24	; 0x02
     d5a:	7c 83       	std	Y+4, r23	; 0x04
     d5c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_TimerNumber)
     d62:	8a 81       	ldd	r24, Y+2	; 0x02
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	3e 83       	std	Y+6, r19	; 0x06
     d6a:	2d 83       	std	Y+5, r18	; 0x05
     d6c:	8d 81       	ldd	r24, Y+5	; 0x05
     d6e:	9e 81       	ldd	r25, Y+6	; 0x06
     d70:	81 30       	cpi	r24, 0x01	; 1
     d72:	91 05       	cpc	r25, r1
     d74:	b9 f0       	breq	.+46     	; 0xda4 <Timer_enu_SetOCRxValue+0x5a>
     d76:	2d 81       	ldd	r18, Y+5	; 0x05
     d78:	3e 81       	ldd	r19, Y+6	; 0x06
     d7a:	22 30       	cpi	r18, 0x02	; 2
     d7c:	31 05       	cpc	r19, r1
     d7e:	51 f0       	breq	.+20     	; 0xd94 <Timer_enu_SetOCRxValue+0x4a>
     d80:	8d 81       	ldd	r24, Y+5	; 0x05
     d82:	9e 81       	ldd	r25, Y+6	; 0x06
     d84:	00 97       	sbiw	r24, 0x00	; 0
     d86:	61 f4       	brne	.+24     	; 0xda0 <Timer_enu_SetOCRxValue+0x56>
    {
        case TIMER_0:
        {
            OCR0 = Copy_u16_Value;
     d88:	ec e5       	ldi	r30, 0x5C	; 92
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	8b 81       	ldd	r24, Y+3	; 0x03
     d8e:	80 83       	st	Z, r24

            Local_u8_ErrorFlag = ES_OK;
     d90:	19 82       	std	Y+1, r1	; 0x01
     d92:	08 c0       	rjmp	.+16     	; 0xda4 <Timer_enu_SetOCRxValue+0x5a>
            break;
        }

        case TIMER_2:
        {
            OCR2 = Copy_u16_Value;
     d94:	e3 e4       	ldi	r30, 0x43	; 67
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	8b 81       	ldd	r24, Y+3	; 0x03
     d9a:	80 83       	st	Z, r24

            Local_u8_ErrorFlag = ES_OK;
     d9c:	19 82       	std	Y+1, r1	; 0x01
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <Timer_enu_SetOCRxValue+0x5a>
            break;
        }
    
        default:
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
     da0:	82 e0       	ldi	r24, 0x02	; 2
     da2:	89 83       	std	Y+1, r24	; 0x01
            break;
        }
    }

    return Local_u8_ErrorFlag;
     da4:	89 81       	ldd	r24, Y+1	; 0x01
}
     da6:	26 96       	adiw	r28, 0x06	; 6
     da8:	0f b6       	in	r0, 0x3f	; 63
     daa:	f8 94       	cli
     dac:	de bf       	out	0x3e, r29	; 62
     dae:	0f be       	out	0x3f, r0	; 63
     db0:	cd bf       	out	0x3d, r28	; 61
     db2:	cf 91       	pop	r28
     db4:	df 91       	pop	r29
     db6:	08 95       	ret

00000db8 <Timer_enu_SetTCNTxValue>:

extern ErrorState_t Timer_enu_SetTCNTxValue(u8 Copy_u8_TimerNumber, u16 Copy_u16_Value)
{
     db8:	df 93       	push	r29
     dba:	cf 93       	push	r28
     dbc:	00 d0       	rcall	.+0      	; 0xdbe <Timer_enu_SetTCNTxValue+0x6>
     dbe:	00 d0       	rcall	.+0      	; 0xdc0 <Timer_enu_SetTCNTxValue+0x8>
     dc0:	00 d0       	rcall	.+0      	; 0xdc2 <Timer_enu_SetTCNTxValue+0xa>
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	8a 83       	std	Y+2, r24	; 0x02
     dc8:	7c 83       	std	Y+4, r23	; 0x04
     dca:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_TimerNumber)
     dd0:	8a 81       	ldd	r24, Y+2	; 0x02
     dd2:	28 2f       	mov	r18, r24
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	3e 83       	std	Y+6, r19	; 0x06
     dd8:	2d 83       	std	Y+5, r18	; 0x05
     dda:	8d 81       	ldd	r24, Y+5	; 0x05
     ddc:	9e 81       	ldd	r25, Y+6	; 0x06
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	91 05       	cpc	r25, r1
     de2:	b1 f0       	breq	.+44     	; 0xe10 <Timer_enu_SetTCNTxValue+0x58>
     de4:	2d 81       	ldd	r18, Y+5	; 0x05
     de6:	3e 81       	ldd	r19, Y+6	; 0x06
     de8:	22 30       	cpi	r18, 0x02	; 2
     dea:	31 05       	cpc	r19, r1
     dec:	51 f0       	breq	.+20     	; 0xe02 <Timer_enu_SetTCNTxValue+0x4a>
     dee:	8d 81       	ldd	r24, Y+5	; 0x05
     df0:	9e 81       	ldd	r25, Y+6	; 0x06
     df2:	00 97       	sbiw	r24, 0x00	; 0
     df4:	59 f4       	brne	.+22     	; 0xe0c <Timer_enu_SetTCNTxValue+0x54>
    {
        case TIMER_0:
        {
            TCNT0 = (u8)Copy_u16_Value;
     df6:	e2 e5       	ldi	r30, 0x52	; 82
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	8b 81       	ldd	r24, Y+3	; 0x03
     dfc:	80 83       	st	Z, r24

            Local_u8_ErrorFlag = ES_OK;
     dfe:	19 82       	std	Y+1, r1	; 0x01
     e00:	07 c0       	rjmp	.+14     	; 0xe10 <Timer_enu_SetTCNTxValue+0x58>
            break;
        }

        case TIMER_2:
        {
            TCNT2 = (u8)Copy_u16_Value;
     e02:	e4 e4       	ldi	r30, 0x44	; 68
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	8b 81       	ldd	r24, Y+3	; 0x03
     e08:	80 83       	st	Z, r24
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <Timer_enu_SetTCNTxValue+0x58>
            break;
        }
    
        default:
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
     e0c:	82 e0       	ldi	r24, 0x02	; 2
     e0e:	89 83       	std	Y+1, r24	; 0x01
            break;
        }
    }

    return Local_u8_ErrorFlag;
     e10:	89 81       	ldd	r24, Y+1	; 0x01
}
     e12:	26 96       	adiw	r28, 0x06	; 6
     e14:	0f b6       	in	r0, 0x3f	; 63
     e16:	f8 94       	cli
     e18:	de bf       	out	0x3e, r29	; 62
     e1a:	0f be       	out	0x3f, r0	; 63
     e1c:	cd bf       	out	0x3d, r28	; 61
     e1e:	cf 91       	pop	r28
     e20:	df 91       	pop	r29
     e22:	08 95       	ret

00000e24 <Timer_enu_ReadTCNTxValue>:

extern ErrorState_t Timer_enu_ReadTCNTxValue(u8 Copy_u8_TimerNumber, u16* Copy_u16_Value)
{
     e24:	df 93       	push	r29
     e26:	cf 93       	push	r28
     e28:	00 d0       	rcall	.+0      	; 0xe2a <Timer_enu_ReadTCNTxValue+0x6>
     e2a:	00 d0       	rcall	.+0      	; 0xe2c <Timer_enu_ReadTCNTxValue+0x8>
     e2c:	00 d0       	rcall	.+0      	; 0xe2e <Timer_enu_ReadTCNTxValue+0xa>
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	8a 83       	std	Y+2, r24	; 0x02
     e34:	7c 83       	std	Y+4, r23	; 0x04
     e36:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u16_Value)
     e3c:	8b 81       	ldd	r24, Y+3	; 0x03
     e3e:	9c 81       	ldd	r25, Y+4	; 0x04
     e40:	00 97       	sbiw	r24, 0x00	; 0
     e42:	61 f1       	breq	.+88     	; 0xe9c <Timer_enu_ReadTCNTxValue+0x78>
    {
        switch (Copy_u8_TimerNumber)
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	3e 83       	std	Y+6, r19	; 0x06
     e4c:	2d 83       	std	Y+5, r18	; 0x05
     e4e:	8d 81       	ldd	r24, Y+5	; 0x05
     e50:	9e 81       	ldd	r25, Y+6	; 0x06
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	91 05       	cpc	r25, r1
     e56:	21 f1       	breq	.+72     	; 0xea0 <Timer_enu_ReadTCNTxValue+0x7c>
     e58:	2d 81       	ldd	r18, Y+5	; 0x05
     e5a:	3e 81       	ldd	r19, Y+6	; 0x06
     e5c:	22 30       	cpi	r18, 0x02	; 2
     e5e:	31 05       	cpc	r19, r1
     e60:	79 f0       	breq	.+30     	; 0xe80 <Timer_enu_ReadTCNTxValue+0x5c>
     e62:	8d 81       	ldd	r24, Y+5	; 0x05
     e64:	9e 81       	ldd	r25, Y+6	; 0x06
     e66:	00 97       	sbiw	r24, 0x00	; 0
     e68:	b1 f4       	brne	.+44     	; 0xe96 <Timer_enu_ReadTCNTxValue+0x72>
        {
            case TIMER_0:
            {
                *Copy_u16_Value = TCNT0;
     e6a:	e2 e5       	ldi	r30, 0x52	; 82
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	88 2f       	mov	r24, r24
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	eb 81       	ldd	r30, Y+3	; 0x03
     e76:	fc 81       	ldd	r31, Y+4	; 0x04
     e78:	91 83       	std	Z+1, r25	; 0x01
     e7a:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
     e7c:	19 82       	std	Y+1, r1	; 0x01
     e7e:	10 c0       	rjmp	.+32     	; 0xea0 <Timer_enu_ReadTCNTxValue+0x7c>
                break;
            }

            case TIMER_2:
            {
                *Copy_u16_Value = TCNT2;
     e80:	e4 e4       	ldi	r30, 0x44	; 68
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	88 2f       	mov	r24, r24
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	eb 81       	ldd	r30, Y+3	; 0x03
     e8c:	fc 81       	ldd	r31, Y+4	; 0x04
     e8e:	91 83       	std	Z+1, r25	; 0x01
     e90:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
     e92:	19 82       	std	Y+1, r1	; 0x01
     e94:	05 c0       	rjmp	.+10     	; 0xea0 <Timer_enu_ReadTCNTxValue+0x7c>
                break;
            }
        
            default:
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
     e96:	82 e0       	ldi	r24, 0x02	; 2
     e98:	89 83       	std	Y+1, r24	; 0x01
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <Timer_enu_ReadTCNTxValue+0x7c>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
     e9c:	83 e0       	ldi	r24, 0x03	; 3
     e9e:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
}
     ea2:	26 96       	adiw	r28, 0x06	; 6
     ea4:	0f b6       	in	r0, 0x3f	; 63
     ea6:	f8 94       	cli
     ea8:	de bf       	out	0x3e, r29	; 62
     eaa:	0f be       	out	0x3f, r0	; 63
     eac:	cd bf       	out	0x3d, r28	; 61
     eae:	cf 91       	pop	r28
     eb0:	df 91       	pop	r29
     eb2:	08 95       	ret

00000eb4 <Timer_enu_SetClock>:

extern ErrorState_t Timer_enu_SetClock (u8 Copy_u8_TimerNumber, u8 Copy_u8_ClockSelection)
{
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	00 d0       	rcall	.+0      	; 0xeba <Timer_enu_SetClock+0x6>
     eba:	0f 92       	push	r0
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
     ec0:	8a 83       	std	Y+2, r24	; 0x02
     ec2:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetClockSelection(Copy_u8_TimerNumber, Copy_u8_ClockSelection);
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	6b 81       	ldd	r22, Y+3	; 0x03
     ecc:	0e 94 88 0b 	call	0x1710	; 0x1710 <enu_SetClockSelection>
     ed0:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
}
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	cf 91       	pop	r28
     edc:	df 91       	pop	r29
     ede:	08 95       	ret

00000ee0 <Timer_enu_SetDutyCycleForPWM>:

extern ErrorState_t Timer_enu_SetDutyCycleForPWM(u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode, u8 Copy_u8_PulseType, f32 Copy_f32_DutyCyclePercentage)
{
     ee0:	0f 93       	push	r16
     ee2:	1f 93       	push	r17
     ee4:	df 93       	push	r29
     ee6:	cf 93       	push	r28
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
     eec:	2c 97       	sbiw	r28, 0x0c	; 12
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	de bf       	out	0x3e, r29	; 62
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	cd bf       	out	0x3d, r28	; 61
     ef8:	8a 83       	std	Y+2, r24	; 0x02
     efa:	6b 83       	std	Y+3, r22	; 0x03
     efc:	4c 83       	std	Y+4, r20	; 0x04
     efe:	0d 83       	std	Y+5, r16	; 0x05
     f00:	1e 83       	std	Y+6, r17	; 0x06
     f02:	2f 83       	std	Y+7, r18	; 0x07
     f04:	38 87       	std	Y+8, r19	; 0x08
    u8 Local_u8_ErrorFlag = ES_NOK;
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	89 83       	std	Y+1, r24	; 0x01

    if ((Copy_f32_DutyCyclePercentage >= TIMER_DUTYCYCLE_0) && (Copy_f32_DutyCyclePercentage <= TIMER_DUTYCYCLE_100))
     f0a:	1c 86       	std	Y+12, r1	; 0x0c
     f0c:	6d 81       	ldd	r22, Y+5	; 0x05
     f0e:	7e 81       	ldd	r23, Y+6	; 0x06
     f10:	8f 81       	ldd	r24, Y+7	; 0x07
     f12:	98 85       	ldd	r25, Y+8	; 0x08
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	40 e0       	ldi	r20, 0x00	; 0
     f1a:	50 e0       	ldi	r21, 0x00	; 0
     f1c:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
     f20:	88 23       	and	r24, r24
     f22:	14 f0       	brlt	.+4      	; 0xf28 <Timer_enu_SetDutyCycleForPWM+0x48>
     f24:	21 e0       	ldi	r18, 0x01	; 1
     f26:	2c 87       	std	Y+12, r18	; 0x0c
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	3c 85       	ldd	r19, Y+12	; 0x0c
     f2c:	83 27       	eor	r24, r19
     f2e:	88 23       	and	r24, r24
     f30:	09 f0       	breq	.+2      	; 0xf34 <Timer_enu_SetDutyCycleForPWM+0x54>
     f32:	64 c1       	rjmp	.+712    	; 0x11fc <Timer_enu_SetDutyCycleForPWM+0x31c>
     f34:	1b 86       	std	Y+11, r1	; 0x0b
     f36:	6d 81       	ldd	r22, Y+5	; 0x05
     f38:	7e 81       	ldd	r23, Y+6	; 0x06
     f3a:	8f 81       	ldd	r24, Y+7	; 0x07
     f3c:	98 85       	ldd	r25, Y+8	; 0x08
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	40 e8       	ldi	r20, 0x80	; 128
     f44:	5f e3       	ldi	r21, 0x3F	; 63
     f46:	0e 94 a9 03 	call	0x752	; 0x752 <__lesf2>
     f4a:	18 16       	cp	r1, r24
     f4c:	14 f0       	brlt	.+4      	; 0xf52 <Timer_enu_SetDutyCycleForPWM+0x72>
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	8b 87       	std	Y+11, r24	; 0x0b
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	9b 85       	ldd	r25, Y+11	; 0x0b
     f56:	89 27       	eor	r24, r25
     f58:	88 23       	and	r24, r24
     f5a:	09 f0       	breq	.+2      	; 0xf5e <Timer_enu_SetDutyCycleForPWM+0x7e>
     f5c:	4f c1       	rjmp	.+670    	; 0x11fc <Timer_enu_SetDutyCycleForPWM+0x31c>
    {
        switch (Copy_u8_TimerNumber)
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	e8 2f       	mov	r30, r24
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	fa 87       	std	Y+10, r31	; 0x0a
     f66:	e9 87       	std	Y+9, r30	; 0x09
     f68:	29 85       	ldd	r18, Y+9	; 0x09
     f6a:	3a 85       	ldd	r19, Y+10	; 0x0a
     f6c:	21 30       	cpi	r18, 0x01	; 1
     f6e:	31 05       	cpc	r19, r1
     f70:	09 f4       	brne	.+2      	; 0xf74 <Timer_enu_SetDutyCycleForPWM+0x94>
     f72:	46 c1       	rjmp	.+652    	; 0x1200 <Timer_enu_SetDutyCycleForPWM+0x320>
     f74:	89 85       	ldd	r24, Y+9	; 0x09
     f76:	9a 85       	ldd	r25, Y+10	; 0x0a
     f78:	82 30       	cpi	r24, 0x02	; 2
     f7a:	91 05       	cpc	r25, r1
     f7c:	09 f4       	brne	.+2      	; 0xf80 <Timer_enu_SetDutyCycleForPWM+0xa0>
     f7e:	a0 c0       	rjmp	.+320    	; 0x10c0 <Timer_enu_SetDutyCycleForPWM+0x1e0>
     f80:	e9 85       	ldd	r30, Y+9	; 0x09
     f82:	fa 85       	ldd	r31, Y+10	; 0x0a
     f84:	30 97       	sbiw	r30, 0x00	; 0
     f86:	09 f0       	breq	.+2      	; 0xf8a <Timer_enu_SetDutyCycleForPWM+0xaa>
     f88:	36 c1       	rjmp	.+620    	; 0x11f6 <Timer_enu_SetDutyCycleForPWM+0x316>
        {
            case TIMER_0:
            {
                if (Copy_u8_TimerMode == TIMER_PHASE_PWM)
     f8a:	8b 81       	ldd	r24, Y+3	; 0x03
     f8c:	82 30       	cpi	r24, 0x02	; 2
     f8e:	09 f0       	breq	.+2      	; 0xf92 <Timer_enu_SetDutyCycleForPWM+0xb2>
     f90:	43 c0       	rjmp	.+134    	; 0x1018 <Timer_enu_SetDutyCycleForPWM+0x138>
                {
                    if(Copy_u8_PulseType == TIMER_PHASE_PWM_NON_INVERTING)
     f92:	8c 81       	ldd	r24, Y+4	; 0x04
     f94:	86 30       	cpi	r24, 0x06	; 6
     f96:	c1 f4       	brne	.+48     	; 0xfc8 <Timer_enu_SetDutyCycleForPWM+0xe8>
                    {
                        //Using Duty Cycle Rule for non-inverting fast PWM mode
                        OCR0 = Copy_f32_DutyCyclePercentage*TIMER_TCNT0_TOP;
     f98:	0c e5       	ldi	r16, 0x5C	; 92
     f9a:	10 e0       	ldi	r17, 0x00	; 0
     f9c:	6d 81       	ldd	r22, Y+5	; 0x05
     f9e:	7e 81       	ldd	r23, Y+6	; 0x06
     fa0:	8f 81       	ldd	r24, Y+7	; 0x07
     fa2:	98 85       	ldd	r25, Y+8	; 0x08
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	4f e7       	ldi	r20, 0x7F	; 127
     faa:	53 e4       	ldi	r21, 0x43	; 67
     fac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fb0:	dc 01       	movw	r26, r24
     fb2:	cb 01       	movw	r24, r22
     fb4:	bc 01       	movw	r22, r24
     fb6:	cd 01       	movw	r24, r26
     fb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fbc:	dc 01       	movw	r26, r24
     fbe:	cb 01       	movw	r24, r22
     fc0:	f8 01       	movw	r30, r16
     fc2:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
     fc4:	19 82       	std	Y+1, r1	; 0x01
     fc6:	1c c1       	rjmp	.+568    	; 0x1200 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                    else if (Copy_u8_PulseType == TIMER_PHASE_PWM_INVERTING)
     fc8:	8c 81       	ldd	r24, Y+4	; 0x04
     fca:	87 30       	cpi	r24, 0x07	; 7
     fcc:	11 f5       	brne	.+68     	; 0x1012 <Timer_enu_SetDutyCycleForPWM+0x132>
                    {
                        //Using Duty Cycle Rule for non inverting fast PWM mode
                        OCR0 = TIMER_TCNT0_TOP* (1 - Copy_f32_DutyCyclePercentage );
     fce:	0c e5       	ldi	r16, 0x5C	; 92
     fd0:	10 e0       	ldi	r17, 0x00	; 0
     fd2:	60 e0       	ldi	r22, 0x00	; 0
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	80 e8       	ldi	r24, 0x80	; 128
     fd8:	9f e3       	ldi	r25, 0x3F	; 63
     fda:	2d 81       	ldd	r18, Y+5	; 0x05
     fdc:	3e 81       	ldd	r19, Y+6	; 0x06
     fde:	4f 81       	ldd	r20, Y+7	; 0x07
     fe0:	58 85       	ldd	r21, Y+8	; 0x08
     fe2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     fe6:	dc 01       	movw	r26, r24
     fe8:	cb 01       	movw	r24, r22
     fea:	bc 01       	movw	r22, r24
     fec:	cd 01       	movw	r24, r26
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	4f e7       	ldi	r20, 0x7F	; 127
     ff4:	53 e4       	ldi	r21, 0x43	; 67
     ff6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ffa:	dc 01       	movw	r26, r24
     ffc:	cb 01       	movw	r24, r22
     ffe:	bc 01       	movw	r22, r24
    1000:	cd 01       	movw	r24, r26
    1002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1006:	dc 01       	movw	r26, r24
    1008:	cb 01       	movw	r24, r22
    100a:	f8 01       	movw	r30, r16
    100c:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    100e:	19 82       	std	Y+1, r1	; 0x01
    1010:	f7 c0       	rjmp	.+494    	; 0x1200 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                    else
                    {
                        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1012:	82 e0       	ldi	r24, 0x02	; 2
    1014:	89 83       	std	Y+1, r24	; 0x01
    1016:	f4 c0       	rjmp	.+488    	; 0x1200 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }

                }
                else if (Copy_u8_TimerMode == TIMER_FAST_PWM)
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	83 30       	cpi	r24, 0x03	; 3
    101c:	09 f0       	breq	.+2      	; 0x1020 <Timer_enu_SetDutyCycleForPWM+0x140>
    101e:	4d c0       	rjmp	.+154    	; 0x10ba <Timer_enu_SetDutyCycleForPWM+0x1da>
                {
                    if(Copy_u8_PulseType == TIMER_FAST_PWM_NON_INVERTING)
    1020:	8c 81       	ldd	r24, Y+4	; 0x04
    1022:	84 30       	cpi	r24, 0x04	; 4
    1024:	11 f5       	brne	.+68     	; 0x106a <Timer_enu_SetDutyCycleForPWM+0x18a>
                    {
                        //Using Duty Cycle Rule for non-inverting fast PWM mode
                        OCR0 = ((Copy_f32_DutyCyclePercentage)*(TIMER_TCNT0_TOP + 1)) - 1;
    1026:	0c e5       	ldi	r16, 0x5C	; 92
    1028:	10 e0       	ldi	r17, 0x00	; 0
    102a:	6d 81       	ldd	r22, Y+5	; 0x05
    102c:	7e 81       	ldd	r23, Y+6	; 0x06
    102e:	8f 81       	ldd	r24, Y+7	; 0x07
    1030:	98 85       	ldd	r25, Y+8	; 0x08
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	40 e8       	ldi	r20, 0x80	; 128
    1038:	53 e4       	ldi	r21, 0x43	; 67
    103a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    103e:	dc 01       	movw	r26, r24
    1040:	cb 01       	movw	r24, r22
    1042:	bc 01       	movw	r22, r24
    1044:	cd 01       	movw	r24, r26
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	40 e8       	ldi	r20, 0x80	; 128
    104c:	5f e3       	ldi	r21, 0x3F	; 63
    104e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1052:	dc 01       	movw	r26, r24
    1054:	cb 01       	movw	r24, r22
    1056:	bc 01       	movw	r22, r24
    1058:	cd 01       	movw	r24, r26
    105a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	f8 01       	movw	r30, r16
    1064:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    1066:	19 82       	std	Y+1, r1	; 0x01
    1068:	cb c0       	rjmp	.+406    	; 0x1200 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                    else if (Copy_u8_PulseType == TIMER_FAST_PWM_INVERTING)
    106a:	8c 81       	ldd	r24, Y+4	; 0x04
    106c:	85 30       	cpi	r24, 0x05	; 5
    106e:	11 f5       	brne	.+68     	; 0x10b4 <Timer_enu_SetDutyCycleForPWM+0x1d4>
                    {
                        //Using Duty Cycle Rule for non inverting fast PWM mode
                        OCR0 = TIMER_TCNT0_TOP - ((Copy_f32_DutyCyclePercentage)*(TIMER_TCNT0_TOP + 1));
    1070:	0c e5       	ldi	r16, 0x5C	; 92
    1072:	10 e0       	ldi	r17, 0x00	; 0
    1074:	6d 81       	ldd	r22, Y+5	; 0x05
    1076:	7e 81       	ldd	r23, Y+6	; 0x06
    1078:	8f 81       	ldd	r24, Y+7	; 0x07
    107a:	98 85       	ldd	r25, Y+8	; 0x08
    107c:	20 e0       	ldi	r18, 0x00	; 0
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	40 e8       	ldi	r20, 0x80	; 128
    1082:	53 ec       	ldi	r21, 0xC3	; 195
    1084:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1088:	dc 01       	movw	r26, r24
    108a:	cb 01       	movw	r24, r22
    108c:	bc 01       	movw	r22, r24
    108e:	cd 01       	movw	r24, r26
    1090:	20 e0       	ldi	r18, 0x00	; 0
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	4f e7       	ldi	r20, 0x7F	; 127
    1096:	53 e4       	ldi	r21, 0x43	; 67
    1098:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    109c:	dc 01       	movw	r26, r24
    109e:	cb 01       	movw	r24, r22
    10a0:	bc 01       	movw	r22, r24
    10a2:	cd 01       	movw	r24, r26
    10a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a8:	dc 01       	movw	r26, r24
    10aa:	cb 01       	movw	r24, r22
    10ac:	f8 01       	movw	r30, r16
    10ae:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    10b0:	19 82       	std	Y+1, r1	; 0x01
    10b2:	a6 c0       	rjmp	.+332    	; 0x1200 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                    else
                    {
                        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    10b4:	82 e0       	ldi	r24, 0x02	; 2
    10b6:	89 83       	std	Y+1, r24	; 0x01
    10b8:	a3 c0       	rjmp	.+326    	; 0x1200 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    10ba:	82 e0       	ldi	r24, 0x02	; 2
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	a0 c0       	rjmp	.+320    	; 0x1200 <Timer_enu_SetDutyCycleForPWM+0x320>
                break;
            }

            case TIMER_2:
            {
                if (Copy_u8_TimerMode == TIMER_PHASE_PWM)
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	82 30       	cpi	r24, 0x02	; 2
    10c4:	09 f0       	breq	.+2      	; 0x10c8 <Timer_enu_SetDutyCycleForPWM+0x1e8>
    10c6:	43 c0       	rjmp	.+134    	; 0x114e <Timer_enu_SetDutyCycleForPWM+0x26e>
                {
                    if(Copy_u8_PulseType == TIMER_PHASE_PWM_NON_INVERTING)
    10c8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ca:	86 30       	cpi	r24, 0x06	; 6
    10cc:	c1 f4       	brne	.+48     	; 0x10fe <Timer_enu_SetDutyCycleForPWM+0x21e>
                    {
                        //Using Duty Cycle Rule for non-inverting fast PWM mode
                        OCR2 = Copy_f32_DutyCyclePercentage*TIMER_TCNT2_TOP;
    10ce:	03 e4       	ldi	r16, 0x43	; 67
    10d0:	10 e0       	ldi	r17, 0x00	; 0
    10d2:	6d 81       	ldd	r22, Y+5	; 0x05
    10d4:	7e 81       	ldd	r23, Y+6	; 0x06
    10d6:	8f 81       	ldd	r24, Y+7	; 0x07
    10d8:	98 85       	ldd	r25, Y+8	; 0x08
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	4f e7       	ldi	r20, 0x7F	; 127
    10e0:	53 e4       	ldi	r21, 0x43	; 67
    10e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	bc 01       	movw	r22, r24
    10ec:	cd 01       	movw	r24, r26
    10ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	f8 01       	movw	r30, r16
    10f8:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    10fa:	19 82       	std	Y+1, r1	; 0x01
    10fc:	81 c0       	rjmp	.+258    	; 0x1200 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                    else if (Copy_u8_PulseType == TIMER_PHASE_PWM_INVERTING)
    10fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1100:	87 30       	cpi	r24, 0x07	; 7
    1102:	11 f5       	brne	.+68     	; 0x1148 <Timer_enu_SetDutyCycleForPWM+0x268>
                    {
                        //Using Duty Cycle Rule for non inverting fast PWM mode
                        OCR2 = TIMER_TCNT2_TOP* (1 - Copy_f32_DutyCyclePercentage );
    1104:	03 e4       	ldi	r16, 0x43	; 67
    1106:	10 e0       	ldi	r17, 0x00	; 0
    1108:	60 e0       	ldi	r22, 0x00	; 0
    110a:	70 e0       	ldi	r23, 0x00	; 0
    110c:	80 e8       	ldi	r24, 0x80	; 128
    110e:	9f e3       	ldi	r25, 0x3F	; 63
    1110:	2d 81       	ldd	r18, Y+5	; 0x05
    1112:	3e 81       	ldd	r19, Y+6	; 0x06
    1114:	4f 81       	ldd	r20, Y+7	; 0x07
    1116:	58 85       	ldd	r21, Y+8	; 0x08
    1118:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    111c:	dc 01       	movw	r26, r24
    111e:	cb 01       	movw	r24, r22
    1120:	bc 01       	movw	r22, r24
    1122:	cd 01       	movw	r24, r26
    1124:	20 e0       	ldi	r18, 0x00	; 0
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	4f e7       	ldi	r20, 0x7F	; 127
    112a:	53 e4       	ldi	r21, 0x43	; 67
    112c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1130:	dc 01       	movw	r26, r24
    1132:	cb 01       	movw	r24, r22
    1134:	bc 01       	movw	r22, r24
    1136:	cd 01       	movw	r24, r26
    1138:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    113c:	dc 01       	movw	r26, r24
    113e:	cb 01       	movw	r24, r22
    1140:	f8 01       	movw	r30, r16
    1142:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    1144:	19 82       	std	Y+1, r1	; 0x01
    1146:	5c c0       	rjmp	.+184    	; 0x1200 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                    else
                    {
                        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1148:	82 e0       	ldi	r24, 0x02	; 2
    114a:	89 83       	std	Y+1, r24	; 0x01
    114c:	59 c0       	rjmp	.+178    	; 0x1200 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }

                }
                else if (Copy_u8_TimerMode == TIMER_FAST_PWM)
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    1150:	83 30       	cpi	r24, 0x03	; 3
    1152:	09 f0       	breq	.+2      	; 0x1156 <Timer_enu_SetDutyCycleForPWM+0x276>
    1154:	4d c0       	rjmp	.+154    	; 0x11f0 <Timer_enu_SetDutyCycleForPWM+0x310>
                {
                    if(Copy_u8_PulseType == TIMER_FAST_PWM_NON_INVERTING)
    1156:	8c 81       	ldd	r24, Y+4	; 0x04
    1158:	84 30       	cpi	r24, 0x04	; 4
    115a:	11 f5       	brne	.+68     	; 0x11a0 <Timer_enu_SetDutyCycleForPWM+0x2c0>
                    {
                        //Using Duty Cycle Rule for non-inverting fast PWM mode
                        OCR2 = ((Copy_f32_DutyCyclePercentage)*(TIMER_TCNT2_TOP + 1)) - 1;
    115c:	03 e4       	ldi	r16, 0x43	; 67
    115e:	10 e0       	ldi	r17, 0x00	; 0
    1160:	6d 81       	ldd	r22, Y+5	; 0x05
    1162:	7e 81       	ldd	r23, Y+6	; 0x06
    1164:	8f 81       	ldd	r24, Y+7	; 0x07
    1166:	98 85       	ldd	r25, Y+8	; 0x08
    1168:	20 e0       	ldi	r18, 0x00	; 0
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	40 e8       	ldi	r20, 0x80	; 128
    116e:	53 e4       	ldi	r21, 0x43	; 67
    1170:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1174:	dc 01       	movw	r26, r24
    1176:	cb 01       	movw	r24, r22
    1178:	bc 01       	movw	r22, r24
    117a:	cd 01       	movw	r24, r26
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	40 e8       	ldi	r20, 0x80	; 128
    1182:	5f e3       	ldi	r21, 0x3F	; 63
    1184:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1188:	dc 01       	movw	r26, r24
    118a:	cb 01       	movw	r24, r22
    118c:	bc 01       	movw	r22, r24
    118e:	cd 01       	movw	r24, r26
    1190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1194:	dc 01       	movw	r26, r24
    1196:	cb 01       	movw	r24, r22
    1198:	f8 01       	movw	r30, r16
    119a:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    119c:	19 82       	std	Y+1, r1	; 0x01
    119e:	30 c0       	rjmp	.+96     	; 0x1200 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                    else if (Copy_u8_PulseType == TIMER_FAST_PWM_INVERTING)
    11a0:	8c 81       	ldd	r24, Y+4	; 0x04
    11a2:	85 30       	cpi	r24, 0x05	; 5
    11a4:	11 f5       	brne	.+68     	; 0x11ea <Timer_enu_SetDutyCycleForPWM+0x30a>
                    {
                        //Using Duty Cycle Rule for non inverting fast PWM mode
                        OCR2 = TIMER_TCNT2_TOP - ((Copy_f32_DutyCyclePercentage)*(TIMER_TCNT2_TOP + 1));
    11a6:	03 e4       	ldi	r16, 0x43	; 67
    11a8:	10 e0       	ldi	r17, 0x00	; 0
    11aa:	6d 81       	ldd	r22, Y+5	; 0x05
    11ac:	7e 81       	ldd	r23, Y+6	; 0x06
    11ae:	8f 81       	ldd	r24, Y+7	; 0x07
    11b0:	98 85       	ldd	r25, Y+8	; 0x08
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	40 e8       	ldi	r20, 0x80	; 128
    11b8:	53 ec       	ldi	r21, 0xC3	; 195
    11ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11be:	dc 01       	movw	r26, r24
    11c0:	cb 01       	movw	r24, r22
    11c2:	bc 01       	movw	r22, r24
    11c4:	cd 01       	movw	r24, r26
    11c6:	20 e0       	ldi	r18, 0x00	; 0
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	4f e7       	ldi	r20, 0x7F	; 127
    11cc:	53 e4       	ldi	r21, 0x43	; 67
    11ce:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    11d2:	dc 01       	movw	r26, r24
    11d4:	cb 01       	movw	r24, r22
    11d6:	bc 01       	movw	r22, r24
    11d8:	cd 01       	movw	r24, r26
    11da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11de:	dc 01       	movw	r26, r24
    11e0:	cb 01       	movw	r24, r22
    11e2:	f8 01       	movw	r30, r16
    11e4:	80 83       	st	Z, r24

                        Local_u8_ErrorFlag = ES_OK;
    11e6:	19 82       	std	Y+1, r1	; 0x01
    11e8:	0b c0       	rjmp	.+22     	; 0x1200 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }
                    else
                    {
                        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    11ea:	82 e0       	ldi	r24, 0x02	; 2
    11ec:	89 83       	std	Y+1, r24	; 0x01
    11ee:	08 c0       	rjmp	.+16     	; 0x1200 <Timer_enu_SetDutyCycleForPWM+0x320>
                    }

                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    11f0:	82 e0       	ldi	r24, 0x02	; 2
    11f2:	89 83       	std	Y+1, r24	; 0x01
    11f4:	05 c0       	rjmp	.+10     	; 0x1200 <Timer_enu_SetDutyCycleForPWM+0x320>
                break;
            }
        
            default:
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    11f6:	82 e0       	ldi	r24, 0x02	; 2
    11f8:	89 83       	std	Y+1, r24	; 0x01
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <Timer_enu_SetDutyCycleForPWM+0x320>
            }
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    11fc:	82 e0       	ldi	r24, 0x02	; 2
    11fe:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    1200:	89 81       	ldd	r24, Y+1	; 0x01
}
    1202:	2c 96       	adiw	r28, 0x0c	; 12
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	f8 94       	cli
    1208:	de bf       	out	0x3e, r29	; 62
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	cd bf       	out	0x3d, r28	; 61
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	1f 91       	pop	r17
    1214:	0f 91       	pop	r16
    1216:	08 95       	ret

00001218 <Timer_enu_ForceCompareMatch>:

extern ErrorState_t Timer_enu_ForceCompareMatch (u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode)
{
    1218:	df 93       	push	r29
    121a:	cf 93       	push	r28
    121c:	00 d0       	rcall	.+0      	; 0x121e <Timer_enu_ForceCompareMatch+0x6>
    121e:	00 d0       	rcall	.+0      	; 0x1220 <Timer_enu_ForceCompareMatch+0x8>
    1220:	0f 92       	push	r0
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	8a 83       	std	Y+2, r24	; 0x02
    1228:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_TimerMode == TIMER_NORMAL) || (TIMER_CTC))
    {
        switch (Copy_u8_TimerNumber)
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	3d 83       	std	Y+5, r19	; 0x05
    1236:	2c 83       	std	Y+4, r18	; 0x04
    1238:	8c 81       	ldd	r24, Y+4	; 0x04
    123a:	9d 81       	ldd	r25, Y+5	; 0x05
    123c:	81 30       	cpi	r24, 0x01	; 1
    123e:	91 05       	cpc	r25, r1
    1240:	e9 f0       	breq	.+58     	; 0x127c <Timer_enu_ForceCompareMatch+0x64>
    1242:	2c 81       	ldd	r18, Y+4	; 0x04
    1244:	3d 81       	ldd	r19, Y+5	; 0x05
    1246:	22 30       	cpi	r18, 0x02	; 2
    1248:	31 05       	cpc	r19, r1
    124a:	69 f0       	breq	.+26     	; 0x1266 <Timer_enu_ForceCompareMatch+0x4e>
    124c:	8c 81       	ldd	r24, Y+4	; 0x04
    124e:	9d 81       	ldd	r25, Y+5	; 0x05
    1250:	00 97       	sbiw	r24, 0x00	; 0
    1252:	91 f4       	brne	.+36     	; 0x1278 <Timer_enu_ForceCompareMatch+0x60>
        {
            case TIMER_0:
            {
                //Bit contains 1
                TCCR0 |= (1 << TCCR0_FOC0);
    1254:	a3 e5       	ldi	r26, 0x53	; 83
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	e3 e5       	ldi	r30, 0x53	; 83
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	80 68       	ori	r24, 0x80	; 128
    1260:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1262:	19 82       	std	Y+1, r1	; 0x01
    1264:	0b c0       	rjmp	.+22     	; 0x127c <Timer_enu_ForceCompareMatch+0x64>
                break;
            }
            case TIMER_2:
            {
                //Bit contains 1
                TCCR2 |= (1 << TCCR2_FOC2);
    1266:	a5 e4       	ldi	r26, 0x45	; 69
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e5 e4       	ldi	r30, 0x45	; 69
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	80 68       	ori	r24, 0x80	; 128
    1272:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1274:	19 82       	std	Y+1, r1	; 0x01
    1276:	02 c0       	rjmp	.+4      	; 0x127c <Timer_enu_ForceCompareMatch+0x64>
                break;
            }
        
            default:
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1278:	82 e0       	ldi	r24, 0x02	; 2
    127a:	89 83       	std	Y+1, r24	; 0x01
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    }
    return Local_u8_ErrorFlag;
    127c:	89 81       	ldd	r24, Y+1	; 0x01
}
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	cf 91       	pop	r28
    128a:	df 91       	pop	r29
    128c:	08 95       	ret

0000128e <Timer_enu_SetTimerMode>:

extern ErrorState_t Timer_enu_SetTimerMode (u8 Copy_u8_TimerNumber, u8 Copy_TimerMode)
{
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	00 d0       	rcall	.+0      	; 0x1294 <Timer_enu_SetTimerMode+0x6>
    1294:	0f 92       	push	r0
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
    129a:	8a 83       	std	Y+2, r24	; 0x02
    129c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetTimerMode(Copy_u8_TimerNumber, Copy_TimerMode);
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	6b 81       	ldd	r22, Y+3	; 0x03
    12a6:	0e 94 be 0a 	call	0x157c	; 0x157c <enu_SetTimerMode>
    12aa:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
    12ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ae:	0f 90       	pop	r0
    12b0:	0f 90       	pop	r0
    12b2:	0f 90       	pop	r0
    12b4:	cf 91       	pop	r28
    12b6:	df 91       	pop	r29
    12b8:	08 95       	ret

000012ba <Timer_enu_SetCallBack>:

extern ErrorState_t Timer_enu_SetCallBack (u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode, void (*Copy_pfun_AppFunction)(void*), void* Copy_pvid_Parameters)
{
    12ba:	df 93       	push	r29
    12bc:	cf 93       	push	r28
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
    12c2:	29 97       	sbiw	r28, 0x09	; 9
    12c4:	0f b6       	in	r0, 0x3f	; 63
    12c6:	f8 94       	cli
    12c8:	de bf       	out	0x3e, r29	; 62
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	cd bf       	out	0x3d, r28	; 61
    12ce:	8a 83       	std	Y+2, r24	; 0x02
    12d0:	6b 83       	std	Y+3, r22	; 0x03
    12d2:	5d 83       	std	Y+5, r21	; 0x05
    12d4:	4c 83       	std	Y+4, r20	; 0x04
    12d6:	3f 83       	std	Y+7, r19	; 0x07
    12d8:	2e 83       	std	Y+6, r18	; 0x06
    u8 Local_u8_ErrorFlag = ES_NOK;
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	89 83       	std	Y+1, r24	; 0x01
    
    if(Copy_pfun_AppFunction)
    12de:	8c 81       	ldd	r24, Y+4	; 0x04
    12e0:	9d 81       	ldd	r25, Y+5	; 0x05
    12e2:	00 97       	sbiw	r24, 0x00	; 0
    12e4:	09 f4       	brne	.+2      	; 0x12e8 <Timer_enu_SetCallBack+0x2e>
    12e6:	62 c0       	rjmp	.+196    	; 0x13ac <Timer_enu_SetCallBack+0xf2>
    {
        switch (Copy_u8_TimerNumber)
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	39 87       	std	Y+9, r19	; 0x09
    12f0:	28 87       	std	Y+8, r18	; 0x08
    12f2:	88 85       	ldd	r24, Y+8	; 0x08
    12f4:	99 85       	ldd	r25, Y+9	; 0x09
    12f6:	81 30       	cpi	r24, 0x01	; 1
    12f8:	91 05       	cpc	r25, r1
    12fa:	09 f4       	brne	.+2      	; 0x12fe <Timer_enu_SetCallBack+0x44>
    12fc:	59 c0       	rjmp	.+178    	; 0x13b0 <Timer_enu_SetCallBack+0xf6>
    12fe:	28 85       	ldd	r18, Y+8	; 0x08
    1300:	39 85       	ldd	r19, Y+9	; 0x09
    1302:	22 30       	cpi	r18, 0x02	; 2
    1304:	31 05       	cpc	r19, r1
    1306:	51 f1       	breq	.+84     	; 0x135c <Timer_enu_SetCallBack+0xa2>
    1308:	88 85       	ldd	r24, Y+8	; 0x08
    130a:	99 85       	ldd	r25, Y+9	; 0x09
    130c:	00 97       	sbiw	r24, 0x00	; 0
    130e:	09 f0       	breq	.+2      	; 0x1312 <Timer_enu_SetCallBack+0x58>
    1310:	4a c0       	rjmp	.+148    	; 0x13a6 <Timer_enu_SetCallBack+0xec>
        {
            case TIMER_0:
            {
                if(Copy_u8_TimerMode == TIMER_NORMAL)
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	88 23       	and	r24, r24
    1316:	71 f4       	brne	.+28     	; 0x1334 <Timer_enu_SetCallBack+0x7a>
                {
                    apfun_ISRpointers[TIMER_0_OVERFLOW_ISR] = Copy_pfun_AppFunction;
    1318:	8c 81       	ldd	r24, Y+4	; 0x04
    131a:	9d 81       	ldd	r25, Y+5	; 0x05
    131c:	90 93 89 00 	sts	0x0089, r25
    1320:	80 93 88 00 	sts	0x0088, r24

                    apvid_ISRParameters[TIMER_0_OVERFLOW_ISR] = Copy_pvid_Parameters;
    1324:	8e 81       	ldd	r24, Y+6	; 0x06
    1326:	9f 81       	ldd	r25, Y+7	; 0x07
    1328:	90 93 99 00 	sts	0x0099, r25
    132c:	80 93 98 00 	sts	0x0098, r24

                    Local_u8_ErrorFlag = ES_OK;
    1330:	19 82       	std	Y+1, r1	; 0x01
    1332:	3e c0       	rjmp	.+124    	; 0x13b0 <Timer_enu_SetCallBack+0xf6>
                }
                else if(Copy_u8_TimerMode == TIMER_CTC)
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	71 f4       	brne	.+28     	; 0x1356 <Timer_enu_SetCallBack+0x9c>
                {
                    apfun_ISRpointers[TIMER_0_CTC_ISR] = Copy_pfun_AppFunction;
    133a:	8c 81       	ldd	r24, Y+4	; 0x04
    133c:	9d 81       	ldd	r25, Y+5	; 0x05
    133e:	90 93 87 00 	sts	0x0087, r25
    1342:	80 93 86 00 	sts	0x0086, r24

                    apvid_ISRParameters[TIMER_0_CTC_ISR] = Copy_pvid_Parameters;
    1346:	8e 81       	ldd	r24, Y+6	; 0x06
    1348:	9f 81       	ldd	r25, Y+7	; 0x07
    134a:	90 93 97 00 	sts	0x0097, r25
    134e:	80 93 96 00 	sts	0x0096, r24

                    Local_u8_ErrorFlag = ES_OK;
    1352:	19 82       	std	Y+1, r1	; 0x01
    1354:	2d c0       	rjmp	.+90     	; 0x13b0 <Timer_enu_SetCallBack+0xf6>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1356:	82 e0       	ldi	r24, 0x02	; 2
    1358:	89 83       	std	Y+1, r24	; 0x01
    135a:	2a c0       	rjmp	.+84     	; 0x13b0 <Timer_enu_SetCallBack+0xf6>
                break;
            }

            case TIMER_2:
            {
                if(Copy_u8_TimerMode == TIMER_NORMAL)
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	88 23       	and	r24, r24
    1360:	71 f4       	brne	.+28     	; 0x137e <Timer_enu_SetCallBack+0xc4>
                {
                    apfun_ISRpointers[TIMER_2_OVERFLOW_ISR] = Copy_pfun_AppFunction;
    1362:	8c 81       	ldd	r24, Y+4	; 0x04
    1364:	9d 81       	ldd	r25, Y+5	; 0x05
    1366:	90 93 7d 00 	sts	0x007D, r25
    136a:	80 93 7c 00 	sts	0x007C, r24

                    apvid_ISRParameters[TIMER_2_OVERFLOW_ISR] = Copy_pvid_Parameters;
    136e:	8e 81       	ldd	r24, Y+6	; 0x06
    1370:	9f 81       	ldd	r25, Y+7	; 0x07
    1372:	90 93 8d 00 	sts	0x008D, r25
    1376:	80 93 8c 00 	sts	0x008C, r24

                    Local_u8_ErrorFlag = ES_OK;
    137a:	19 82       	std	Y+1, r1	; 0x01
    137c:	19 c0       	rjmp	.+50     	; 0x13b0 <Timer_enu_SetCallBack+0xf6>
                }
                else if(Copy_u8_TimerMode == TIMER_CTC)
    137e:	8b 81       	ldd	r24, Y+3	; 0x03
    1380:	81 30       	cpi	r24, 0x01	; 1
    1382:	71 f4       	brne	.+28     	; 0x13a0 <Timer_enu_SetCallBack+0xe6>
                {
                    apfun_ISRpointers[TIMER_2_CTC_ISR] = Copy_pfun_AppFunction;
    1384:	8c 81       	ldd	r24, Y+4	; 0x04
    1386:	9d 81       	ldd	r25, Y+5	; 0x05
    1388:	90 93 7b 00 	sts	0x007B, r25
    138c:	80 93 7a 00 	sts	0x007A, r24

                    apvid_ISRParameters[TIMER_2_CTC_ISR] = Copy_pvid_Parameters;
    1390:	8e 81       	ldd	r24, Y+6	; 0x06
    1392:	9f 81       	ldd	r25, Y+7	; 0x07
    1394:	90 93 8b 00 	sts	0x008B, r25
    1398:	80 93 8a 00 	sts	0x008A, r24

                    Local_u8_ErrorFlag = ES_OK;
    139c:	19 82       	std	Y+1, r1	; 0x01
    139e:	08 c0       	rjmp	.+16     	; 0x13b0 <Timer_enu_SetCallBack+0xf6>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    13a0:	82 e0       	ldi	r24, 0x02	; 2
    13a2:	89 83       	std	Y+1, r24	; 0x01
    13a4:	05 c0       	rjmp	.+10     	; 0x13b0 <Timer_enu_SetCallBack+0xf6>

                break;
            }
            
            default:
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    13a6:	82 e0       	ldi	r24, 0x02	; 2
    13a8:	89 83       	std	Y+1, r24	; 0x01
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <Timer_enu_SetCallBack+0xf6>
            break;
        }
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    13ac:	83 e0       	ldi	r24, 0x03	; 3
    13ae:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    13b2:	29 96       	adiw	r28, 0x09	; 9
    13b4:	0f b6       	in	r0, 0x3f	; 63
    13b6:	f8 94       	cli
    13b8:	de bf       	out	0x3e, r29	; 62
    13ba:	0f be       	out	0x3f, r0	; 63
    13bc:	cd bf       	out	0x3d, r28	; 61
    13be:	cf 91       	pop	r28
    13c0:	df 91       	pop	r29
    13c2:	08 95       	ret

000013c4 <__vector_4>:
void __vector_5 (void)__attribute__((signal));
void __vector_10 (void)__attribute__((signal));
void __vector_11 (void)__attribute__((signal));

void __vector_4 (void)
{
    13c4:	1f 92       	push	r1
    13c6:	0f 92       	push	r0
    13c8:	0f b6       	in	r0, 0x3f	; 63
    13ca:	0f 92       	push	r0
    13cc:	11 24       	eor	r1, r1
    13ce:	2f 93       	push	r18
    13d0:	3f 93       	push	r19
    13d2:	4f 93       	push	r20
    13d4:	5f 93       	push	r21
    13d6:	6f 93       	push	r22
    13d8:	7f 93       	push	r23
    13da:	8f 93       	push	r24
    13dc:	9f 93       	push	r25
    13de:	af 93       	push	r26
    13e0:	bf 93       	push	r27
    13e2:	ef 93       	push	r30
    13e4:	ff 93       	push	r31
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
    if(apfun_ISRpointers[TIMER_2_CTC_ISR])
    13ee:	80 91 7a 00 	lds	r24, 0x007A
    13f2:	90 91 7b 00 	lds	r25, 0x007B
    13f6:	00 97       	sbiw	r24, 0x00	; 0
    13f8:	49 f0       	breq	.+18     	; 0x140c <__vector_4+0x48>
    {
       apfun_ISRpointers[TIMER_2_CTC_ISR](apvid_ISRParameters[TIMER_2_CTC_ISR]);
    13fa:	e0 91 7a 00 	lds	r30, 0x007A
    13fe:	f0 91 7b 00 	lds	r31, 0x007B
    1402:	80 91 8a 00 	lds	r24, 0x008A
    1406:	90 91 8b 00 	lds	r25, 0x008B
    140a:	09 95       	icall
    }
}
    140c:	cf 91       	pop	r28
    140e:	df 91       	pop	r29
    1410:	ff 91       	pop	r31
    1412:	ef 91       	pop	r30
    1414:	bf 91       	pop	r27
    1416:	af 91       	pop	r26
    1418:	9f 91       	pop	r25
    141a:	8f 91       	pop	r24
    141c:	7f 91       	pop	r23
    141e:	6f 91       	pop	r22
    1420:	5f 91       	pop	r21
    1422:	4f 91       	pop	r20
    1424:	3f 91       	pop	r19
    1426:	2f 91       	pop	r18
    1428:	0f 90       	pop	r0
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	0f 90       	pop	r0
    142e:	1f 90       	pop	r1
    1430:	18 95       	reti

00001432 <__vector_5>:

void __vector_5 (void)
{
    1432:	1f 92       	push	r1
    1434:	0f 92       	push	r0
    1436:	0f b6       	in	r0, 0x3f	; 63
    1438:	0f 92       	push	r0
    143a:	11 24       	eor	r1, r1
    143c:	2f 93       	push	r18
    143e:	3f 93       	push	r19
    1440:	4f 93       	push	r20
    1442:	5f 93       	push	r21
    1444:	6f 93       	push	r22
    1446:	7f 93       	push	r23
    1448:	8f 93       	push	r24
    144a:	9f 93       	push	r25
    144c:	af 93       	push	r26
    144e:	bf 93       	push	r27
    1450:	ef 93       	push	r30
    1452:	ff 93       	push	r31
    1454:	df 93       	push	r29
    1456:	cf 93       	push	r28
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
    if(apfun_ISRpointers[TIMER_2_CTC_ISR])
    145c:	80 91 7a 00 	lds	r24, 0x007A
    1460:	90 91 7b 00 	lds	r25, 0x007B
    1464:	00 97       	sbiw	r24, 0x00	; 0
    1466:	49 f0       	breq	.+18     	; 0x147a <__vector_5+0x48>
    {
       apfun_ISRpointers[TIMER_2_CTC_ISR](apvid_ISRParameters[TIMER_2_CTC_ISR]);
    1468:	e0 91 7a 00 	lds	r30, 0x007A
    146c:	f0 91 7b 00 	lds	r31, 0x007B
    1470:	80 91 8a 00 	lds	r24, 0x008A
    1474:	90 91 8b 00 	lds	r25, 0x008B
    1478:	09 95       	icall
    }
}
    147a:	cf 91       	pop	r28
    147c:	df 91       	pop	r29
    147e:	ff 91       	pop	r31
    1480:	ef 91       	pop	r30
    1482:	bf 91       	pop	r27
    1484:	af 91       	pop	r26
    1486:	9f 91       	pop	r25
    1488:	8f 91       	pop	r24
    148a:	7f 91       	pop	r23
    148c:	6f 91       	pop	r22
    148e:	5f 91       	pop	r21
    1490:	4f 91       	pop	r20
    1492:	3f 91       	pop	r19
    1494:	2f 91       	pop	r18
    1496:	0f 90       	pop	r0
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	0f 90       	pop	r0
    149c:	1f 90       	pop	r1
    149e:	18 95       	reti

000014a0 <__vector_10>:

void __vector_10 (void)
{
    14a0:	1f 92       	push	r1
    14a2:	0f 92       	push	r0
    14a4:	0f b6       	in	r0, 0x3f	; 63
    14a6:	0f 92       	push	r0
    14a8:	11 24       	eor	r1, r1
    14aa:	2f 93       	push	r18
    14ac:	3f 93       	push	r19
    14ae:	4f 93       	push	r20
    14b0:	5f 93       	push	r21
    14b2:	6f 93       	push	r22
    14b4:	7f 93       	push	r23
    14b6:	8f 93       	push	r24
    14b8:	9f 93       	push	r25
    14ba:	af 93       	push	r26
    14bc:	bf 93       	push	r27
    14be:	ef 93       	push	r30
    14c0:	ff 93       	push	r31
    14c2:	df 93       	push	r29
    14c4:	cf 93       	push	r28
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
    if(apfun_ISRpointers[TIMER_0_CTC_ISR])
    14ca:	80 91 86 00 	lds	r24, 0x0086
    14ce:	90 91 87 00 	lds	r25, 0x0087
    14d2:	00 97       	sbiw	r24, 0x00	; 0
    14d4:	49 f0       	breq	.+18     	; 0x14e8 <__vector_10+0x48>
    {
       apfun_ISRpointers[TIMER_0_CTC_ISR](apvid_ISRParameters[TIMER_0_CTC_ISR]);
    14d6:	e0 91 86 00 	lds	r30, 0x0086
    14da:	f0 91 87 00 	lds	r31, 0x0087
    14de:	80 91 96 00 	lds	r24, 0x0096
    14e2:	90 91 97 00 	lds	r25, 0x0097
    14e6:	09 95       	icall
    }
}
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	ff 91       	pop	r31
    14ee:	ef 91       	pop	r30
    14f0:	bf 91       	pop	r27
    14f2:	af 91       	pop	r26
    14f4:	9f 91       	pop	r25
    14f6:	8f 91       	pop	r24
    14f8:	7f 91       	pop	r23
    14fa:	6f 91       	pop	r22
    14fc:	5f 91       	pop	r21
    14fe:	4f 91       	pop	r20
    1500:	3f 91       	pop	r19
    1502:	2f 91       	pop	r18
    1504:	0f 90       	pop	r0
    1506:	0f be       	out	0x3f, r0	; 63
    1508:	0f 90       	pop	r0
    150a:	1f 90       	pop	r1
    150c:	18 95       	reti

0000150e <__vector_11>:

void __vector_11 (void)
{
    150e:	1f 92       	push	r1
    1510:	0f 92       	push	r0
    1512:	0f b6       	in	r0, 0x3f	; 63
    1514:	0f 92       	push	r0
    1516:	11 24       	eor	r1, r1
    1518:	2f 93       	push	r18
    151a:	3f 93       	push	r19
    151c:	4f 93       	push	r20
    151e:	5f 93       	push	r21
    1520:	6f 93       	push	r22
    1522:	7f 93       	push	r23
    1524:	8f 93       	push	r24
    1526:	9f 93       	push	r25
    1528:	af 93       	push	r26
    152a:	bf 93       	push	r27
    152c:	ef 93       	push	r30
    152e:	ff 93       	push	r31
    1530:	df 93       	push	r29
    1532:	cf 93       	push	r28
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
    if(apfun_ISRpointers[TIMER_0_OVERFLOW_ISR])
    1538:	80 91 88 00 	lds	r24, 0x0088
    153c:	90 91 89 00 	lds	r25, 0x0089
    1540:	00 97       	sbiw	r24, 0x00	; 0
    1542:	49 f0       	breq	.+18     	; 0x1556 <__vector_11+0x48>
    {
        apfun_ISRpointers[TIMER_0_OVERFLOW_ISR](apvid_ISRParameters[TIMER_0_OVERFLOW_ISR]);
    1544:	e0 91 88 00 	lds	r30, 0x0088
    1548:	f0 91 89 00 	lds	r31, 0x0089
    154c:	80 91 98 00 	lds	r24, 0x0098
    1550:	90 91 99 00 	lds	r25, 0x0099
    1554:	09 95       	icall
    }
}
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	ff 91       	pop	r31
    155c:	ef 91       	pop	r30
    155e:	bf 91       	pop	r27
    1560:	af 91       	pop	r26
    1562:	9f 91       	pop	r25
    1564:	8f 91       	pop	r24
    1566:	7f 91       	pop	r23
    1568:	6f 91       	pop	r22
    156a:	5f 91       	pop	r21
    156c:	4f 91       	pop	r20
    156e:	3f 91       	pop	r19
    1570:	2f 91       	pop	r18
    1572:	0f 90       	pop	r0
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	0f 90       	pop	r0
    1578:	1f 90       	pop	r1
    157a:	18 95       	reti

0000157c <enu_SetTimerMode>:



//Local functions' implementation
static ErrorState_t enu_SetTimerMode (u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode)
{
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	00 d0       	rcall	.+0      	; 0x1582 <enu_SetTimerMode+0x6>
    1582:	00 d0       	rcall	.+0      	; 0x1584 <enu_SetTimerMode+0x8>
    1584:	0f 92       	push	r0
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
    158a:	8a 83       	std	Y+2, r24	; 0x02
    158c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	89 83       	std	Y+1, r24	; 0x01

    switch(Copy_u8_TimerNumber)
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	3d 83       	std	Y+5, r19	; 0x05
    159a:	2c 83       	std	Y+4, r18	; 0x04
    159c:	8c 81       	ldd	r24, Y+4	; 0x04
    159e:	9d 81       	ldd	r25, Y+5	; 0x05
    15a0:	81 30       	cpi	r24, 0x01	; 1
    15a2:	91 05       	cpc	r25, r1
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <enu_SetTimerMode+0x2c>
    15a6:	ab c0       	rjmp	.+342    	; 0x16fe <enu_SetTimerMode+0x182>
    15a8:	2c 81       	ldd	r18, Y+4	; 0x04
    15aa:	3d 81       	ldd	r19, Y+5	; 0x05
    15ac:	22 30       	cpi	r18, 0x02	; 2
    15ae:	31 05       	cpc	r19, r1
    15b0:	09 f4       	brne	.+2      	; 0x15b4 <enu_SetTimerMode+0x38>
    15b2:	54 c0       	rjmp	.+168    	; 0x165c <enu_SetTimerMode+0xe0>
    15b4:	8c 81       	ldd	r24, Y+4	; 0x04
    15b6:	9d 81       	ldd	r25, Y+5	; 0x05
    15b8:	00 97       	sbiw	r24, 0x00	; 0
    15ba:	09 f0       	breq	.+2      	; 0x15be <enu_SetTimerMode+0x42>
    15bc:	9e c0       	rjmp	.+316    	; 0x16fa <enu_SetTimerMode+0x17e>
    {
        case TIMER_0:
        {

            if(Copy_u8_TimerMode == TIMER_NORMAL)
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	88 23       	and	r24, r24
    15c2:	81 f4       	brne	.+32     	; 0x15e4 <enu_SetTimerMode+0x68>
            {
                //Bits contain 00
                TCCR0 &= ~(1 << TCCR0_WGM00);
    15c4:	a3 e5       	ldi	r26, 0x53	; 83
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e3 e5       	ldi	r30, 0x53	; 83
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	8f 7b       	andi	r24, 0xBF	; 191
    15d0:	8c 93       	st	X, r24
                TCCR0 &= ~(1 << TCCR0_WGM01);
    15d2:	a3 e5       	ldi	r26, 0x53	; 83
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e3 e5       	ldi	r30, 0x53	; 83
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	87 7f       	andi	r24, 0xF7	; 247
    15de:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    15e0:	19 82       	std	Y+1, r1	; 0x01
    15e2:	8d c0       	rjmp	.+282    	; 0x16fe <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_PHASE_PWM)
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	82 30       	cpi	r24, 0x02	; 2
    15e8:	81 f4       	brne	.+32     	; 0x160a <enu_SetTimerMode+0x8e>
            {
                //Bits contain 01
                TCCR0 |= (1 << TCCR0_WGM00);
    15ea:	a3 e5       	ldi	r26, 0x53	; 83
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	e3 e5       	ldi	r30, 0x53	; 83
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	80 64       	ori	r24, 0x40	; 64
    15f6:	8c 93       	st	X, r24
                TCCR0 &= ~(1 << TCCR0_WGM01);
    15f8:	a3 e5       	ldi	r26, 0x53	; 83
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e3 e5       	ldi	r30, 0x53	; 83
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	87 7f       	andi	r24, 0xF7	; 247
    1604:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    1606:	19 82       	std	Y+1, r1	; 0x01
    1608:	7a c0       	rjmp	.+244    	; 0x16fe <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_CTC)
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	81 30       	cpi	r24, 0x01	; 1
    160e:	81 f4       	brne	.+32     	; 0x1630 <enu_SetTimerMode+0xb4>
            {
                //Bits contain 10
                TCCR0 &= ~(1 << TCCR0_WGM00);
    1610:	a3 e5       	ldi	r26, 0x53	; 83
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	e3 e5       	ldi	r30, 0x53	; 83
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	8f 7b       	andi	r24, 0xBF	; 191
    161c:	8c 93       	st	X, r24
                TCCR0 |= (1 << TCCR0_WGM01);
    161e:	a3 e5       	ldi	r26, 0x53	; 83
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	e3 e5       	ldi	r30, 0x53	; 83
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	88 60       	ori	r24, 0x08	; 8
    162a:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    162c:	19 82       	std	Y+1, r1	; 0x01
    162e:	67 c0       	rjmp	.+206    	; 0x16fe <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_FAST_PWM)
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	83 30       	cpi	r24, 0x03	; 3
    1634:	81 f4       	brne	.+32     	; 0x1656 <enu_SetTimerMode+0xda>
            {
                //Bits contain 11
                TCCR0 |= (1 << TCCR0_WGM00);
    1636:	a3 e5       	ldi	r26, 0x53	; 83
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	e3 e5       	ldi	r30, 0x53	; 83
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	80 64       	ori	r24, 0x40	; 64
    1642:	8c 93       	st	X, r24
                TCCR0 |= (1 << TCCR0_WGM01);
    1644:	a3 e5       	ldi	r26, 0x53	; 83
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	e3 e5       	ldi	r30, 0x53	; 83
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	88 60       	ori	r24, 0x08	; 8
    1650:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1652:	19 82       	std	Y+1, r1	; 0x01
    1654:	54 c0       	rjmp	.+168    	; 0x16fe <enu_SetTimerMode+0x182>
            }
            else 
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1656:	82 e0       	ldi	r24, 0x02	; 2
    1658:	89 83       	std	Y+1, r24	; 0x01
    165a:	51 c0       	rjmp	.+162    	; 0x16fe <enu_SetTimerMode+0x182>
        break;
     
        case TIMER_2:
        {
            
            if(Copy_u8_TimerMode == TIMER_NORMAL)
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	88 23       	and	r24, r24
    1660:	81 f4       	brne	.+32     	; 0x1682 <enu_SetTimerMode+0x106>
            {
                //Bits contain 00
                TCCR2 &= ~(1 << TCCR2_WGM20);
    1662:	a5 e4       	ldi	r26, 0x45	; 69
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	e5 e4       	ldi	r30, 0x45	; 69
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	8f 7b       	andi	r24, 0xBF	; 191
    166e:	8c 93       	st	X, r24
                TCCR2 &= ~(1 << TCCR2_WGM21);
    1670:	a5 e4       	ldi	r26, 0x45	; 69
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	e5 e4       	ldi	r30, 0x45	; 69
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	87 7f       	andi	r24, 0xF7	; 247
    167c:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    167e:	19 82       	std	Y+1, r1	; 0x01
    1680:	3e c0       	rjmp	.+124    	; 0x16fe <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_PHASE_PWM)
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	82 30       	cpi	r24, 0x02	; 2
    1686:	81 f4       	brne	.+32     	; 0x16a8 <enu_SetTimerMode+0x12c>
            {
                //Bits contain 01
                TCCR2 |= (1 << TCCR2_WGM20);
    1688:	a5 e4       	ldi	r26, 0x45	; 69
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	e5 e4       	ldi	r30, 0x45	; 69
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	80 64       	ori	r24, 0x40	; 64
    1694:	8c 93       	st	X, r24
                TCCR2 &= ~(1 << TCCR2_WGM21);
    1696:	a5 e4       	ldi	r26, 0x45	; 69
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	e5 e4       	ldi	r30, 0x45	; 69
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	87 7f       	andi	r24, 0xF7	; 247
    16a2:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    16a4:	19 82       	std	Y+1, r1	; 0x01
    16a6:	2b c0       	rjmp	.+86     	; 0x16fe <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_CTC)
    16a8:	8b 81       	ldd	r24, Y+3	; 0x03
    16aa:	81 30       	cpi	r24, 0x01	; 1
    16ac:	81 f4       	brne	.+32     	; 0x16ce <enu_SetTimerMode+0x152>
            {
                //Bits contain 10
                TCCR2 &= ~(1 << TCCR2_WGM20);
    16ae:	a5 e4       	ldi	r26, 0x45	; 69
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	e5 e4       	ldi	r30, 0x45	; 69
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	8f 7b       	andi	r24, 0xBF	; 191
    16ba:	8c 93       	st	X, r24
                TCCR2 |= (1 << TCCR2_WGM21);
    16bc:	a5 e4       	ldi	r26, 0x45	; 69
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e5 e4       	ldi	r30, 0x45	; 69
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	88 60       	ori	r24, 0x08	; 8
    16c8:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    16ca:	19 82       	std	Y+1, r1	; 0x01
    16cc:	18 c0       	rjmp	.+48     	; 0x16fe <enu_SetTimerMode+0x182>
            }
            else if(Copy_u8_TimerMode == TIMER_FAST_PWM)
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	83 30       	cpi	r24, 0x03	; 3
    16d2:	81 f4       	brne	.+32     	; 0x16f4 <enu_SetTimerMode+0x178>
            {
                //Bits contain 11
                TCCR2 |= (1 << TCCR2_WGM20);
    16d4:	a5 e4       	ldi	r26, 0x45	; 69
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	e5 e4       	ldi	r30, 0x45	; 69
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	80 64       	ori	r24, 0x40	; 64
    16e0:	8c 93       	st	X, r24
                TCCR2 |= (1 << TCCR2_WGM21);
    16e2:	a5 e4       	ldi	r26, 0x45	; 69
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e5 e4       	ldi	r30, 0x45	; 69
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	88 60       	ori	r24, 0x08	; 8
    16ee:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    16f0:	19 82       	std	Y+1, r1	; 0x01
    16f2:	05 c0       	rjmp	.+10     	; 0x16fe <enu_SetTimerMode+0x182>
            }
            else 
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    16f4:	82 e0       	ldi	r24, 0x02	; 2
    16f6:	89 83       	std	Y+1, r24	; 0x01
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <enu_SetTimerMode+0x182>
        
     


        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    16fa:	82 e0       	ldi	r24, 0x02	; 2
    16fc:	89 83       	std	Y+1, r24	; 0x01
        break;
    }


    return Local_u8_ErrorFlag;
    16fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
    1708:	0f 90       	pop	r0
    170a:	cf 91       	pop	r28
    170c:	df 91       	pop	r29
    170e:	08 95       	ret

00001710 <enu_SetClockSelection>:

static ErrorState_t enu_SetClockSelection(u8 Copy_u8_TimerNumber, u8 Copy_u8_ClockSelection)
{
    1710:	df 93       	push	r29
    1712:	cf 93       	push	r28
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
    1718:	29 97       	sbiw	r28, 0x09	; 9
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	f8 94       	cli
    171e:	de bf       	out	0x3e, r29	; 62
    1720:	0f be       	out	0x3f, r0	; 63
    1722:	cd bf       	out	0x3d, r28	; 61
    1724:	8a 83       	std	Y+2, r24	; 0x02
    1726:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8_TimerNumber)
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	28 2f       	mov	r18, r24
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	39 87       	std	Y+9, r19	; 0x09
    1734:	28 87       	std	Y+8, r18	; 0x08
    1736:	88 85       	ldd	r24, Y+8	; 0x08
    1738:	99 85       	ldd	r25, Y+9	; 0x09
    173a:	81 30       	cpi	r24, 0x01	; 1
    173c:	91 05       	cpc	r25, r1
    173e:	09 f4       	brne	.+2      	; 0x1742 <enu_SetClockSelection+0x32>
    1740:	03 c2       	rjmp	.+1030   	; 0x1b48 <enu_SetClockSelection+0x438>
    1742:	28 85       	ldd	r18, Y+8	; 0x08
    1744:	39 85       	ldd	r19, Y+9	; 0x09
    1746:	22 30       	cpi	r18, 0x02	; 2
    1748:	31 05       	cpc	r19, r1
    174a:	09 f4       	brne	.+2      	; 0x174e <enu_SetClockSelection+0x3e>
    174c:	00 c1       	rjmp	.+512    	; 0x194e <enu_SetClockSelection+0x23e>
    174e:	88 85       	ldd	r24, Y+8	; 0x08
    1750:	99 85       	ldd	r25, Y+9	; 0x09
    1752:	00 97       	sbiw	r24, 0x00	; 0
    1754:	09 f0       	breq	.+2      	; 0x1758 <enu_SetClockSelection+0x48>
    1756:	f6 c1       	rjmp	.+1004   	; 0x1b44 <enu_SetClockSelection+0x434>
    {
        case TIMER_0:
        {
            switch (Copy_u8_ClockSelection)
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	28 2f       	mov	r18, r24
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	3f 83       	std	Y+7, r19	; 0x07
    1760:	2e 83       	std	Y+6, r18	; 0x06
    1762:	8e 81       	ldd	r24, Y+6	; 0x06
    1764:	9f 81       	ldd	r25, Y+7	; 0x07
    1766:	84 30       	cpi	r24, 0x04	; 4
    1768:	91 05       	cpc	r25, r1
    176a:	09 f4       	brne	.+2      	; 0x176e <enu_SetClockSelection+0x5e>
    176c:	7a c0       	rjmp	.+244    	; 0x1862 <enu_SetClockSelection+0x152>
    176e:	2e 81       	ldd	r18, Y+6	; 0x06
    1770:	3f 81       	ldd	r19, Y+7	; 0x07
    1772:	25 30       	cpi	r18, 0x05	; 5
    1774:	31 05       	cpc	r19, r1
    1776:	8c f4       	brge	.+34     	; 0x179a <enu_SetClockSelection+0x8a>
    1778:	8e 81       	ldd	r24, Y+6	; 0x06
    177a:	9f 81       	ldd	r25, Y+7	; 0x07
    177c:	81 30       	cpi	r24, 0x01	; 1
    177e:	91 05       	cpc	r25, r1
    1780:	09 f4       	brne	.+2      	; 0x1784 <enu_SetClockSelection+0x74>
    1782:	41 c0       	rjmp	.+130    	; 0x1806 <enu_SetClockSelection+0xf6>
    1784:	2e 81       	ldd	r18, Y+6	; 0x06
    1786:	3f 81       	ldd	r19, Y+7	; 0x07
    1788:	22 30       	cpi	r18, 0x02	; 2
    178a:	31 05       	cpc	r19, r1
    178c:	09 f4       	brne	.+2      	; 0x1790 <enu_SetClockSelection+0x80>
    178e:	52 c0       	rjmp	.+164    	; 0x1834 <enu_SetClockSelection+0x124>
    1790:	8e 81       	ldd	r24, Y+6	; 0x06
    1792:	9f 81       	ldd	r25, Y+7	; 0x07
    1794:	00 97       	sbiw	r24, 0x00	; 0
    1796:	01 f1       	breq	.+64     	; 0x17d8 <enu_SetClockSelection+0xc8>
    1798:	d7 c0       	rjmp	.+430    	; 0x1948 <enu_SetClockSelection+0x238>
    179a:	2e 81       	ldd	r18, Y+6	; 0x06
    179c:	3f 81       	ldd	r19, Y+7	; 0x07
    179e:	27 30       	cpi	r18, 0x07	; 7
    17a0:	31 05       	cpc	r19, r1
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <enu_SetClockSelection+0x96>
    17a4:	8c c0       	rjmp	.+280    	; 0x18be <enu_SetClockSelection+0x1ae>
    17a6:	8e 81       	ldd	r24, Y+6	; 0x06
    17a8:	9f 81       	ldd	r25, Y+7	; 0x07
    17aa:	88 30       	cpi	r24, 0x08	; 8
    17ac:	91 05       	cpc	r25, r1
    17ae:	3c f4       	brge	.+14     	; 0x17be <enu_SetClockSelection+0xae>
    17b0:	2e 81       	ldd	r18, Y+6	; 0x06
    17b2:	3f 81       	ldd	r19, Y+7	; 0x07
    17b4:	26 30       	cpi	r18, 0x06	; 6
    17b6:	31 05       	cpc	r19, r1
    17b8:	09 f4       	brne	.+2      	; 0x17bc <enu_SetClockSelection+0xac>
    17ba:	6a c0       	rjmp	.+212    	; 0x1890 <enu_SetClockSelection+0x180>
    17bc:	c5 c0       	rjmp	.+394    	; 0x1948 <enu_SetClockSelection+0x238>
    17be:	8e 81       	ldd	r24, Y+6	; 0x06
    17c0:	9f 81       	ldd	r25, Y+7	; 0x07
    17c2:	88 30       	cpi	r24, 0x08	; 8
    17c4:	91 05       	cpc	r25, r1
    17c6:	09 f4       	brne	.+2      	; 0x17ca <enu_SetClockSelection+0xba>
    17c8:	91 c0       	rjmp	.+290    	; 0x18ec <enu_SetClockSelection+0x1dc>
    17ca:	2e 81       	ldd	r18, Y+6	; 0x06
    17cc:	3f 81       	ldd	r19, Y+7	; 0x07
    17ce:	29 30       	cpi	r18, 0x09	; 9
    17d0:	31 05       	cpc	r19, r1
    17d2:	09 f4       	brne	.+2      	; 0x17d6 <enu_SetClockSelection+0xc6>
    17d4:	a2 c0       	rjmp	.+324    	; 0x191a <enu_SetClockSelection+0x20a>
    17d6:	b8 c0       	rjmp	.+368    	; 0x1948 <enu_SetClockSelection+0x238>
            {
                case TIMER_V_GND:
                {
                    //Bits contain 000
                    TCCR0 &= ~ (1 << TCCR0_CS00);
    17d8:	a3 e5       	ldi	r26, 0x53	; 83
    17da:	b0 e0       	ldi	r27, 0x00	; 0
    17dc:	e3 e5       	ldi	r30, 0x53	; 83
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	8e 7f       	andi	r24, 0xFE	; 254
    17e4:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS01);
    17e6:	a3 e5       	ldi	r26, 0x53	; 83
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	e3 e5       	ldi	r30, 0x53	; 83
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	8d 7f       	andi	r24, 0xFD	; 253
    17f2:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS02);
    17f4:	a3 e5       	ldi	r26, 0x53	; 83
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	e3 e5       	ldi	r30, 0x53	; 83
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	8b 7f       	andi	r24, 0xFB	; 251
    1800:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1802:	19 82       	std	Y+1, r1	; 0x01
    1804:	a1 c1       	rjmp	.+834    	; 0x1b48 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_1:
                {
                    //Bits contain 001
                    TCCR0 |= (1 << TCCR0_CS00);
    1806:	a3 e5       	ldi	r26, 0x53	; 83
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	e3 e5       	ldi	r30, 0x53	; 83
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	81 60       	ori	r24, 0x01	; 1
    1812:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS01);
    1814:	a3 e5       	ldi	r26, 0x53	; 83
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	e3 e5       	ldi	r30, 0x53	; 83
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	8d 7f       	andi	r24, 0xFD	; 253
    1820:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS02);
    1822:	a3 e5       	ldi	r26, 0x53	; 83
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e3 e5       	ldi	r30, 0x53	; 83
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	8b 7f       	andi	r24, 0xFB	; 251
    182e:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1830:	19 82       	std	Y+1, r1	; 0x01
    1832:	8a c1       	rjmp	.+788    	; 0x1b48 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_8:
                {
                    //Bits contain 010
                    TCCR0 &= ~(1 << TCCR0_CS00);
    1834:	a3 e5       	ldi	r26, 0x53	; 83
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	e3 e5       	ldi	r30, 0x53	; 83
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	8e 7f       	andi	r24, 0xFE	; 254
    1840:	8c 93       	st	X, r24
                    TCCR0 |= (1  << TCCR0_CS01);
    1842:	a3 e5       	ldi	r26, 0x53	; 83
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	e3 e5       	ldi	r30, 0x53	; 83
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	82 60       	ori	r24, 0x02	; 2
    184e:	8c 93       	st	X, r24
                    TCCR0 &= ~(1 << TCCR0_CS02);
    1850:	a3 e5       	ldi	r26, 0x53	; 83
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	e3 e5       	ldi	r30, 0x53	; 83
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	8b 7f       	andi	r24, 0xFB	; 251
    185c:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    185e:	19 82       	std	Y+1, r1	; 0x01
    1860:	73 c1       	rjmp	.+742    	; 0x1b48 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_64:
                {
                    //Bits contain 011
                    TCCR0 |= (1 << TCCR0_CS00);
    1862:	a3 e5       	ldi	r26, 0x53	; 83
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e3 e5       	ldi	r30, 0x53	; 83
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	81 60       	ori	r24, 0x01	; 1
    186e:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS01);
    1870:	a3 e5       	ldi	r26, 0x53	; 83
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	e3 e5       	ldi	r30, 0x53	; 83
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	82 60       	ori	r24, 0x02	; 2
    187c:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS02);
    187e:	a3 e5       	ldi	r26, 0x53	; 83
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	e3 e5       	ldi	r30, 0x53	; 83
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	8b 7f       	andi	r24, 0xFB	; 251
    188a:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    188c:	19 82       	std	Y+1, r1	; 0x01
    188e:	5c c1       	rjmp	.+696    	; 0x1b48 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_256:
                {
                    //Bits contain 100
                    TCCR0 &= ~(1 << TCCR0_CS00);
    1890:	a3 e5       	ldi	r26, 0x53	; 83
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	e3 e5       	ldi	r30, 0x53	; 83
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	8e 7f       	andi	r24, 0xFE	; 254
    189c:	8c 93       	st	X, r24
                    TCCR0 &= ~(1 << TCCR0_CS01);
    189e:	a3 e5       	ldi	r26, 0x53	; 83
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	e3 e5       	ldi	r30, 0x53	; 83
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	8d 7f       	andi	r24, 0xFD	; 253
    18aa:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS02);
    18ac:	a3 e5       	ldi	r26, 0x53	; 83
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	e3 e5       	ldi	r30, 0x53	; 83
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	84 60       	ori	r24, 0x04	; 4
    18b8:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    18ba:	19 82       	std	Y+1, r1	; 0x01
    18bc:	45 c1       	rjmp	.+650    	; 0x1b48 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_1024:
                {
                    //Bits contain 101
                    TCCR0 |= (1 << TCCR0_CS00);
    18be:	a3 e5       	ldi	r26, 0x53	; 83
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	e3 e5       	ldi	r30, 0x53	; 83
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	81 60       	ori	r24, 0x01	; 1
    18ca:	8c 93       	st	X, r24
                    TCCR0 &= ~ (1 << TCCR0_CS01);
    18cc:	a3 e5       	ldi	r26, 0x53	; 83
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	e3 e5       	ldi	r30, 0x53	; 83
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	8d 7f       	andi	r24, 0xFD	; 253
    18d8:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS02);
    18da:	a3 e5       	ldi	r26, 0x53	; 83
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	e3 e5       	ldi	r30, 0x53	; 83
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	84 60       	ori	r24, 0x04	; 4
    18e6:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    18e8:	19 82       	std	Y+1, r1	; 0x01
    18ea:	2e c1       	rjmp	.+604    	; 0x1b48 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_FALLING_EGDE:
                {
                    //Bits contain 110
                    TCCR0 &= ~(1 << TCCR0_CS00);
    18ec:	a3 e5       	ldi	r26, 0x53	; 83
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	e3 e5       	ldi	r30, 0x53	; 83
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	8e 7f       	andi	r24, 0xFE	; 254
    18f8:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS01);
    18fa:	a3 e5       	ldi	r26, 0x53	; 83
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	e3 e5       	ldi	r30, 0x53	; 83
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	82 60       	ori	r24, 0x02	; 2
    1906:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS02);
    1908:	a3 e5       	ldi	r26, 0x53	; 83
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	e3 e5       	ldi	r30, 0x53	; 83
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	84 60       	ori	r24, 0x04	; 4
    1914:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1916:	19 82       	std	Y+1, r1	; 0x01
    1918:	17 c1       	rjmp	.+558    	; 0x1b48 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_RISING_EGDE:
                {
                    //Bits contain 111
                    TCCR0 |= (1 << TCCR0_CS00);
    191a:	a3 e5       	ldi	r26, 0x53	; 83
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	e3 e5       	ldi	r30, 0x53	; 83
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	81 60       	ori	r24, 0x01	; 1
    1926:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS01);
    1928:	a3 e5       	ldi	r26, 0x53	; 83
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	e3 e5       	ldi	r30, 0x53	; 83
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	82 60       	ori	r24, 0x02	; 2
    1934:	8c 93       	st	X, r24
                    TCCR0 |= (1 << TCCR0_CS02);
    1936:	a3 e5       	ldi	r26, 0x53	; 83
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	e3 e5       	ldi	r30, 0x53	; 83
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	84 60       	ori	r24, 0x04	; 4
    1942:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1944:	19 82       	std	Y+1, r1	; 0x01
    1946:	00 c1       	rjmp	.+512    	; 0x1b48 <enu_SetClockSelection+0x438>
                    break;
                }
                
                default:
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1948:	82 e0       	ldi	r24, 0x02	; 2
    194a:	89 83       	std	Y+1, r24	; 0x01
    194c:	fd c0       	rjmp	.+506    	; 0x1b48 <enu_SetClockSelection+0x438>
    
        case TIMER_2:
        {
            //Choosing I/O clock each time 
            //Bit contains 0
            ASSR &= ~( 1 << ASSR_AS2);
    194e:	a2 e4       	ldi	r26, 0x42	; 66
    1950:	b0 e0       	ldi	r27, 0x00	; 0
    1952:	e2 e4       	ldi	r30, 0x42	; 66
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	87 7f       	andi	r24, 0xF7	; 247
    195a:	8c 93       	st	X, r24
            
            switch (Copy_u8_ClockSelection)
    195c:	8b 81       	ldd	r24, Y+3	; 0x03
    195e:	28 2f       	mov	r18, r24
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	3d 83       	std	Y+5, r19	; 0x05
    1964:	2c 83       	std	Y+4, r18	; 0x04
    1966:	8c 81       	ldd	r24, Y+4	; 0x04
    1968:	9d 81       	ldd	r25, Y+5	; 0x05
    196a:	83 30       	cpi	r24, 0x03	; 3
    196c:	91 05       	cpc	r25, r1
    196e:	09 f4       	brne	.+2      	; 0x1972 <enu_SetClockSelection+0x262>
    1970:	73 c0       	rjmp	.+230    	; 0x1a58 <enu_SetClockSelection+0x348>
    1972:	2c 81       	ldd	r18, Y+4	; 0x04
    1974:	3d 81       	ldd	r19, Y+5	; 0x05
    1976:	24 30       	cpi	r18, 0x04	; 4
    1978:	31 05       	cpc	r19, r1
    197a:	84 f4       	brge	.+32     	; 0x199c <enu_SetClockSelection+0x28c>
    197c:	8c 81       	ldd	r24, Y+4	; 0x04
    197e:	9d 81       	ldd	r25, Y+5	; 0x05
    1980:	81 30       	cpi	r24, 0x01	; 1
    1982:	91 05       	cpc	r25, r1
    1984:	d9 f1       	breq	.+118    	; 0x19fc <enu_SetClockSelection+0x2ec>
    1986:	2c 81       	ldd	r18, Y+4	; 0x04
    1988:	3d 81       	ldd	r19, Y+5	; 0x05
    198a:	22 30       	cpi	r18, 0x02	; 2
    198c:	31 05       	cpc	r19, r1
    198e:	0c f0       	brlt	.+2      	; 0x1992 <enu_SetClockSelection+0x282>
    1990:	4c c0       	rjmp	.+152    	; 0x1a2a <enu_SetClockSelection+0x31a>
    1992:	8c 81       	ldd	r24, Y+4	; 0x04
    1994:	9d 81       	ldd	r25, Y+5	; 0x05
    1996:	00 97       	sbiw	r24, 0x00	; 0
    1998:	d1 f0       	breq	.+52     	; 0x19ce <enu_SetClockSelection+0x2be>
    199a:	d1 c0       	rjmp	.+418    	; 0x1b3e <enu_SetClockSelection+0x42e>
    199c:	2c 81       	ldd	r18, Y+4	; 0x04
    199e:	3d 81       	ldd	r19, Y+5	; 0x05
    19a0:	25 30       	cpi	r18, 0x05	; 5
    19a2:	31 05       	cpc	r19, r1
    19a4:	09 f4       	brne	.+2      	; 0x19a8 <enu_SetClockSelection+0x298>
    19a6:	86 c0       	rjmp	.+268    	; 0x1ab4 <enu_SetClockSelection+0x3a4>
    19a8:	8c 81       	ldd	r24, Y+4	; 0x04
    19aa:	9d 81       	ldd	r25, Y+5	; 0x05
    19ac:	85 30       	cpi	r24, 0x05	; 5
    19ae:	91 05       	cpc	r25, r1
    19b0:	0c f4       	brge	.+2      	; 0x19b4 <enu_SetClockSelection+0x2a4>
    19b2:	69 c0       	rjmp	.+210    	; 0x1a86 <enu_SetClockSelection+0x376>
    19b4:	2c 81       	ldd	r18, Y+4	; 0x04
    19b6:	3d 81       	ldd	r19, Y+5	; 0x05
    19b8:	26 30       	cpi	r18, 0x06	; 6
    19ba:	31 05       	cpc	r19, r1
    19bc:	09 f4       	brne	.+2      	; 0x19c0 <enu_SetClockSelection+0x2b0>
    19be:	91 c0       	rjmp	.+290    	; 0x1ae2 <enu_SetClockSelection+0x3d2>
    19c0:	8c 81       	ldd	r24, Y+4	; 0x04
    19c2:	9d 81       	ldd	r25, Y+5	; 0x05
    19c4:	87 30       	cpi	r24, 0x07	; 7
    19c6:	91 05       	cpc	r25, r1
    19c8:	09 f4       	brne	.+2      	; 0x19cc <enu_SetClockSelection+0x2bc>
    19ca:	a2 c0       	rjmp	.+324    	; 0x1b10 <enu_SetClockSelection+0x400>
    19cc:	b8 c0       	rjmp	.+368    	; 0x1b3e <enu_SetClockSelection+0x42e>
            {
                case TIMER_V_GND:
                {
                    //Bits contain 000
                    TCCR2 &= ~ (1 << TCCR2_CS20);
    19ce:	a5 e4       	ldi	r26, 0x45	; 69
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	e5 e4       	ldi	r30, 0x45	; 69
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	8e 7f       	andi	r24, 0xFE	; 254
    19da:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS21);
    19dc:	a5 e4       	ldi	r26, 0x45	; 69
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	e5 e4       	ldi	r30, 0x45	; 69
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	8d 7f       	andi	r24, 0xFD	; 253
    19e8:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS22);
    19ea:	a5 e4       	ldi	r26, 0x45	; 69
    19ec:	b0 e0       	ldi	r27, 0x00	; 0
    19ee:	e5 e4       	ldi	r30, 0x45	; 69
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	80 81       	ld	r24, Z
    19f4:	8b 7f       	andi	r24, 0xFB	; 251
    19f6:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    19f8:	19 82       	std	Y+1, r1	; 0x01
    19fa:	a6 c0       	rjmp	.+332    	; 0x1b48 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_1:
                {
                    //Bits contain 001
                    TCCR2 |= (1 << TCCR2_CS20);
    19fc:	a5 e4       	ldi	r26, 0x45	; 69
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	e5 e4       	ldi	r30, 0x45	; 69
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	81 60       	ori	r24, 0x01	; 1
    1a08:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS21);
    1a0a:	a5 e4       	ldi	r26, 0x45	; 69
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	e5 e4       	ldi	r30, 0x45	; 69
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	8d 7f       	andi	r24, 0xFD	; 253
    1a16:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS22);
    1a18:	a5 e4       	ldi	r26, 0x45	; 69
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	e5 e4       	ldi	r30, 0x45	; 69
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	8b 7f       	andi	r24, 0xFB	; 251
    1a24:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1a26:	19 82       	std	Y+1, r1	; 0x01
    1a28:	8f c0       	rjmp	.+286    	; 0x1b48 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_8:
                {
                    //Bits contain 010
                    TCCR2 &= ~(1 << TCCR2_CS20);
    1a2a:	a5 e4       	ldi	r26, 0x45	; 69
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	e5 e4       	ldi	r30, 0x45	; 69
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	8e 7f       	andi	r24, 0xFE	; 254
    1a36:	8c 93       	st	X, r24
                    TCCR2 |= (1  << TCCR2_CS21);
    1a38:	a5 e4       	ldi	r26, 0x45	; 69
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	e5 e4       	ldi	r30, 0x45	; 69
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	82 60       	ori	r24, 0x02	; 2
    1a44:	8c 93       	st	X, r24
                    TCCR2 &= ~(1 << TCCR2_CS22);
    1a46:	a5 e4       	ldi	r26, 0x45	; 69
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	e5 e4       	ldi	r30, 0x45	; 69
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	8b 7f       	andi	r24, 0xFB	; 251
    1a52:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1a54:	19 82       	std	Y+1, r1	; 0x01
    1a56:	78 c0       	rjmp	.+240    	; 0x1b48 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_32:
                {
                    //Bits contain 011
                    TCCR2 |= (1 << TCCR2_CS20);
    1a58:	a5 e4       	ldi	r26, 0x45	; 69
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e5 e4       	ldi	r30, 0x45	; 69
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	81 60       	ori	r24, 0x01	; 1
    1a64:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS21);
    1a66:	a5 e4       	ldi	r26, 0x45	; 69
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	e5 e4       	ldi	r30, 0x45	; 69
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	82 60       	ori	r24, 0x02	; 2
    1a72:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS22);
    1a74:	a5 e4       	ldi	r26, 0x45	; 69
    1a76:	b0 e0       	ldi	r27, 0x00	; 0
    1a78:	e5 e4       	ldi	r30, 0x45	; 69
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	8b 7f       	andi	r24, 0xFB	; 251
    1a80:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1a82:	19 82       	std	Y+1, r1	; 0x01
    1a84:	61 c0       	rjmp	.+194    	; 0x1b48 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_64:
                {
                    //Bits contain 100
                    TCCR2 &= ~(1 << TCCR2_CS20);
    1a86:	a5 e4       	ldi	r26, 0x45	; 69
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	e5 e4       	ldi	r30, 0x45	; 69
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	8e 7f       	andi	r24, 0xFE	; 254
    1a92:	8c 93       	st	X, r24
                    TCCR2 &= ~(1 << TCCR2_CS21);
    1a94:	a5 e4       	ldi	r26, 0x45	; 69
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	e5 e4       	ldi	r30, 0x45	; 69
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	8d 7f       	andi	r24, 0xFD	; 253
    1aa0:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS22);
    1aa2:	a5 e4       	ldi	r26, 0x45	; 69
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	e5 e4       	ldi	r30, 0x45	; 69
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	84 60       	ori	r24, 0x04	; 4
    1aae:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1ab0:	19 82       	std	Y+1, r1	; 0x01
    1ab2:	4a c0       	rjmp	.+148    	; 0x1b48 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_128:
                {
                    //Bits contain 101
                    TCCR2 |= (1 << TCCR2_CS20);
    1ab4:	a5 e4       	ldi	r26, 0x45	; 69
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	e5 e4       	ldi	r30, 0x45	; 69
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	81 60       	ori	r24, 0x01	; 1
    1ac0:	8c 93       	st	X, r24
                    TCCR2 &= ~ (1 << TCCR2_CS21);
    1ac2:	a5 e4       	ldi	r26, 0x45	; 69
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	e5 e4       	ldi	r30, 0x45	; 69
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	8d 7f       	andi	r24, 0xFD	; 253
    1ace:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS22);
    1ad0:	a5 e4       	ldi	r26, 0x45	; 69
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	e5 e4       	ldi	r30, 0x45	; 69
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	84 60       	ori	r24, 0x04	; 4
    1adc:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1ade:	19 82       	std	Y+1, r1	; 0x01
    1ae0:	33 c0       	rjmp	.+102    	; 0x1b48 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_256:
                {
                    //Bits contain 110
                    TCCR2 &= ~(1 << TCCR2_CS20);
    1ae2:	a5 e4       	ldi	r26, 0x45	; 69
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	e5 e4       	ldi	r30, 0x45	; 69
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	8e 7f       	andi	r24, 0xFE	; 254
    1aee:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS21);
    1af0:	a5 e4       	ldi	r26, 0x45	; 69
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	e5 e4       	ldi	r30, 0x45	; 69
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	82 60       	ori	r24, 0x02	; 2
    1afc:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS22);
    1afe:	a5 e4       	ldi	r26, 0x45	; 69
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	e5 e4       	ldi	r30, 0x45	; 69
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	84 60       	ori	r24, 0x04	; 4
    1b0a:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1b0c:	19 82       	std	Y+1, r1	; 0x01
    1b0e:	1c c0       	rjmp	.+56     	; 0x1b48 <enu_SetClockSelection+0x438>
                    break;
                }
                case TIMER_PS_1024:
                {
                    //Bits contain 111
                    TCCR2 |= (1 << TCCR2_CS20);
    1b10:	a5 e4       	ldi	r26, 0x45	; 69
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	e5 e4       	ldi	r30, 0x45	; 69
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	81 60       	ori	r24, 0x01	; 1
    1b1c:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS21);
    1b1e:	a5 e4       	ldi	r26, 0x45	; 69
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	e5 e4       	ldi	r30, 0x45	; 69
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	82 60       	ori	r24, 0x02	; 2
    1b2a:	8c 93       	st	X, r24
                    TCCR2 |= (1 << TCCR2_CS22);
    1b2c:	a5 e4       	ldi	r26, 0x45	; 69
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	e5 e4       	ldi	r30, 0x45	; 69
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	84 60       	ori	r24, 0x04	; 4
    1b38:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1b3a:	19 82       	std	Y+1, r1	; 0x01
    1b3c:	05 c0       	rjmp	.+10     	; 0x1b48 <enu_SetClockSelection+0x438>
                    break;
                }
                
                default:
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1b3e:	82 e0       	ldi	r24, 0x02	; 2
    1b40:	89 83       	std	Y+1, r24	; 0x01
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <enu_SetClockSelection+0x438>

            break;
        }
    
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1b44:	82 e0       	ldi	r24, 0x02	; 2
    1b46:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return Local_u8_ErrorFlag;
    1b48:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b4a:	29 96       	adiw	r28, 0x09	; 9
    1b4c:	0f b6       	in	r0, 0x3f	; 63
    1b4e:	f8 94       	cli
    1b50:	de bf       	out	0x3e, r29	; 62
    1b52:	0f be       	out	0x3f, r0	; 63
    1b54:	cd bf       	out	0x3d, r28	; 61
    1b56:	cf 91       	pop	r28
    1b58:	df 91       	pop	r29
    1b5a:	08 95       	ret

00001b5c <enu_SetInterruptMode>:

static ErrorState_t enu_SetInterruptMode(u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode, u8 Copy_u8_InterruptMode)
{
    1b5c:	df 93       	push	r29
    1b5e:	cf 93       	push	r28
    1b60:	00 d0       	rcall	.+0      	; 0x1b62 <enu_SetInterruptMode+0x6>
    1b62:	00 d0       	rcall	.+0      	; 0x1b64 <enu_SetInterruptMode+0x8>
    1b64:	00 d0       	rcall	.+0      	; 0x1b66 <enu_SetInterruptMode+0xa>
    1b66:	cd b7       	in	r28, 0x3d	; 61
    1b68:	de b7       	in	r29, 0x3e	; 62
    1b6a:	8a 83       	std	Y+2, r24	; 0x02
    1b6c:	6b 83       	std	Y+3, r22	; 0x03
    1b6e:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	89 83       	std	Y+1, r24	; 0x01
    
    switch (Copy_u8_TimerNumber)
    1b74:	8a 81       	ldd	r24, Y+2	; 0x02
    1b76:	28 2f       	mov	r18, r24
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	3e 83       	std	Y+6, r19	; 0x06
    1b7c:	2d 83       	std	Y+5, r18	; 0x05
    1b7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b80:	9e 81       	ldd	r25, Y+6	; 0x06
    1b82:	81 30       	cpi	r24, 0x01	; 1
    1b84:	91 05       	cpc	r25, r1
    1b86:	09 f4       	brne	.+2      	; 0x1b8a <enu_SetInterruptMode+0x2e>
    1b88:	78 c0       	rjmp	.+240    	; 0x1c7a <enu_SetInterruptMode+0x11e>
    1b8a:	2d 81       	ldd	r18, Y+5	; 0x05
    1b8c:	3e 81       	ldd	r19, Y+6	; 0x06
    1b8e:	22 30       	cpi	r18, 0x02	; 2
    1b90:	31 05       	cpc	r19, r1
    1b92:	a9 f1       	breq	.+106    	; 0x1bfe <enu_SetInterruptMode+0xa2>
    1b94:	8d 81       	ldd	r24, Y+5	; 0x05
    1b96:	9e 81       	ldd	r25, Y+6	; 0x06
    1b98:	00 97       	sbiw	r24, 0x00	; 0
    1b9a:	09 f0       	breq	.+2      	; 0x1b9e <enu_SetInterruptMode+0x42>
    1b9c:	6e c0       	rjmp	.+220    	; 0x1c7a <enu_SetInterruptMode+0x11e>
    {
        case TIMER_0:
        {
            if (Copy_u8_TimerMode == TIMER_NORMAL)
    1b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba0:	88 23       	and	r24, r24
    1ba2:	89 f4       	brne	.+34     	; 0x1bc6 <enu_SetInterruptMode+0x6a>
            {
                //Clearing bit 0 (TOIE0)
                TIMSK &= (0xFE);
    1ba4:	a9 e5       	ldi	r26, 0x59	; 89
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	e9 e5       	ldi	r30, 0x59	; 89
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	8e 7f       	andi	r24, 0xFE	; 254
    1bb0:	8c 93       	st	X, r24
                
                //Choosing Interrupt Mode
                TIMSK |= (Copy_u8_InterruptMode << TIMSK_TOIE0);
    1bb2:	a9 e5       	ldi	r26, 0x59	; 89
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	e9 e5       	ldi	r30, 0x59	; 89
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	90 81       	ld	r25, Z
    1bbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1bbe:	89 2b       	or	r24, r25
    1bc0:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1bc2:	19 82       	std	Y+1, r1	; 0x01
    1bc4:	5a c0       	rjmp	.+180    	; 0x1c7a <enu_SetInterruptMode+0x11e>
            }
            else if (Copy_u8_TimerMode == TIMER_CTC)
    1bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc8:	81 30       	cpi	r24, 0x01	; 1
    1bca:	b1 f4       	brne	.+44     	; 0x1bf8 <enu_SetInterruptMode+0x9c>
            {
                //Clearing bit 1 (OCIE0)
                TIMSK &= (0xFD);
    1bcc:	a9 e5       	ldi	r26, 0x59	; 89
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	e9 e5       	ldi	r30, 0x59	; 89
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	8d 7f       	andi	r24, 0xFD	; 253
    1bd8:	8c 93       	st	X, r24

                //Choosing Interrupt Mode
                TIMSK |= (Copy_u8_InterruptMode << TIMSK_OCIE0);
    1bda:	a9 e5       	ldi	r26, 0x59	; 89
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	e9 e5       	ldi	r30, 0x59	; 89
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	28 2f       	mov	r18, r24
    1be6:	8c 81       	ldd	r24, Y+4	; 0x04
    1be8:	88 2f       	mov	r24, r24
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	88 0f       	add	r24, r24
    1bee:	99 1f       	adc	r25, r25
    1bf0:	82 2b       	or	r24, r18
    1bf2:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1bf4:	19 82       	std	Y+1, r1	; 0x01
    1bf6:	41 c0       	rjmp	.+130    	; 0x1c7a <enu_SetInterruptMode+0x11e>
            
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1bf8:	82 e0       	ldi	r24, 0x02	; 2
    1bfa:	89 83       	std	Y+1, r24	; 0x01
    1bfc:	3e c0       	rjmp	.+124    	; 0x1c7a <enu_SetInterruptMode+0x11e>
            break;
        }

        case TIMER_2:
        {
            if (Copy_u8_TimerMode == TIMER_NORMAL)
    1bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1c00:	88 23       	and	r24, r24
    1c02:	e9 f4       	brne	.+58     	; 0x1c3e <enu_SetInterruptMode+0xe2>
            {
                //Clearing bit 6 (TOIE2)
                TIMSK &= (0xBF);
    1c04:	a9 e5       	ldi	r26, 0x59	; 89
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	e9 e5       	ldi	r30, 0x59	; 89
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	8f 7b       	andi	r24, 0xBF	; 191
    1c10:	8c 93       	st	X, r24
                
                //Choosing Interrupt Mode
                TIMSK |= (Copy_u8_InterruptMode << TIMSK_TOIE2);
    1c12:	a9 e5       	ldi	r26, 0x59	; 89
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	e9 e5       	ldi	r30, 0x59	; 89
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	28 2f       	mov	r18, r24
    1c1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c20:	88 2f       	mov	r24, r24
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	00 24       	eor	r0, r0
    1c26:	96 95       	lsr	r25
    1c28:	87 95       	ror	r24
    1c2a:	07 94       	ror	r0
    1c2c:	96 95       	lsr	r25
    1c2e:	87 95       	ror	r24
    1c30:	07 94       	ror	r0
    1c32:	98 2f       	mov	r25, r24
    1c34:	80 2d       	mov	r24, r0
    1c36:	82 2b       	or	r24, r18
    1c38:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1c3a:	19 82       	std	Y+1, r1	; 0x01
    1c3c:	1e c0       	rjmp	.+60     	; 0x1c7a <enu_SetInterruptMode+0x11e>
            }
            else if (Copy_u8_TimerMode == TIMER_CTC)
    1c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c40:	81 30       	cpi	r24, 0x01	; 1
    1c42:	c9 f4       	brne	.+50     	; 0x1c76 <enu_SetInterruptMode+0x11a>
            {
                //Clearing bit 7 (OCIE2)
                TIMSK &= (0x7F);
    1c44:	a9 e5       	ldi	r26, 0x59	; 89
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	e9 e5       	ldi	r30, 0x59	; 89
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	8f 77       	andi	r24, 0x7F	; 127
    1c50:	8c 93       	st	X, r24

                //Choosing Interrupt Mode
                TIMSK |= (Copy_u8_InterruptMode << TIMSK_OCIE2);
    1c52:	a9 e5       	ldi	r26, 0x59	; 89
    1c54:	b0 e0       	ldi	r27, 0x00	; 0
    1c56:	e9 e5       	ldi	r30, 0x59	; 89
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	80 81       	ld	r24, Z
    1c5c:	28 2f       	mov	r18, r24
    1c5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c60:	88 2f       	mov	r24, r24
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	96 95       	lsr	r25
    1c66:	98 2f       	mov	r25, r24
    1c68:	88 27       	eor	r24, r24
    1c6a:	97 95       	ror	r25
    1c6c:	87 95       	ror	r24
    1c6e:	82 2b       	or	r24, r18
    1c70:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    1c72:	19 82       	std	Y+1, r1	; 0x01
    1c74:	02 c0       	rjmp	.+4      	; 0x1c7a <enu_SetInterruptMode+0x11e>
            
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1c76:	82 e0       	ldi	r24, 0x02	; 2
    1c78:	89 83       	std	Y+1, r24	; 0x01
        Local_u8_ErrorFlag - ES_OUT_OF_RANGE;
        break;
    }


    return Local_u8_ErrorFlag;
    1c7a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c7c:	26 96       	adiw	r28, 0x06	; 6
    1c7e:	0f b6       	in	r0, 0x3f	; 63
    1c80:	f8 94       	cli
    1c82:	de bf       	out	0x3e, r29	; 62
    1c84:	0f be       	out	0x3f, r0	; 63
    1c86:	cd bf       	out	0x3d, r28	; 61
    1c88:	cf 91       	pop	r28
    1c8a:	df 91       	pop	r29
    1c8c:	08 95       	ret

00001c8e <enu_SetOCxBehavior>:

static ErrorState_t enu_SetOCxBehavior(u8 Copy_u8_TimerNumber, u8 Copy_u8_TimerMode, u8 Copy_u8_OCxPinBehavior)
{
    1c8e:	df 93       	push	r29
    1c90:	cf 93       	push	r28
    1c92:	00 d0       	rcall	.+0      	; 0x1c94 <enu_SetOCxBehavior+0x6>
    1c94:	00 d0       	rcall	.+0      	; 0x1c96 <enu_SetOCxBehavior+0x8>
    1c96:	00 d0       	rcall	.+0      	; 0x1c98 <enu_SetOCxBehavior+0xa>
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
    1c9c:	8a 83       	std	Y+2, r24	; 0x02
    1c9e:	6b 83       	std	Y+3, r22	; 0x03
    1ca0:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_TimerNumber)
    1ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca8:	28 2f       	mov	r18, r24
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	3e 83       	std	Y+6, r19	; 0x06
    1cae:	2d 83       	std	Y+5, r18	; 0x05
    1cb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb4:	81 30       	cpi	r24, 0x01	; 1
    1cb6:	91 05       	cpc	r25, r1
    1cb8:	09 f4       	brne	.+2      	; 0x1cbc <enu_SetOCxBehavior+0x2e>
    1cba:	d3 c0       	rjmp	.+422    	; 0x1e62 <enu_SetOCxBehavior+0x1d4>
    1cbc:	2d 81       	ldd	r18, Y+5	; 0x05
    1cbe:	3e 81       	ldd	r19, Y+6	; 0x06
    1cc0:	22 30       	cpi	r18, 0x02	; 2
    1cc2:	31 05       	cpc	r19, r1
    1cc4:	09 f4       	brne	.+2      	; 0x1cc8 <enu_SetOCxBehavior+0x3a>
    1cc6:	68 c0       	rjmp	.+208    	; 0x1d98 <enu_SetOCxBehavior+0x10a>
    1cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cca:	9e 81       	ldd	r25, Y+6	; 0x06
    1ccc:	00 97       	sbiw	r24, 0x00	; 0
    1cce:	09 f0       	breq	.+2      	; 0x1cd2 <enu_SetOCxBehavior+0x44>
    1cd0:	c6 c0       	rjmp	.+396    	; 0x1e5e <enu_SetOCxBehavior+0x1d0>
    {
        case TIMER_0:
        {   
            //Clearing bits 5 and 4
            TCCR0 &= (0xCF);
    1cd2:	a3 e5       	ldi	r26, 0x53	; 83
    1cd4:	b0 e0       	ldi	r27, 0x00	; 0
    1cd6:	e3 e5       	ldi	r30, 0x53	; 83
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	80 81       	ld	r24, Z
    1cdc:	8f 7c       	andi	r24, 0xCF	; 207
    1cde:	8c 93       	st	X, r24

            if(Copy_u8_OCxPinBehavior == TIMER_OCX_DISCONNECTED)
    1ce0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce2:	88 23       	and	r24, r24
    1ce4:	11 f4       	brne	.+4      	; 0x1cea <enu_SetOCxBehavior+0x5c>
            {
                //OXc is disconnected
                //Bits aleardy cleared
                
                Local_u8_ErrorFlag = ES_OK;
    1ce6:	19 82       	std	Y+1, r1	; 0x01
    1ce8:	bc c0       	rjmp	.+376    	; 0x1e62 <enu_SetOCxBehavior+0x1d4>
            }
            else if((Copy_u8_TimerMode == TIMER_NORMAL) || (Copy_u8_TimerMode == TIMER_CTC))
    1cea:	8b 81       	ldd	r24, Y+3	; 0x03
    1cec:	88 23       	and	r24, r24
    1cee:	19 f0       	breq	.+6      	; 0x1cf6 <enu_SetOCxBehavior+0x68>
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	81 30       	cpi	r24, 0x01	; 1
    1cf4:	39 f5       	brne	.+78     	; 0x1d44 <enu_SetOCxBehavior+0xb6>
            {
                //Non-PWM modes
                if(Copy_u8_OCxPinBehavior == TIMER_TOGGLE_OCX)
    1cf6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf8:	81 30       	cpi	r24, 0x01	; 1
    1cfa:	49 f4       	brne	.+18     	; 0x1d0e <enu_SetOCxBehavior+0x80>
                {
                    //Bits contain 01
                    TCCR0 |= (1 << TCCR0_COM00);
    1cfc:	a3 e5       	ldi	r26, 0x53	; 83
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	e3 e5       	ldi	r30, 0x53	; 83
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	80 61       	ori	r24, 0x10	; 16
    1d08:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1d0a:	19 82       	std	Y+1, r1	; 0x01
    1d0c:	aa c0       	rjmp	.+340    	; 0x1e62 <enu_SetOCxBehavior+0x1d4>
                }
                else if (Copy_u8_OCxPinBehavior == TIMER_CLEAR_OCX)
    1d0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d10:	82 30       	cpi	r24, 0x02	; 2
    1d12:	49 f4       	brne	.+18     	; 0x1d26 <enu_SetOCxBehavior+0x98>
                {
                    //Bits contain 10
                    TCCR0 |= (1 << TCCR0_COM01);
    1d14:	a3 e5       	ldi	r26, 0x53	; 83
    1d16:	b0 e0       	ldi	r27, 0x00	; 0
    1d18:	e3 e5       	ldi	r30, 0x53	; 83
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	80 62       	ori	r24, 0x20	; 32
    1d20:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1d22:	19 82       	std	Y+1, r1	; 0x01
    1d24:	9e c0       	rjmp	.+316    	; 0x1e62 <enu_SetOCxBehavior+0x1d4>
                }
                else if (Copy_u8_OCxPinBehavior == TIMER_SET_OCX)
    1d26:	8c 81       	ldd	r24, Y+4	; 0x04
    1d28:	83 30       	cpi	r24, 0x03	; 3
    1d2a:	49 f4       	brne	.+18     	; 0x1d3e <enu_SetOCxBehavior+0xb0>
                {
                    //Bits contain 11
                    TCCR0 |= (3 << TCCR0_COM00);
    1d2c:	a3 e5       	ldi	r26, 0x53	; 83
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	e3 e5       	ldi	r30, 0x53	; 83
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	80 63       	ori	r24, 0x30	; 48
    1d38:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1d3a:	19 82       	std	Y+1, r1	; 0x01
    1d3c:	92 c0       	rjmp	.+292    	; 0x1e62 <enu_SetOCxBehavior+0x1d4>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1d3e:	82 e0       	ldi	r24, 0x02	; 2
    1d40:	89 83       	std	Y+1, r24	; 0x01
    1d42:	8f c0       	rjmp	.+286    	; 0x1e62 <enu_SetOCxBehavior+0x1d4>
                }

            }   
            else if ((Copy_u8_TimerMode == TIMER_PHASE_PWM) || (Copy_u8_TimerMode == TIMER_FAST_PWM))
    1d44:	8b 81       	ldd	r24, Y+3	; 0x03
    1d46:	82 30       	cpi	r24, 0x02	; 2
    1d48:	19 f0       	breq	.+6      	; 0x1d50 <enu_SetOCxBehavior+0xc2>
    1d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4c:	83 30       	cpi	r24, 0x03	; 3
    1d4e:	09 f5       	brne	.+66     	; 0x1d92 <enu_SetOCxBehavior+0x104>
            {
                //PWM modes
                if((Copy_u8_OCxPinBehavior == TIMER_FAST_PWM_NON_INVERTING || (Copy_u8_OCxPinBehavior == TIMER_PHASE_PWM_NON_INVERTING)))
    1d50:	8c 81       	ldd	r24, Y+4	; 0x04
    1d52:	84 30       	cpi	r24, 0x04	; 4
    1d54:	19 f0       	breq	.+6      	; 0x1d5c <enu_SetOCxBehavior+0xce>
    1d56:	8c 81       	ldd	r24, Y+4	; 0x04
    1d58:	86 30       	cpi	r24, 0x06	; 6
    1d5a:	49 f4       	brne	.+18     	; 0x1d6e <enu_SetOCxBehavior+0xe0>
                {
                    //Bits contain 10
                    TCCR0 |= (1 << TCCR0_COM01);
    1d5c:	a3 e5       	ldi	r26, 0x53	; 83
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	e3 e5       	ldi	r30, 0x53	; 83
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	80 62       	ori	r24, 0x20	; 32
    1d68:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1d6a:	19 82       	std	Y+1, r1	; 0x01
    1d6c:	7a c0       	rjmp	.+244    	; 0x1e62 <enu_SetOCxBehavior+0x1d4>
                }
                else if ((Copy_u8_OCxPinBehavior == TIMER_FAST_PWM_INVERTING) || (Copy_u8_OCxPinBehavior == TIMER_PHASE_PWM_INVERTING))
    1d6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d70:	85 30       	cpi	r24, 0x05	; 5
    1d72:	19 f0       	breq	.+6      	; 0x1d7a <enu_SetOCxBehavior+0xec>
    1d74:	8c 81       	ldd	r24, Y+4	; 0x04
    1d76:	87 30       	cpi	r24, 0x07	; 7
    1d78:	49 f4       	brne	.+18     	; 0x1d8c <enu_SetOCxBehavior+0xfe>
                {
                    //Bits contain 11
                    TCCR0 |= (3 << TCCR0_COM00);
    1d7a:	a3 e5       	ldi	r26, 0x53	; 83
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	e3 e5       	ldi	r30, 0x53	; 83
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	80 63       	ori	r24, 0x30	; 48
    1d86:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1d88:	19 82       	std	Y+1, r1	; 0x01
    1d8a:	6b c0       	rjmp	.+214    	; 0x1e62 <enu_SetOCxBehavior+0x1d4>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1d8c:	82 e0       	ldi	r24, 0x02	; 2
    1d8e:	89 83       	std	Y+1, r24	; 0x01
    1d90:	68 c0       	rjmp	.+208    	; 0x1e62 <enu_SetOCxBehavior+0x1d4>
                }

            } 
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1d92:	82 e0       	ldi	r24, 0x02	; 2
    1d94:	89 83       	std	Y+1, r24	; 0x01
    1d96:	65 c0       	rjmp	.+202    	; 0x1e62 <enu_SetOCxBehavior+0x1d4>
        
        case TIMER_2:
        {
            
            //Clearing bits 5 and 4
            TCCR2 &= (0xCF);
    1d98:	a5 e4       	ldi	r26, 0x45	; 69
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	e5 e4       	ldi	r30, 0x45	; 69
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	8f 7c       	andi	r24, 0xCF	; 207
    1da4:	8c 93       	st	X, r24

            if(Copy_u8_OCxPinBehavior == TIMER_OCX_DISCONNECTED)
    1da6:	8c 81       	ldd	r24, Y+4	; 0x04
    1da8:	88 23       	and	r24, r24
    1daa:	11 f4       	brne	.+4      	; 0x1db0 <enu_SetOCxBehavior+0x122>
            {
                //OXc is disconnected
                //Bits aleardy cleared
                
                Local_u8_ErrorFlag = ES_OK;
    1dac:	19 82       	std	Y+1, r1	; 0x01
    1dae:	59 c0       	rjmp	.+178    	; 0x1e62 <enu_SetOCxBehavior+0x1d4>
            }
            else if((Copy_u8_TimerMode == TIMER_NORMAL) || (Copy_u8_TimerMode == TIMER_CTC))
    1db0:	8b 81       	ldd	r24, Y+3	; 0x03
    1db2:	88 23       	and	r24, r24
    1db4:	19 f0       	breq	.+6      	; 0x1dbc <enu_SetOCxBehavior+0x12e>
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	81 30       	cpi	r24, 0x01	; 1
    1dba:	39 f5       	brne	.+78     	; 0x1e0a <enu_SetOCxBehavior+0x17c>
            {
                //Non-PWM modes
                if(Copy_u8_OCxPinBehavior == TIMER_TOGGLE_OCX)
    1dbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dbe:	81 30       	cpi	r24, 0x01	; 1
    1dc0:	49 f4       	brne	.+18     	; 0x1dd4 <enu_SetOCxBehavior+0x146>
                {
                    //Bits contain 01
                    TCCR2 |= (1 << TCCR2_COM20);
    1dc2:	a5 e4       	ldi	r26, 0x45	; 69
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	e5 e4       	ldi	r30, 0x45	; 69
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	80 61       	ori	r24, 0x10	; 16
    1dce:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1dd0:	19 82       	std	Y+1, r1	; 0x01
    1dd2:	47 c0       	rjmp	.+142    	; 0x1e62 <enu_SetOCxBehavior+0x1d4>
                }
                else if (Copy_u8_OCxPinBehavior == TIMER_CLEAR_OCX)
    1dd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd6:	82 30       	cpi	r24, 0x02	; 2
    1dd8:	49 f4       	brne	.+18     	; 0x1dec <enu_SetOCxBehavior+0x15e>
                {
                    //Bits contain 10
                    TCCR2 |= (1 << TCCR2_COM21);
    1dda:	a5 e4       	ldi	r26, 0x45	; 69
    1ddc:	b0 e0       	ldi	r27, 0x00	; 0
    1dde:	e5 e4       	ldi	r30, 0x45	; 69
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	80 62       	ori	r24, 0x20	; 32
    1de6:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1de8:	19 82       	std	Y+1, r1	; 0x01
    1dea:	3b c0       	rjmp	.+118    	; 0x1e62 <enu_SetOCxBehavior+0x1d4>
                }
                else if (Copy_u8_OCxPinBehavior == TIMER_SET_OCX)
    1dec:	8c 81       	ldd	r24, Y+4	; 0x04
    1dee:	83 30       	cpi	r24, 0x03	; 3
    1df0:	49 f4       	brne	.+18     	; 0x1e04 <enu_SetOCxBehavior+0x176>
                {
                    //Bits contain 11
                    TCCR2 |= (3 << TCCR2_COM20);
    1df2:	a5 e4       	ldi	r26, 0x45	; 69
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	e5 e4       	ldi	r30, 0x45	; 69
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	80 63       	ori	r24, 0x30	; 48
    1dfe:	8c 93       	st	X, r24
                    
                    Local_u8_ErrorFlag = ES_OK;
    1e00:	19 82       	std	Y+1, r1	; 0x01
    1e02:	2f c0       	rjmp	.+94     	; 0x1e62 <enu_SetOCxBehavior+0x1d4>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1e04:	82 e0       	ldi	r24, 0x02	; 2
    1e06:	89 83       	std	Y+1, r24	; 0x01
    1e08:	2c c0       	rjmp	.+88     	; 0x1e62 <enu_SetOCxBehavior+0x1d4>
                }

            }   
            else if ((Copy_u8_TimerMode == TIMER_PHASE_PWM) || (Copy_u8_TimerMode == TIMER_FAST_PWM))
    1e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0c:	82 30       	cpi	r24, 0x02	; 2
    1e0e:	19 f0       	breq	.+6      	; 0x1e16 <enu_SetOCxBehavior+0x188>
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	83 30       	cpi	r24, 0x03	; 3
    1e14:	09 f5       	brne	.+66     	; 0x1e58 <enu_SetOCxBehavior+0x1ca>
            {
                //PWM modes
                if((Copy_u8_OCxPinBehavior == TIMER_FAST_PWM_NON_INVERTING || (Copy_u8_OCxPinBehavior == TIMER_PHASE_PWM_NON_INVERTING)))
    1e16:	8c 81       	ldd	r24, Y+4	; 0x04
    1e18:	84 30       	cpi	r24, 0x04	; 4
    1e1a:	19 f0       	breq	.+6      	; 0x1e22 <enu_SetOCxBehavior+0x194>
    1e1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e1e:	86 30       	cpi	r24, 0x06	; 6
    1e20:	49 f4       	brne	.+18     	; 0x1e34 <enu_SetOCxBehavior+0x1a6>
                {
                    //Bits contain 10
                    TCCR2 |= (1 << TCCR2_COM21);
    1e22:	a5 e4       	ldi	r26, 0x45	; 69
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	e5 e4       	ldi	r30, 0x45	; 69
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	80 62       	ori	r24, 0x20	; 32
    1e2e:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1e30:	19 82       	std	Y+1, r1	; 0x01
    1e32:	17 c0       	rjmp	.+46     	; 0x1e62 <enu_SetOCxBehavior+0x1d4>
                }
                else if ((Copy_u8_OCxPinBehavior == TIMER_FAST_PWM_INVERTING) || (Copy_u8_OCxPinBehavior == TIMER_PHASE_PWM_INVERTING))
    1e34:	8c 81       	ldd	r24, Y+4	; 0x04
    1e36:	85 30       	cpi	r24, 0x05	; 5
    1e38:	19 f0       	breq	.+6      	; 0x1e40 <enu_SetOCxBehavior+0x1b2>
    1e3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e3c:	87 30       	cpi	r24, 0x07	; 7
    1e3e:	49 f4       	brne	.+18     	; 0x1e52 <enu_SetOCxBehavior+0x1c4>
                {
                    //Bits contain 11
                    TCCR2 |= (3 << TCCR2_COM20);
    1e40:	a5 e4       	ldi	r26, 0x45	; 69
    1e42:	b0 e0       	ldi	r27, 0x00	; 0
    1e44:	e5 e4       	ldi	r30, 0x45	; 69
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	80 81       	ld	r24, Z
    1e4a:	80 63       	ori	r24, 0x30	; 48
    1e4c:	8c 93       	st	X, r24

                    Local_u8_ErrorFlag = ES_OK;
    1e4e:	19 82       	std	Y+1, r1	; 0x01
    1e50:	08 c0       	rjmp	.+16     	; 0x1e62 <enu_SetOCxBehavior+0x1d4>
                }
                else
                {
                    Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1e52:	82 e0       	ldi	r24, 0x02	; 2
    1e54:	89 83       	std	Y+1, r24	; 0x01
    1e56:	05 c0       	rjmp	.+10     	; 0x1e62 <enu_SetOCxBehavior+0x1d4>
                }

            } 
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1e58:	82 e0       	ldi	r24, 0x02	; 2
    1e5a:	89 83       	std	Y+1, r24	; 0x01
    1e5c:	02 c0       	rjmp	.+4      	; 0x1e62 <enu_SetOCxBehavior+0x1d4>
            }
            break;
        }
    
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1e5e:	82 e0       	ldi	r24, 0x02	; 2
    1e60:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    return Local_u8_ErrorFlag;
    1e62:	89 81       	ldd	r24, Y+1	; 0x01
    1e64:	26 96       	adiw	r28, 0x06	; 6
    1e66:	0f b6       	in	r0, 0x3f	; 63
    1e68:	f8 94       	cli
    1e6a:	de bf       	out	0x3e, r29	; 62
    1e6c:	0f be       	out	0x3f, r0	; 63
    1e6e:	cd bf       	out	0x3d, r28	; 61
    1e70:	cf 91       	pop	r28
    1e72:	df 91       	pop	r29
    1e74:	08 95       	ret

00001e76 <SREG_vid_EnableBitI>:

void SREG_vid_EnableBitI(void)
{
    1e76:	df 93       	push	r29
    1e78:	cf 93       	push	r28
    1e7a:	cd b7       	in	r28, 0x3d	; 61
    1e7c:	de b7       	in	r29, 0x3e	; 62
    asm("SEI");
    1e7e:	78 94       	sei
}
    1e80:	cf 91       	pop	r28
    1e82:	df 91       	pop	r29
    1e84:	08 95       	ret

00001e86 <SREG_vid_ClearBitI>:

void SREG_vid_ClearBitI(void)
{
    1e86:	df 93       	push	r29
    1e88:	cf 93       	push	r28
    1e8a:	cd b7       	in	r28, 0x3d	; 61
    1e8c:	de b7       	in	r29, 0x3e	; 62
    asm("CLI");
    1e8e:	f8 94       	cli

    1e90:	cf 91       	pop	r28
    1e92:	df 91       	pop	r29
    1e94:	08 95       	ret

00001e96 <EXTI_enu_Initialization>:


//APIs implementations

extern ErrorState_t EXTI_enu_Initialization(void)
{
    1e96:	df 93       	push	r29
    1e98:	cf 93       	push	r28
    1e9a:	00 d0       	rcall	.+0      	; 0x1e9c <EXTI_enu_Initialization+0x6>
    1e9c:	cd b7       	in	r28, 0x3d	; 61
    1e9e:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    1ea4:	19 82       	std	Y+1, r1	; 0x01
    for( Local_u8_Counter = 0; Local_u8_Counter < EXTI_u8_INTCount; Local_u8_Counter++)
    1ea6:	19 82       	std	Y+1, r1	; 0x01
    1ea8:	3b c0       	rjmp	.+118    	; 0x1f20 <EXTI_enu_Initialization+0x8a>
    {
        enu_SetMode(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTMode);
    1eaa:	89 81       	ldd	r24, Y+1	; 0x01
    1eac:	28 2f       	mov	r18, r24
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	c9 01       	movw	r24, r18
    1eb2:	88 0f       	add	r24, r24
    1eb4:	99 1f       	adc	r25, r25
    1eb6:	82 0f       	add	r24, r18
    1eb8:	93 1f       	adc	r25, r19
    1eba:	fc 01       	movw	r30, r24
    1ebc:	ec 58       	subi	r30, 0x8C	; 140
    1ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec0:	40 81       	ld	r20, Z
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
    1ec4:	28 2f       	mov	r18, r24
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	c9 01       	movw	r24, r18
    1eca:	88 0f       	add	r24, r24
    1ecc:	99 1f       	adc	r25, r25
    1ece:	82 0f       	add	r24, r18
    1ed0:	93 1f       	adc	r25, r19
    1ed2:	fc 01       	movw	r30, r24
    1ed4:	eb 58       	subi	r30, 0x8B	; 139
    1ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed8:	90 81       	ld	r25, Z
    1eda:	84 2f       	mov	r24, r20
    1edc:	69 2f       	mov	r22, r25
    1ede:	0e 94 0d 11 	call	0x221a	; 0x221a <enu_SetMode>
        enu_SetSenseLevel(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTSenseLevel);
    1ee2:	89 81       	ldd	r24, Y+1	; 0x01
    1ee4:	28 2f       	mov	r18, r24
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	c9 01       	movw	r24, r18
    1eea:	88 0f       	add	r24, r24
    1eec:	99 1f       	adc	r25, r25
    1eee:	82 0f       	add	r24, r18
    1ef0:	93 1f       	adc	r25, r19
    1ef2:	fc 01       	movw	r30, r24
    1ef4:	ec 58       	subi	r30, 0x8C	; 140
    1ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef8:	40 81       	ld	r20, Z
    1efa:	89 81       	ldd	r24, Y+1	; 0x01
    1efc:	28 2f       	mov	r18, r24
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	c9 01       	movw	r24, r18
    1f02:	88 0f       	add	r24, r24
    1f04:	99 1f       	adc	r25, r25
    1f06:	82 0f       	add	r24, r18
    1f08:	93 1f       	adc	r25, r19
    1f0a:	fc 01       	movw	r30, r24
    1f0c:	ea 58       	subi	r30, 0x8A	; 138
    1f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f10:	90 81       	ld	r25, Z
    1f12:	84 2f       	mov	r24, r20
    1f14:	69 2f       	mov	r22, r25
    1f16:	0e 94 88 11 	call	0x2310	; 0x2310 <enu_SetSenseLevel>
extern ErrorState_t EXTI_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for( Local_u8_Counter = 0; Local_u8_Counter < EXTI_u8_INTCount; Local_u8_Counter++)
    1f1a:	89 81       	ldd	r24, Y+1	; 0x01
    1f1c:	8f 5f       	subi	r24, 0xFF	; 255
    1f1e:	89 83       	std	Y+1, r24	; 0x01
    1f20:	90 91 73 00 	lds	r25, 0x0073
    1f24:	89 81       	ldd	r24, Y+1	; 0x01
    1f26:	89 17       	cp	r24, r25
    1f28:	08 f4       	brcc	.+2      	; 0x1f2c <EXTI_enu_Initialization+0x96>
    1f2a:	bf cf       	rjmp	.-130    	; 0x1eaa <EXTI_enu_Initialization+0x14>
    {
        enu_SetMode(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTMode);
        enu_SetSenseLevel(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTSenseLevel);
    }
    
    Local_u8_ErrorFlag = ES_OK;
    1f2c:	1a 82       	std	Y+2, r1	; 0x02

    return Local_u8_ErrorFlag;
    1f2e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
    1f34:	cf 91       	pop	r28
    1f36:	df 91       	pop	r29
    1f38:	08 95       	ret

00001f3a <EXTI_enu_ISC>:

extern ErrorState_t EXTI_enu_ISC(u8 Copy_u8_INTNumber, u8 Copy_u8_SenseLevel)
{
    1f3a:	df 93       	push	r29
    1f3c:	cf 93       	push	r28
    1f3e:	00 d0       	rcall	.+0      	; 0x1f40 <EXTI_enu_ISC+0x6>
    1f40:	0f 92       	push	r0
    1f42:	cd b7       	in	r28, 0x3d	; 61
    1f44:	de b7       	in	r29, 0x3e	; 62
    1f46:	8a 83       	std	Y+2, r24	; 0x02
    1f48:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetSenseLevel(Copy_u8_INTNumber, Copy_u8_SenseLevel);
    1f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f50:	6b 81       	ldd	r22, Y+3	; 0x03
    1f52:	0e 94 88 11 	call	0x2310	; 0x2310 <enu_SetSenseLevel>
    1f56:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
    1f58:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f5a:	0f 90       	pop	r0
    1f5c:	0f 90       	pop	r0
    1f5e:	0f 90       	pop	r0
    1f60:	cf 91       	pop	r28
    1f62:	df 91       	pop	r29
    1f64:	08 95       	ret

00001f66 <EXTI_enu_INTMode>:

extern ErrorState_t EXTI_enu_INTMode(u8 Copy_u8_INTNumber, u8 Copy_u8_Mode)
{
    1f66:	df 93       	push	r29
    1f68:	cf 93       	push	r28
    1f6a:	00 d0       	rcall	.+0      	; 0x1f6c <EXTI_enu_INTMode+0x6>
    1f6c:	0f 92       	push	r0
    1f6e:	cd b7       	in	r28, 0x3d	; 61
    1f70:	de b7       	in	r29, 0x3e	; 62
    1f72:	8a 83       	std	Y+2, r24	; 0x02
    1f74:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetMode(Copy_u8_INTNumber, Copy_u8_Mode);
    1f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7c:	6b 81       	ldd	r22, Y+3	; 0x03
    1f7e:	0e 94 0d 11 	call	0x221a	; 0x221a <enu_SetMode>
    1f82:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f86:	0f 90       	pop	r0
    1f88:	0f 90       	pop	r0
    1f8a:	0f 90       	pop	r0
    1f8c:	cf 91       	pop	r28
    1f8e:	df 91       	pop	r29
    1f90:	08 95       	ret

00001f92 <EXTI_enu_GetPIF>:

extern ErrorState_t EXTI_enu_GetPIF (u8 Copy_u8_INTNumber, u8* Copy_pu8_Result)
{
    1f92:	df 93       	push	r29
    1f94:	cf 93       	push	r28
    1f96:	00 d0       	rcall	.+0      	; 0x1f98 <EXTI_enu_GetPIF+0x6>
    1f98:	00 d0       	rcall	.+0      	; 0x1f9a <EXTI_enu_GetPIF+0x8>
    1f9a:	00 d0       	rcall	.+0      	; 0x1f9c <EXTI_enu_GetPIF+0xa>
    1f9c:	cd b7       	in	r28, 0x3d	; 61
    1f9e:	de b7       	in	r29, 0x3e	; 62
    1fa0:	8a 83       	std	Y+2, r24	; 0x02
    1fa2:	7c 83       	std	Y+4, r23	; 0x04
    1fa4:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	89 83       	std	Y+1, r24	; 0x01

    if (Copy_pu8_Result)
    1faa:	8b 81       	ldd	r24, Y+3	; 0x03
    1fac:	9c 81       	ldd	r25, Y+4	; 0x04
    1fae:	00 97       	sbiw	r24, 0x00	; 0
    1fb0:	d1 f1       	breq	.+116    	; 0x2026 <EXTI_enu_GetPIF+0x94>
    {

        switch(Copy_u8_INTNumber)
    1fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb4:	28 2f       	mov	r18, r24
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	3e 83       	std	Y+6, r19	; 0x06
    1fba:	2d 83       	std	Y+5, r18	; 0x05
    1fbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc0:	81 30       	cpi	r24, 0x01	; 1
    1fc2:	91 05       	cpc	r25, r1
    1fc4:	b1 f0       	breq	.+44     	; 0x1ff2 <EXTI_enu_GetPIF+0x60>
    1fc6:	2d 81       	ldd	r18, Y+5	; 0x05
    1fc8:	3e 81       	ldd	r19, Y+6	; 0x06
    1fca:	22 30       	cpi	r18, 0x02	; 2
    1fcc:	31 05       	cpc	r19, r1
    1fce:	e1 f0       	breq	.+56     	; 0x2008 <EXTI_enu_GetPIF+0x76>
    1fd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd4:	00 97       	sbiw	r24, 0x00	; 0
    1fd6:	21 f5       	brne	.+72     	; 0x2020 <EXTI_enu_GetPIF+0x8e>
        {
            case EXTI_INT0:
            {
                *Copy_pu8_Result = 1 & (GIFR >> GIFR_INTF0);
    1fd8:	ea e5       	ldi	r30, 0x5A	; 90
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	80 81       	ld	r24, Z
    1fde:	82 95       	swap	r24
    1fe0:	86 95       	lsr	r24
    1fe2:	86 95       	lsr	r24
    1fe4:	83 70       	andi	r24, 0x03	; 3
    1fe6:	81 70       	andi	r24, 0x01	; 1
    1fe8:	eb 81       	ldd	r30, Y+3	; 0x03
    1fea:	fc 81       	ldd	r31, Y+4	; 0x04
    1fec:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
    1fee:	19 82       	std	Y+1, r1	; 0x01
    1ff0:	1c c0       	rjmp	.+56     	; 0x202a <EXTI_enu_GetPIF+0x98>
                break;
            }
            case EXTI_INT1:
            {
                *Copy_pu8_Result = 1 & (GIFR >> GIFR_INTF1);
    1ff2:	ea e5       	ldi	r30, 0x5A	; 90
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	80 81       	ld	r24, Z
    1ff8:	88 1f       	adc	r24, r24
    1ffa:	88 27       	eor	r24, r24
    1ffc:	88 1f       	adc	r24, r24
    1ffe:	eb 81       	ldd	r30, Y+3	; 0x03
    2000:	fc 81       	ldd	r31, Y+4	; 0x04
    2002:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
    2004:	19 82       	std	Y+1, r1	; 0x01
    2006:	11 c0       	rjmp	.+34     	; 0x202a <EXTI_enu_GetPIF+0x98>

                break;
            }
            case EXTI_INT2:
            {
                *Copy_pu8_Result = 1 & (GIFR >> GIFR_INTF2);
    2008:	ea e5       	ldi	r30, 0x5A	; 90
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	82 95       	swap	r24
    2010:	86 95       	lsr	r24
    2012:	87 70       	andi	r24, 0x07	; 7
    2014:	81 70       	andi	r24, 0x01	; 1
    2016:	eb 81       	ldd	r30, Y+3	; 0x03
    2018:	fc 81       	ldd	r31, Y+4	; 0x04
    201a:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
    201c:	19 82       	std	Y+1, r1	; 0x01
    201e:	05 c0       	rjmp	.+10     	; 0x202a <EXTI_enu_GetPIF+0x98>
                break;
            }

            default:
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2020:	82 e0       	ldi	r24, 0x02	; 2
    2022:	89 83       	std	Y+1, r24	; 0x01
    2024:	02 c0       	rjmp	.+4      	; 0x202a <EXTI_enu_GetPIF+0x98>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    2026:	83 e0       	ldi	r24, 0x03	; 3
    2028:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8_ErrorFlag;
    202a:	89 81       	ldd	r24, Y+1	; 0x01
}
    202c:	26 96       	adiw	r28, 0x06	; 6
    202e:	0f b6       	in	r0, 0x3f	; 63
    2030:	f8 94       	cli
    2032:	de bf       	out	0x3e, r29	; 62
    2034:	0f be       	out	0x3f, r0	; 63
    2036:	cd bf       	out	0x3d, r28	; 61
    2038:	cf 91       	pop	r28
    203a:	df 91       	pop	r29
    203c:	08 95       	ret

0000203e <EXTI_enu_ClearINTFx>:

extern ErrorState_t EXTI_enu_ClearINTFx (u8 Copy_u8_INTNumber)
{
    203e:	df 93       	push	r29
    2040:	cf 93       	push	r28
    2042:	00 d0       	rcall	.+0      	; 0x2044 <EXTI_enu_ClearINTFx+0x6>
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
    2048:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetFlagValue(Copy_u8_INTNumber, EXTI_HIGH);
    204e:	8a 81       	ldd	r24, Y+2	; 0x02
    2050:	61 e0       	ldi	r22, 0x01	; 1
    2052:	0e 94 2f 12 	call	0x245e	; 0x245e <enu_SetFlagValue>
    2056:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
    2058:	89 81       	ldd	r24, Y+1	; 0x01
}
    205a:	0f 90       	pop	r0
    205c:	0f 90       	pop	r0
    205e:	cf 91       	pop	r28
    2060:	df 91       	pop	r29
    2062:	08 95       	ret

00002064 <EXTI_enu_SetCallBack>:

extern ErrorState_t EXTI_enu_SetCallBack(u8 Copy_u8_INTNumber, void (* Copy_pfun_AppFunction)(void), void* Copy_pvid_Parameters)
{
    2064:	df 93       	push	r29
    2066:	cf 93       	push	r28
    2068:	00 d0       	rcall	.+0      	; 0x206a <EXTI_enu_SetCallBack+0x6>
    206a:	00 d0       	rcall	.+0      	; 0x206c <EXTI_enu_SetCallBack+0x8>
    206c:	00 d0       	rcall	.+0      	; 0x206e <EXTI_enu_SetCallBack+0xa>
    206e:	cd b7       	in	r28, 0x3d	; 61
    2070:	de b7       	in	r29, 0x3e	; 62
    2072:	8a 83       	std	Y+2, r24	; 0x02
    2074:	7c 83       	std	Y+4, r23	; 0x04
    2076:	6b 83       	std	Y+3, r22	; 0x03
    2078:	5e 83       	std	Y+6, r21	; 0x06
    207a:	4d 83       	std	Y+5, r20	; 0x05
    u8 Local_u8_ErrorFlag = ES_NOK;
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pfun_AppFunction)
    2080:	8b 81       	ldd	r24, Y+3	; 0x03
    2082:	9c 81       	ldd	r25, Y+4	; 0x04
    2084:	00 97       	sbiw	r24, 0x00	; 0
    2086:	d1 f0       	breq	.+52     	; 0x20bc <EXTI_enu_SetCallBack+0x58>
    {
        pfun_ISRPointers[Copy_u8_INTNumber] = Copy_pfun_AppFunction;
    2088:	8a 81       	ldd	r24, Y+2	; 0x02
    208a:	88 2f       	mov	r24, r24
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	2b 81       	ldd	r18, Y+3	; 0x03
    2090:	3c 81       	ldd	r19, Y+4	; 0x04
    2092:	88 0f       	add	r24, r24
    2094:	99 1f       	adc	r25, r25
    2096:	fc 01       	movw	r30, r24
    2098:	e6 56       	subi	r30, 0x66	; 102
    209a:	ff 4f       	sbci	r31, 0xFF	; 255
    209c:	31 83       	std	Z+1, r19	; 0x01
    209e:	20 83       	st	Z, r18

        apvid_ISRParameters[Copy_u8_INTNumber] = Copy_pvid_Parameters;
    20a0:	8a 81       	ldd	r24, Y+2	; 0x02
    20a2:	88 2f       	mov	r24, r24
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	88 0f       	add	r24, r24
    20a8:	99 1f       	adc	r25, r25
    20aa:	fc 01       	movw	r30, r24
    20ac:	e0 56       	subi	r30, 0x60	; 96
    20ae:	ff 4f       	sbci	r31, 0xFF	; 255
    20b0:	8d 81       	ldd	r24, Y+5	; 0x05
    20b2:	9e 81       	ldd	r25, Y+6	; 0x06
    20b4:	91 83       	std	Z+1, r25	; 0x01
    20b6:	80 83       	st	Z, r24

        Local_u8_ErrorFlag = ES_OK;
    20b8:	19 82       	std	Y+1, r1	; 0x01
    20ba:	02 c0       	rjmp	.+4      	; 0x20c0 <EXTI_enu_SetCallBack+0x5c>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    20bc:	82 e0       	ldi	r24, 0x02	; 2
    20be:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    20c2:	26 96       	adiw	r28, 0x06	; 6
    20c4:	0f b6       	in	r0, 0x3f	; 63
    20c6:	f8 94       	cli
    20c8:	de bf       	out	0x3e, r29	; 62
    20ca:	0f be       	out	0x3f, r0	; 63
    20cc:	cd bf       	out	0x3d, r28	; 61
    20ce:	cf 91       	pop	r28
    20d0:	df 91       	pop	r29
    20d2:	08 95       	ret

000020d4 <__vector_1>:
void __vector_1 (void)__attribute__((signal));
void __vector_2 (void)__attribute__((signal));
void __vector_3 (void)__attribute__((signal));

void __vector_1 (void)
{
    20d4:	1f 92       	push	r1
    20d6:	0f 92       	push	r0
    20d8:	0f b6       	in	r0, 0x3f	; 63
    20da:	0f 92       	push	r0
    20dc:	11 24       	eor	r1, r1
    20de:	2f 93       	push	r18
    20e0:	3f 93       	push	r19
    20e2:	4f 93       	push	r20
    20e4:	5f 93       	push	r21
    20e6:	6f 93       	push	r22
    20e8:	7f 93       	push	r23
    20ea:	8f 93       	push	r24
    20ec:	9f 93       	push	r25
    20ee:	af 93       	push	r26
    20f0:	bf 93       	push	r27
    20f2:	ef 93       	push	r30
    20f4:	ff 93       	push	r31
    20f6:	df 93       	push	r29
    20f8:	cf 93       	push	r28
    20fa:	cd b7       	in	r28, 0x3d	; 61
    20fc:	de b7       	in	r29, 0x3e	; 62
    if(pfun_ISRPointers[EXTI_INT0])
    20fe:	80 91 9a 00 	lds	r24, 0x009A
    2102:	90 91 9b 00 	lds	r25, 0x009B
    2106:	00 97       	sbiw	r24, 0x00	; 0
    2108:	49 f0       	breq	.+18     	; 0x211c <__vector_1+0x48>
    {
        pfun_ISRPointers[EXTI_INT0] (apvid_ISRParameters[EXTI_INT0]);
    210a:	e0 91 9a 00 	lds	r30, 0x009A
    210e:	f0 91 9b 00 	lds	r31, 0x009B
    2112:	80 91 a0 00 	lds	r24, 0x00A0
    2116:	90 91 a1 00 	lds	r25, 0x00A1
    211a:	09 95       	icall
    }
}
    211c:	cf 91       	pop	r28
    211e:	df 91       	pop	r29
    2120:	ff 91       	pop	r31
    2122:	ef 91       	pop	r30
    2124:	bf 91       	pop	r27
    2126:	af 91       	pop	r26
    2128:	9f 91       	pop	r25
    212a:	8f 91       	pop	r24
    212c:	7f 91       	pop	r23
    212e:	6f 91       	pop	r22
    2130:	5f 91       	pop	r21
    2132:	4f 91       	pop	r20
    2134:	3f 91       	pop	r19
    2136:	2f 91       	pop	r18
    2138:	0f 90       	pop	r0
    213a:	0f be       	out	0x3f, r0	; 63
    213c:	0f 90       	pop	r0
    213e:	1f 90       	pop	r1
    2140:	18 95       	reti

00002142 <__vector_2>:
//INT1
void __vector_2 (void)
{
    2142:	1f 92       	push	r1
    2144:	0f 92       	push	r0
    2146:	0f b6       	in	r0, 0x3f	; 63
    2148:	0f 92       	push	r0
    214a:	11 24       	eor	r1, r1
    214c:	2f 93       	push	r18
    214e:	3f 93       	push	r19
    2150:	4f 93       	push	r20
    2152:	5f 93       	push	r21
    2154:	6f 93       	push	r22
    2156:	7f 93       	push	r23
    2158:	8f 93       	push	r24
    215a:	9f 93       	push	r25
    215c:	af 93       	push	r26
    215e:	bf 93       	push	r27
    2160:	ef 93       	push	r30
    2162:	ff 93       	push	r31
    2164:	df 93       	push	r29
    2166:	cf 93       	push	r28
    2168:	cd b7       	in	r28, 0x3d	; 61
    216a:	de b7       	in	r29, 0x3e	; 62
    if(pfun_ISRPointers[EXTI_INT1])
    216c:	80 91 9c 00 	lds	r24, 0x009C
    2170:	90 91 9d 00 	lds	r25, 0x009D
    2174:	00 97       	sbiw	r24, 0x00	; 0
    2176:	49 f0       	breq	.+18     	; 0x218a <__vector_2+0x48>
    {
        pfun_ISRPointers[EXTI_INT1] (apvid_ISRParameters[EXTI_INT1]);
    2178:	e0 91 9c 00 	lds	r30, 0x009C
    217c:	f0 91 9d 00 	lds	r31, 0x009D
    2180:	80 91 a2 00 	lds	r24, 0x00A2
    2184:	90 91 a3 00 	lds	r25, 0x00A3
    2188:	09 95       	icall
    }
}
    218a:	cf 91       	pop	r28
    218c:	df 91       	pop	r29
    218e:	ff 91       	pop	r31
    2190:	ef 91       	pop	r30
    2192:	bf 91       	pop	r27
    2194:	af 91       	pop	r26
    2196:	9f 91       	pop	r25
    2198:	8f 91       	pop	r24
    219a:	7f 91       	pop	r23
    219c:	6f 91       	pop	r22
    219e:	5f 91       	pop	r21
    21a0:	4f 91       	pop	r20
    21a2:	3f 91       	pop	r19
    21a4:	2f 91       	pop	r18
    21a6:	0f 90       	pop	r0
    21a8:	0f be       	out	0x3f, r0	; 63
    21aa:	0f 90       	pop	r0
    21ac:	1f 90       	pop	r1
    21ae:	18 95       	reti

000021b0 <__vector_3>:
//INT2
void __vector_3 (void)
{
    21b0:	1f 92       	push	r1
    21b2:	0f 92       	push	r0
    21b4:	0f b6       	in	r0, 0x3f	; 63
    21b6:	0f 92       	push	r0
    21b8:	11 24       	eor	r1, r1
    21ba:	2f 93       	push	r18
    21bc:	3f 93       	push	r19
    21be:	4f 93       	push	r20
    21c0:	5f 93       	push	r21
    21c2:	6f 93       	push	r22
    21c4:	7f 93       	push	r23
    21c6:	8f 93       	push	r24
    21c8:	9f 93       	push	r25
    21ca:	af 93       	push	r26
    21cc:	bf 93       	push	r27
    21ce:	ef 93       	push	r30
    21d0:	ff 93       	push	r31
    21d2:	df 93       	push	r29
    21d4:	cf 93       	push	r28
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
    if(pfun_ISRPointers[EXTI_INT2])
    21da:	80 91 9e 00 	lds	r24, 0x009E
    21de:	90 91 9f 00 	lds	r25, 0x009F
    21e2:	00 97       	sbiw	r24, 0x00	; 0
    21e4:	39 f0       	breq	.+14     	; 0x21f4 <__vector_3+0x44>
    {
        pfun_ISRPointers[EXTI_INT2] (EXTI_INT2);
    21e6:	e0 91 9e 00 	lds	r30, 0x009E
    21ea:	f0 91 9f 00 	lds	r31, 0x009F
    21ee:	82 e0       	ldi	r24, 0x02	; 2
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	09 95       	icall
    }
    
}
    21f4:	cf 91       	pop	r28
    21f6:	df 91       	pop	r29
    21f8:	ff 91       	pop	r31
    21fa:	ef 91       	pop	r30
    21fc:	bf 91       	pop	r27
    21fe:	af 91       	pop	r26
    2200:	9f 91       	pop	r25
    2202:	8f 91       	pop	r24
    2204:	7f 91       	pop	r23
    2206:	6f 91       	pop	r22
    2208:	5f 91       	pop	r21
    220a:	4f 91       	pop	r20
    220c:	3f 91       	pop	r19
    220e:	2f 91       	pop	r18
    2210:	0f 90       	pop	r0
    2212:	0f be       	out	0x3f, r0	; 63
    2214:	0f 90       	pop	r0
    2216:	1f 90       	pop	r1
    2218:	18 95       	reti

0000221a <enu_SetMode>:


//Local functions' implementations

static ErrorState_t enu_SetMode(u8 Copy_u8_INTNumber, u8 Copy_u8_Mode)
{
    221a:	df 93       	push	r29
    221c:	cf 93       	push	r28
    221e:	00 d0       	rcall	.+0      	; 0x2220 <enu_SetMode+0x6>
    2220:	00 d0       	rcall	.+0      	; 0x2222 <enu_SetMode+0x8>
    2222:	0f 92       	push	r0
    2224:	cd b7       	in	r28, 0x3d	; 61
    2226:	de b7       	in	r29, 0x3e	; 62
    2228:	8a 83       	std	Y+2, r24	; 0x02
    222a:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_INTNumber)
    2230:	8a 81       	ldd	r24, Y+2	; 0x02
    2232:	28 2f       	mov	r18, r24
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	3d 83       	std	Y+5, r19	; 0x05
    2238:	2c 83       	std	Y+4, r18	; 0x04
    223a:	8c 81       	ldd	r24, Y+4	; 0x04
    223c:	9d 81       	ldd	r25, Y+5	; 0x05
    223e:	81 30       	cpi	r24, 0x01	; 1
    2240:	91 05       	cpc	r25, r1
    2242:	29 f1       	breq	.+74     	; 0x228e <enu_SetMode+0x74>
    2244:	2c 81       	ldd	r18, Y+4	; 0x04
    2246:	3d 81       	ldd	r19, Y+5	; 0x05
    2248:	22 30       	cpi	r18, 0x02	; 2
    224a:	31 05       	cpc	r19, r1
    224c:	d9 f1       	breq	.+118    	; 0x22c4 <enu_SetMode+0xaa>
    224e:	8c 81       	ldd	r24, Y+4	; 0x04
    2250:	9d 81       	ldd	r25, Y+5	; 0x05
    2252:	00 97       	sbiw	r24, 0x00	; 0
    2254:	09 f0       	breq	.+2      	; 0x2258 <enu_SetMode+0x3e>
    2256:	51 c0       	rjmp	.+162    	; 0x22fa <enu_SetMode+0xe0>
    {
        case EXTI_INT0:
        {   
            if (Copy_u8_Mode == EXTI_INT_MODE)
    2258:	8b 81       	ldd	r24, Y+3	; 0x03
    225a:	81 30       	cpi	r24, 0x01	; 1
    225c:	49 f4       	brne	.+18     	; 0x2270 <enu_SetMode+0x56>
            {
                GICR |= ( 1 << GICR_INT0);
    225e:	ab e5       	ldi	r26, 0x5B	; 91
    2260:	b0 e0       	ldi	r27, 0x00	; 0
    2262:	eb e5       	ldi	r30, 0x5B	; 91
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	80 81       	ld	r24, Z
    2268:	80 64       	ori	r24, 0x40	; 64
    226a:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    226c:	19 82       	std	Y+1, r1	; 0x01
    226e:	47 c0       	rjmp	.+142    	; 0x22fe <enu_SetMode+0xe4>
            }
            else if (Copy_u8_Mode == EXTI_POLLING_MODE)
    2270:	8b 81       	ldd	r24, Y+3	; 0x03
    2272:	88 23       	and	r24, r24
    2274:	49 f4       	brne	.+18     	; 0x2288 <enu_SetMode+0x6e>
            {
                GICR &= ~( 1 << GICR_INT0);
    2276:	ab e5       	ldi	r26, 0x5B	; 91
    2278:	b0 e0       	ldi	r27, 0x00	; 0
    227a:	eb e5       	ldi	r30, 0x5B	; 91
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	80 81       	ld	r24, Z
    2280:	8f 7b       	andi	r24, 0xBF	; 191
    2282:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    2284:	19 82       	std	Y+1, r1	; 0x01
    2286:	3b c0       	rjmp	.+118    	; 0x22fe <enu_SetMode+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2288:	82 e0       	ldi	r24, 0x02	; 2
    228a:	89 83       	std	Y+1, r24	; 0x01
    228c:	38 c0       	rjmp	.+112    	; 0x22fe <enu_SetMode+0xe4>
            break;
        }

        case EXTI_INT1:
        {
            if (Copy_u8_Mode == EXTI_INT_MODE)
    228e:	8b 81       	ldd	r24, Y+3	; 0x03
    2290:	81 30       	cpi	r24, 0x01	; 1
    2292:	49 f4       	brne	.+18     	; 0x22a6 <enu_SetMode+0x8c>
            {
                GICR |= ( 1 << GICR_INT1);
    2294:	ab e5       	ldi	r26, 0x5B	; 91
    2296:	b0 e0       	ldi	r27, 0x00	; 0
    2298:	eb e5       	ldi	r30, 0x5B	; 91
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	80 68       	ori	r24, 0x80	; 128
    22a0:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    22a2:	19 82       	std	Y+1, r1	; 0x01
    22a4:	2c c0       	rjmp	.+88     	; 0x22fe <enu_SetMode+0xe4>
            }
            else if (Copy_u8_Mode == EXTI_POLLING_MODE)
    22a6:	8b 81       	ldd	r24, Y+3	; 0x03
    22a8:	88 23       	and	r24, r24
    22aa:	49 f4       	brne	.+18     	; 0x22be <enu_SetMode+0xa4>
            {
                GICR &= ~( 1 << GICR_INT1);
    22ac:	ab e5       	ldi	r26, 0x5B	; 91
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	eb e5       	ldi	r30, 0x5B	; 91
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	80 81       	ld	r24, Z
    22b6:	8f 77       	andi	r24, 0x7F	; 127
    22b8:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    22ba:	19 82       	std	Y+1, r1	; 0x01
    22bc:	20 c0       	rjmp	.+64     	; 0x22fe <enu_SetMode+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    22be:	82 e0       	ldi	r24, 0x02	; 2
    22c0:	89 83       	std	Y+1, r24	; 0x01
    22c2:	1d c0       	rjmp	.+58     	; 0x22fe <enu_SetMode+0xe4>
            
            break;
        }
        case EXTI_INT2:
        {
            if (Copy_u8_Mode == EXTI_INT_MODE)
    22c4:	8b 81       	ldd	r24, Y+3	; 0x03
    22c6:	81 30       	cpi	r24, 0x01	; 1
    22c8:	49 f4       	brne	.+18     	; 0x22dc <enu_SetMode+0xc2>
            {
                GICR |= ( 1 << GICR_INT2);
    22ca:	ab e5       	ldi	r26, 0x5B	; 91
    22cc:	b0 e0       	ldi	r27, 0x00	; 0
    22ce:	eb e5       	ldi	r30, 0x5B	; 91
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	80 81       	ld	r24, Z
    22d4:	80 62       	ori	r24, 0x20	; 32
    22d6:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    22d8:	19 82       	std	Y+1, r1	; 0x01
    22da:	11 c0       	rjmp	.+34     	; 0x22fe <enu_SetMode+0xe4>
            }
            else if (Copy_u8_Mode == EXTI_POLLING_MODE)
    22dc:	8b 81       	ldd	r24, Y+3	; 0x03
    22de:	88 23       	and	r24, r24
    22e0:	49 f4       	brne	.+18     	; 0x22f4 <enu_SetMode+0xda>
            {
                GICR &= ~( 1 << GICR_INT2);
    22e2:	ab e5       	ldi	r26, 0x5B	; 91
    22e4:	b0 e0       	ldi	r27, 0x00	; 0
    22e6:	eb e5       	ldi	r30, 0x5B	; 91
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	80 81       	ld	r24, Z
    22ec:	8f 7d       	andi	r24, 0xDF	; 223
    22ee:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    22f0:	19 82       	std	Y+1, r1	; 0x01
    22f2:	05 c0       	rjmp	.+10     	; 0x22fe <enu_SetMode+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    22f4:	82 e0       	ldi	r24, 0x02	; 2
    22f6:	89 83       	std	Y+1, r24	; 0x01
    22f8:	02 c0       	rjmp	.+4      	; 0x22fe <enu_SetMode+0xe4>

            break;
        }
    
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    22fa:	82 e0       	ldi	r24, 0x02	; 2
    22fc:	89 83       	std	Y+1, r24	; 0x01
        break;
    }


    return Local_u8_ErrorFlag;    
    22fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2300:	0f 90       	pop	r0
    2302:	0f 90       	pop	r0
    2304:	0f 90       	pop	r0
    2306:	0f 90       	pop	r0
    2308:	0f 90       	pop	r0
    230a:	cf 91       	pop	r28
    230c:	df 91       	pop	r29
    230e:	08 95       	ret

00002310 <enu_SetSenseLevel>:

static ErrorState_t enu_SetSenseLevel(u8 Copy_u8_INTNumber, u8 Copy_u8_SenseLevel)
{
    2310:	df 93       	push	r29
    2312:	cf 93       	push	r28
    2314:	00 d0       	rcall	.+0      	; 0x2316 <enu_SetSenseLevel+0x6>
    2316:	00 d0       	rcall	.+0      	; 0x2318 <enu_SetSenseLevel+0x8>
    2318:	0f 92       	push	r0
    231a:	cd b7       	in	r28, 0x3d	; 61
    231c:	de b7       	in	r29, 0x3e	; 62
    231e:	8a 83       	std	Y+2, r24	; 0x02
    2320:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    2322:	81 e0       	ldi	r24, 0x01	; 1
    2324:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_INTNumber)
    2326:	8a 81       	ldd	r24, Y+2	; 0x02
    2328:	28 2f       	mov	r18, r24
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	3d 83       	std	Y+5, r19	; 0x05
    232e:	2c 83       	std	Y+4, r18	; 0x04
    2330:	8c 81       	ldd	r24, Y+4	; 0x04
    2332:	9d 81       	ldd	r25, Y+5	; 0x05
    2334:	81 30       	cpi	r24, 0x01	; 1
    2336:	91 05       	cpc	r25, r1
    2338:	e9 f1       	breq	.+122    	; 0x23b4 <enu_SetSenseLevel+0xa4>
    233a:	2c 81       	ldd	r18, Y+4	; 0x04
    233c:	3d 81       	ldd	r19, Y+5	; 0x05
    233e:	22 30       	cpi	r18, 0x02	; 2
    2340:	31 05       	cpc	r19, r1
    2342:	09 f4       	brne	.+2      	; 0x2346 <enu_SetSenseLevel+0x36>
    2344:	69 c0       	rjmp	.+210    	; 0x2418 <enu_SetSenseLevel+0x108>
    2346:	8c 81       	ldd	r24, Y+4	; 0x04
    2348:	9d 81       	ldd	r25, Y+5	; 0x05
    234a:	00 97       	sbiw	r24, 0x00	; 0
    234c:	09 f0       	breq	.+2      	; 0x2350 <enu_SetSenseLevel+0x40>
    234e:	7c c0       	rjmp	.+248    	; 0x2448 <enu_SetSenseLevel+0x138>
    {
    case EXTI_INT0:
    {   
        //Clearing both bits
        MCUCR &= ~( 3 << MCUCR_ISC00);
    2350:	a5 e5       	ldi	r26, 0x55	; 85
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	e5 e5       	ldi	r30, 0x55	; 85
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	80 81       	ld	r24, Z
    235a:	8c 7f       	andi	r24, 0xFC	; 252
    235c:	8c 93       	st	X, r24

        if(Copy_u8_SenseLevel == EXTI_LOW_LEVEL)
    235e:	8b 81       	ldd	r24, Y+3	; 0x03
    2360:	88 23       	and	r24, r24
    2362:	11 f4       	brne	.+4      	; 0x2368 <enu_SetSenseLevel+0x58>
        {
            //Bits already contain 00
            Local_u8_ErrorFlag = ES_OK;
    2364:	19 82       	std	Y+1, r1	; 0x01
    2366:	72 c0       	rjmp	.+228    	; 0x244c <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_LOGICAL_CHANGE)
    2368:	8b 81       	ldd	r24, Y+3	; 0x03
    236a:	81 30       	cpi	r24, 0x01	; 1
    236c:	49 f4       	brne	.+18     	; 0x2380 <enu_SetSenseLevel+0x70>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC00);
    236e:	a5 e5       	ldi	r26, 0x55	; 85
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	e5 e5       	ldi	r30, 0x55	; 85
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	80 81       	ld	r24, Z
    2378:	81 60       	ori	r24, 0x01	; 1
    237a:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    237c:	19 82       	std	Y+1, r1	; 0x01
    237e:	66 c0       	rjmp	.+204    	; 0x244c <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_FALLING_EDGE)
    2380:	8b 81       	ldd	r24, Y+3	; 0x03
    2382:	82 30       	cpi	r24, 0x02	; 2
    2384:	41 f4       	brne	.+16     	; 0x2396 <enu_SetSenseLevel+0x86>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC01);
    2386:	a5 e5       	ldi	r26, 0x55	; 85
    2388:	b0 e0       	ldi	r27, 0x00	; 0
    238a:	e5 e5       	ldi	r30, 0x55	; 85
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	80 81       	ld	r24, Z
    2390:	82 60       	ori	r24, 0x02	; 2
    2392:	8c 93       	st	X, r24
    2394:	5b c0       	rjmp	.+182    	; 0x244c <enu_SetSenseLevel+0x13c>

        }
        else if (Copy_u8_SenseLevel == EXTI_RISING_EDGE)
    2396:	8b 81       	ldd	r24, Y+3	; 0x03
    2398:	83 30       	cpi	r24, 0x03	; 3
    239a:	49 f4       	brne	.+18     	; 0x23ae <enu_SetSenseLevel+0x9e>
        {
            //Bits contain 11
            MCUCR |= ( 3 << MCUCR_ISC00);
    239c:	a5 e5       	ldi	r26, 0x55	; 85
    239e:	b0 e0       	ldi	r27, 0x00	; 0
    23a0:	e5 e5       	ldi	r30, 0x55	; 85
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	80 81       	ld	r24, Z
    23a6:	83 60       	ori	r24, 0x03	; 3
    23a8:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    23aa:	19 82       	std	Y+1, r1	; 0x01
    23ac:	4f c0       	rjmp	.+158    	; 0x244c <enu_SetSenseLevel+0x13c>
        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    23ae:	82 e0       	ldi	r24, 0x02	; 2
    23b0:	89 83       	std	Y+1, r24	; 0x01
    23b2:	4c c0       	rjmp	.+152    	; 0x244c <enu_SetSenseLevel+0x13c>
    }

    case EXTI_INT1:
    {
        //Clearing both bits
        MCUCR &= ~( 3 << MCUCR_ISC10);
    23b4:	a5 e5       	ldi	r26, 0x55	; 85
    23b6:	b0 e0       	ldi	r27, 0x00	; 0
    23b8:	e5 e5       	ldi	r30, 0x55	; 85
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	80 81       	ld	r24, Z
    23be:	83 7f       	andi	r24, 0xF3	; 243
    23c0:	8c 93       	st	X, r24

        if(Copy_u8_SenseLevel == EXTI_LOW_LEVEL)
    23c2:	8b 81       	ldd	r24, Y+3	; 0x03
    23c4:	88 23       	and	r24, r24
    23c6:	11 f4       	brne	.+4      	; 0x23cc <enu_SetSenseLevel+0xbc>
        {
            //Bits already contain 00
            Local_u8_ErrorFlag = ES_OK;
    23c8:	19 82       	std	Y+1, r1	; 0x01
    23ca:	40 c0       	rjmp	.+128    	; 0x244c <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_LOGICAL_CHANGE)
    23cc:	8b 81       	ldd	r24, Y+3	; 0x03
    23ce:	81 30       	cpi	r24, 0x01	; 1
    23d0:	49 f4       	brne	.+18     	; 0x23e4 <enu_SetSenseLevel+0xd4>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC10);
    23d2:	a5 e5       	ldi	r26, 0x55	; 85
    23d4:	b0 e0       	ldi	r27, 0x00	; 0
    23d6:	e5 e5       	ldi	r30, 0x55	; 85
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	80 81       	ld	r24, Z
    23dc:	84 60       	ori	r24, 0x04	; 4
    23de:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    23e0:	19 82       	std	Y+1, r1	; 0x01
    23e2:	34 c0       	rjmp	.+104    	; 0x244c <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_FALLING_EDGE)
    23e4:	8b 81       	ldd	r24, Y+3	; 0x03
    23e6:	82 30       	cpi	r24, 0x02	; 2
    23e8:	41 f4       	brne	.+16     	; 0x23fa <enu_SetSenseLevel+0xea>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC11);
    23ea:	a5 e5       	ldi	r26, 0x55	; 85
    23ec:	b0 e0       	ldi	r27, 0x00	; 0
    23ee:	e5 e5       	ldi	r30, 0x55	; 85
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	80 81       	ld	r24, Z
    23f4:	88 60       	ori	r24, 0x08	; 8
    23f6:	8c 93       	st	X, r24
    23f8:	29 c0       	rjmp	.+82     	; 0x244c <enu_SetSenseLevel+0x13c>

        }
        else if (Copy_u8_SenseLevel == EXTI_RISING_EDGE)
    23fa:	8b 81       	ldd	r24, Y+3	; 0x03
    23fc:	83 30       	cpi	r24, 0x03	; 3
    23fe:	49 f4       	brne	.+18     	; 0x2412 <enu_SetSenseLevel+0x102>
        {
            //Bits contain 11
            MCUCR |= ( 3 << MCUCR_ISC10);
    2400:	a5 e5       	ldi	r26, 0x55	; 85
    2402:	b0 e0       	ldi	r27, 0x00	; 0
    2404:	e5 e5       	ldi	r30, 0x55	; 85
    2406:	f0 e0       	ldi	r31, 0x00	; 0
    2408:	80 81       	ld	r24, Z
    240a:	8c 60       	ori	r24, 0x0C	; 12
    240c:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    240e:	19 82       	std	Y+1, r1	; 0x01
    2410:	1d c0       	rjmp	.+58     	; 0x244c <enu_SetSenseLevel+0x13c>
        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2412:	82 e0       	ldi	r24, 0x02	; 2
    2414:	89 83       	std	Y+1, r24	; 0x01
    2416:	1a c0       	rjmp	.+52     	; 0x244c <enu_SetSenseLevel+0x13c>
        break;
    }

    case EXTI_INT2:
    {
        if(Copy_u8_SenseLevel == EXTI_FALLING_EDGE)
    2418:	8b 81       	ldd	r24, Y+3	; 0x03
    241a:	82 30       	cpi	r24, 0x02	; 2
    241c:	49 f4       	brne	.+18     	; 0x2430 <enu_SetSenseLevel+0x120>
        {
            //Bit contains 0
            MCUCSR &= ~(1 << MCUCSR_ISC2);
    241e:	a4 e5       	ldi	r26, 0x54	; 84
    2420:	b0 e0       	ldi	r27, 0x00	; 0
    2422:	e4 e5       	ldi	r30, 0x54	; 84
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	80 81       	ld	r24, Z
    2428:	8f 7b       	andi	r24, 0xBF	; 191
    242a:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    242c:	19 82       	std	Y+1, r1	; 0x01
    242e:	0e c0       	rjmp	.+28     	; 0x244c <enu_SetSenseLevel+0x13c>
        }
        else if ( Copy_u8_SenseLevel == EXTI_RISING_EDGE)
    2430:	8b 81       	ldd	r24, Y+3	; 0x03
    2432:	83 30       	cpi	r24, 0x03	; 3
    2434:	59 f4       	brne	.+22     	; 0x244c <enu_SetSenseLevel+0x13c>
        {
            //Bit contains 1
            MCUCSR |= (1 << MCUCSR_ISC2);
    2436:	a4 e5       	ldi	r26, 0x54	; 84
    2438:	b0 e0       	ldi	r27, 0x00	; 0
    243a:	e4 e5       	ldi	r30, 0x54	; 84
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	80 81       	ld	r24, Z
    2440:	80 64       	ori	r24, 0x40	; 64
    2442:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
    2444:	19 82       	std	Y+1, r1	; 0x01
    2446:	02 c0       	rjmp	.+4      	; 0x244c <enu_SetSenseLevel+0x13c>
        break;
    }
    
    default:
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2448:	82 e0       	ldi	r24, 0x02	; 2
    244a:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    }


    return Local_u8_ErrorFlag;
    244c:	89 81       	ldd	r24, Y+1	; 0x01
}
    244e:	0f 90       	pop	r0
    2450:	0f 90       	pop	r0
    2452:	0f 90       	pop	r0
    2454:	0f 90       	pop	r0
    2456:	0f 90       	pop	r0
    2458:	cf 91       	pop	r28
    245a:	df 91       	pop	r29
    245c:	08 95       	ret

0000245e <enu_SetFlagValue>:

static ErrorState_t enu_SetFlagValue(u8 Copy_u8_INTNumber, u8 Copy_u8_Value)
{
    245e:	df 93       	push	r29
    2460:	cf 93       	push	r28
    2462:	00 d0       	rcall	.+0      	; 0x2464 <enu_SetFlagValue+0x6>
    2464:	00 d0       	rcall	.+0      	; 0x2466 <enu_SetFlagValue+0x8>
    2466:	0f 92       	push	r0
    2468:	cd b7       	in	r28, 0x3d	; 61
    246a:	de b7       	in	r29, 0x3e	; 62
    246c:	8a 83       	std	Y+2, r24	; 0x02
    246e:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_INTNumber)
    2474:	8a 81       	ldd	r24, Y+2	; 0x02
    2476:	28 2f       	mov	r18, r24
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	3d 83       	std	Y+5, r19	; 0x05
    247c:	2c 83       	std	Y+4, r18	; 0x04
    247e:	8c 81       	ldd	r24, Y+4	; 0x04
    2480:	9d 81       	ldd	r25, Y+5	; 0x05
    2482:	81 30       	cpi	r24, 0x01	; 1
    2484:	91 05       	cpc	r25, r1
    2486:	29 f1       	breq	.+74     	; 0x24d2 <enu_SetFlagValue+0x74>
    2488:	2c 81       	ldd	r18, Y+4	; 0x04
    248a:	3d 81       	ldd	r19, Y+5	; 0x05
    248c:	22 30       	cpi	r18, 0x02	; 2
    248e:	31 05       	cpc	r19, r1
    2490:	d9 f1       	breq	.+118    	; 0x2508 <enu_SetFlagValue+0xaa>
    2492:	8c 81       	ldd	r24, Y+4	; 0x04
    2494:	9d 81       	ldd	r25, Y+5	; 0x05
    2496:	00 97       	sbiw	r24, 0x00	; 0
    2498:	09 f0       	breq	.+2      	; 0x249c <enu_SetFlagValue+0x3e>
    249a:	51 c0       	rjmp	.+162    	; 0x253e <enu_SetFlagValue+0xe0>
    {
        case EXTI_INT0:
        {   
            if (Copy_u8_Value == EXTI_HIGH)
    249c:	8b 81       	ldd	r24, Y+3	; 0x03
    249e:	81 30       	cpi	r24, 0x01	; 1
    24a0:	49 f4       	brne	.+18     	; 0x24b4 <enu_SetFlagValue+0x56>
            {
                GIFR |= ( 1 << GIFR_INTF0);
    24a2:	aa e5       	ldi	r26, 0x5A	; 90
    24a4:	b0 e0       	ldi	r27, 0x00	; 0
    24a6:	ea e5       	ldi	r30, 0x5A	; 90
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	80 81       	ld	r24, Z
    24ac:	80 64       	ori	r24, 0x40	; 64
    24ae:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    24b0:	19 82       	std	Y+1, r1	; 0x01
    24b2:	47 c0       	rjmp	.+142    	; 0x2542 <enu_SetFlagValue+0xe4>
            }
            else if (Copy_u8_Value == EXTI_LOW)
    24b4:	8b 81       	ldd	r24, Y+3	; 0x03
    24b6:	88 23       	and	r24, r24
    24b8:	49 f4       	brne	.+18     	; 0x24cc <enu_SetFlagValue+0x6e>
            {
                GIFR &= ~( 1 << GIFR_INTF0);
    24ba:	aa e5       	ldi	r26, 0x5A	; 90
    24bc:	b0 e0       	ldi	r27, 0x00	; 0
    24be:	ea e5       	ldi	r30, 0x5A	; 90
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	80 81       	ld	r24, Z
    24c4:	8f 7b       	andi	r24, 0xBF	; 191
    24c6:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    24c8:	19 82       	std	Y+1, r1	; 0x01
    24ca:	3b c0       	rjmp	.+118    	; 0x2542 <enu_SetFlagValue+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    24cc:	82 e0       	ldi	r24, 0x02	; 2
    24ce:	89 83       	std	Y+1, r24	; 0x01
    24d0:	38 c0       	rjmp	.+112    	; 0x2542 <enu_SetFlagValue+0xe4>
            break;
        }

        case EXTI_INT1:
        {
            if (Copy_u8_Value == EXTI_HIGH)
    24d2:	8b 81       	ldd	r24, Y+3	; 0x03
    24d4:	81 30       	cpi	r24, 0x01	; 1
    24d6:	49 f4       	brne	.+18     	; 0x24ea <enu_SetFlagValue+0x8c>
            {
                GIFR |= ( 1 << GIFR_INTF1);
    24d8:	aa e5       	ldi	r26, 0x5A	; 90
    24da:	b0 e0       	ldi	r27, 0x00	; 0
    24dc:	ea e5       	ldi	r30, 0x5A	; 90
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	80 81       	ld	r24, Z
    24e2:	80 68       	ori	r24, 0x80	; 128
    24e4:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    24e6:	19 82       	std	Y+1, r1	; 0x01
    24e8:	2c c0       	rjmp	.+88     	; 0x2542 <enu_SetFlagValue+0xe4>
            }
            else if (Copy_u8_Value == EXTI_LOW)
    24ea:	8b 81       	ldd	r24, Y+3	; 0x03
    24ec:	88 23       	and	r24, r24
    24ee:	49 f4       	brne	.+18     	; 0x2502 <enu_SetFlagValue+0xa4>
            {
                GIFR &= ~( 1 << GIFR_INTF1);
    24f0:	aa e5       	ldi	r26, 0x5A	; 90
    24f2:	b0 e0       	ldi	r27, 0x00	; 0
    24f4:	ea e5       	ldi	r30, 0x5A	; 90
    24f6:	f0 e0       	ldi	r31, 0x00	; 0
    24f8:	80 81       	ld	r24, Z
    24fa:	8f 77       	andi	r24, 0x7F	; 127
    24fc:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    24fe:	19 82       	std	Y+1, r1	; 0x01
    2500:	20 c0       	rjmp	.+64     	; 0x2542 <enu_SetFlagValue+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2502:	82 e0       	ldi	r24, 0x02	; 2
    2504:	89 83       	std	Y+1, r24	; 0x01
    2506:	1d c0       	rjmp	.+58     	; 0x2542 <enu_SetFlagValue+0xe4>
            
            break;
        }
        case EXTI_INT2:
        {
            if (Copy_u8_Value == EXTI_HIGH)
    2508:	8b 81       	ldd	r24, Y+3	; 0x03
    250a:	81 30       	cpi	r24, 0x01	; 1
    250c:	49 f4       	brne	.+18     	; 0x2520 <enu_SetFlagValue+0xc2>
            {
                GIFR |= ( 1 << GIFR_INTF2);
    250e:	aa e5       	ldi	r26, 0x5A	; 90
    2510:	b0 e0       	ldi	r27, 0x00	; 0
    2512:	ea e5       	ldi	r30, 0x5A	; 90
    2514:	f0 e0       	ldi	r31, 0x00	; 0
    2516:	80 81       	ld	r24, Z
    2518:	80 62       	ori	r24, 0x20	; 32
    251a:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
    251c:	19 82       	std	Y+1, r1	; 0x01
    251e:	11 c0       	rjmp	.+34     	; 0x2542 <enu_SetFlagValue+0xe4>
            }
            else if (Copy_u8_Value == EXTI_LOW)
    2520:	8b 81       	ldd	r24, Y+3	; 0x03
    2522:	88 23       	and	r24, r24
    2524:	49 f4       	brne	.+18     	; 0x2538 <enu_SetFlagValue+0xda>
            {
                GIFR &= ~( 1 << GIFR_INTF2);
    2526:	aa e5       	ldi	r26, 0x5A	; 90
    2528:	b0 e0       	ldi	r27, 0x00	; 0
    252a:	ea e5       	ldi	r30, 0x5A	; 90
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	80 81       	ld	r24, Z
    2530:	8f 7d       	andi	r24, 0xDF	; 223
    2532:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
    2534:	19 82       	std	Y+1, r1	; 0x01
    2536:	05 c0       	rjmp	.+10     	; 0x2542 <enu_SetFlagValue+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2538:	82 e0       	ldi	r24, 0x02	; 2
    253a:	89 83       	std	Y+1, r24	; 0x01
    253c:	02 c0       	rjmp	.+4      	; 0x2542 <enu_SetFlagValue+0xe4>

            break;
        }
    
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    253e:	82 e0       	ldi	r24, 0x02	; 2
    2540:	89 83       	std	Y+1, r24	; 0x01
        break;
    }


    return Local_u8_ErrorFlag;     
    2542:	89 81       	ldd	r24, Y+1	; 0x01
    2544:	0f 90       	pop	r0
    2546:	0f 90       	pop	r0
    2548:	0f 90       	pop	r0
    254a:	0f 90       	pop	r0
    254c:	0f 90       	pop	r0
    254e:	cf 91       	pop	r28
    2550:	df 91       	pop	r29
    2552:	08 95       	ret

00002554 <DIO_enu_Initialization>:
#include "DIO_Private.h"


//Functions' implementation
extern ErrorState_t DIO_enu_Initialization(void)
{
    2554:	df 93       	push	r29
    2556:	cf 93       	push	r28
    2558:	0f 92       	push	r0
    255a:	cd b7       	in	r28, 0x3d	; 61
    255c:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	89 83       	std	Y+1, r24	; 0x01


    Local_u8_ErrorFlag = ES_OK;
    2562:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    2564:	89 81       	ldd	r24, Y+1	; 0x01
}
    2566:	0f 90       	pop	r0
    2568:	cf 91       	pop	r28
    256a:	df 91       	pop	r29
    256c:	08 95       	ret

0000256e <DIO_enu_SetPinDiretion>:

extern ErrorState_t DIO_enu_SetPinDiretion(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinDirection)
{
    256e:	df 93       	push	r29
    2570:	cf 93       	push	r28
    2572:	00 d0       	rcall	.+0      	; 0x2574 <DIO_enu_SetPinDiretion+0x6>
    2574:	00 d0       	rcall	.+0      	; 0x2576 <DIO_enu_SetPinDiretion+0x8>
    2576:	00 d0       	rcall	.+0      	; 0x2578 <DIO_enu_SetPinDiretion+0xa>
    2578:	cd b7       	in	r28, 0x3d	; 61
    257a:	de b7       	in	r29, 0x3e	; 62
    257c:	8a 83       	std	Y+2, r24	; 0x02
    257e:	6b 83       	std	Y+3, r22	; 0x03
    2580:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7) && (Copy_u8_PinDirection <= DIO_PIN_WRITE) )
    2586:	8a 81       	ldd	r24, Y+2	; 0x02
    2588:	84 30       	cpi	r24, 0x04	; 4
    258a:	08 f0       	brcs	.+2      	; 0x258e <DIO_enu_SetPinDiretion+0x20>
    258c:	d0 c0       	rjmp	.+416    	; 0x272e <DIO_enu_SetPinDiretion+0x1c0>
    258e:	8b 81       	ldd	r24, Y+3	; 0x03
    2590:	88 30       	cpi	r24, 0x08	; 8
    2592:	08 f0       	brcs	.+2      	; 0x2596 <DIO_enu_SetPinDiretion+0x28>
    2594:	cc c0       	rjmp	.+408    	; 0x272e <DIO_enu_SetPinDiretion+0x1c0>
    2596:	8c 81       	ldd	r24, Y+4	; 0x04
    2598:	82 30       	cpi	r24, 0x02	; 2
    259a:	08 f0       	brcs	.+2      	; 0x259e <DIO_enu_SetPinDiretion+0x30>
    259c:	c8 c0       	rjmp	.+400    	; 0x272e <DIO_enu_SetPinDiretion+0x1c0>
    {
        switch (Copy_u8_PinGroup)
    259e:	8a 81       	ldd	r24, Y+2	; 0x02
    25a0:	28 2f       	mov	r18, r24
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	3e 83       	std	Y+6, r19	; 0x06
    25a6:	2d 83       	std	Y+5, r18	; 0x05
    25a8:	6d 81       	ldd	r22, Y+5	; 0x05
    25aa:	7e 81       	ldd	r23, Y+6	; 0x06
    25ac:	61 30       	cpi	r22, 0x01	; 1
    25ae:	71 05       	cpc	r23, r1
    25b0:	09 f4       	brne	.+2      	; 0x25b4 <DIO_enu_SetPinDiretion+0x46>
    25b2:	41 c0       	rjmp	.+130    	; 0x2636 <DIO_enu_SetPinDiretion+0xc8>
    25b4:	8d 81       	ldd	r24, Y+5	; 0x05
    25b6:	9e 81       	ldd	r25, Y+6	; 0x06
    25b8:	82 30       	cpi	r24, 0x02	; 2
    25ba:	91 05       	cpc	r25, r1
    25bc:	34 f4       	brge	.+12     	; 0x25ca <DIO_enu_SetPinDiretion+0x5c>
    25be:	2d 81       	ldd	r18, Y+5	; 0x05
    25c0:	3e 81       	ldd	r19, Y+6	; 0x06
    25c2:	21 15       	cp	r18, r1
    25c4:	31 05       	cpc	r19, r1
    25c6:	71 f0       	breq	.+28     	; 0x25e4 <DIO_enu_SetPinDiretion+0x76>
    25c8:	b0 c0       	rjmp	.+352    	; 0x272a <DIO_enu_SetPinDiretion+0x1bc>
    25ca:	6d 81       	ldd	r22, Y+5	; 0x05
    25cc:	7e 81       	ldd	r23, Y+6	; 0x06
    25ce:	62 30       	cpi	r22, 0x02	; 2
    25d0:	71 05       	cpc	r23, r1
    25d2:	09 f4       	brne	.+2      	; 0x25d6 <DIO_enu_SetPinDiretion+0x68>
    25d4:	59 c0       	rjmp	.+178    	; 0x2688 <DIO_enu_SetPinDiretion+0x11a>
    25d6:	8d 81       	ldd	r24, Y+5	; 0x05
    25d8:	9e 81       	ldd	r25, Y+6	; 0x06
    25da:	83 30       	cpi	r24, 0x03	; 3
    25dc:	91 05       	cpc	r25, r1
    25de:	09 f4       	brne	.+2      	; 0x25e2 <DIO_enu_SetPinDiretion+0x74>
    25e0:	7c c0       	rjmp	.+248    	; 0x26da <DIO_enu_SetPinDiretion+0x16c>
    25e2:	a3 c0       	rjmp	.+326    	; 0x272a <DIO_enu_SetPinDiretion+0x1bc>
        {
            case DIO_PIN_GROUP_A:

            //Masking the bit
            DIO_DDRA &= ~( 1 << Copy_u8_PinNumber );
    25e4:	aa e3       	ldi	r26, 0x3A	; 58
    25e6:	b0 e0       	ldi	r27, 0x00	; 0
    25e8:	ea e3       	ldi	r30, 0x3A	; 58
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	80 81       	ld	r24, Z
    25ee:	48 2f       	mov	r20, r24
    25f0:	8b 81       	ldd	r24, Y+3	; 0x03
    25f2:	28 2f       	mov	r18, r24
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	02 c0       	rjmp	.+4      	; 0x2600 <DIO_enu_SetPinDiretion+0x92>
    25fc:	88 0f       	add	r24, r24
    25fe:	99 1f       	adc	r25, r25
    2600:	2a 95       	dec	r18
    2602:	e2 f7       	brpl	.-8      	; 0x25fc <DIO_enu_SetPinDiretion+0x8e>
    2604:	80 95       	com	r24
    2606:	84 23       	and	r24, r20
    2608:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRA |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
    260a:	aa e3       	ldi	r26, 0x3A	; 58
    260c:	b0 e0       	ldi	r27, 0x00	; 0
    260e:	ea e3       	ldi	r30, 0x3A	; 58
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	80 81       	ld	r24, Z
    2614:	48 2f       	mov	r20, r24
    2616:	8c 81       	ldd	r24, Y+4	; 0x04
    2618:	28 2f       	mov	r18, r24
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	8b 81       	ldd	r24, Y+3	; 0x03
    261e:	88 2f       	mov	r24, r24
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	b9 01       	movw	r22, r18
    2624:	02 c0       	rjmp	.+4      	; 0x262a <DIO_enu_SetPinDiretion+0xbc>
    2626:	66 0f       	add	r22, r22
    2628:	77 1f       	adc	r23, r23
    262a:	8a 95       	dec	r24
    262c:	e2 f7       	brpl	.-8      	; 0x2626 <DIO_enu_SetPinDiretion+0xb8>
    262e:	cb 01       	movw	r24, r22
    2630:	84 2b       	or	r24, r20
    2632:	8c 93       	st	X, r24
    2634:	7a c0       	rjmp	.+244    	; 0x272a <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_B:
            //Masking the bit
            DIO_DDRB &= ~( 1 << Copy_u8_PinNumber);
    2636:	a7 e3       	ldi	r26, 0x37	; 55
    2638:	b0 e0       	ldi	r27, 0x00	; 0
    263a:	e7 e3       	ldi	r30, 0x37	; 55
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	80 81       	ld	r24, Z
    2640:	48 2f       	mov	r20, r24
    2642:	8b 81       	ldd	r24, Y+3	; 0x03
    2644:	28 2f       	mov	r18, r24
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	02 c0       	rjmp	.+4      	; 0x2652 <DIO_enu_SetPinDiretion+0xe4>
    264e:	88 0f       	add	r24, r24
    2650:	99 1f       	adc	r25, r25
    2652:	2a 95       	dec	r18
    2654:	e2 f7       	brpl	.-8      	; 0x264e <DIO_enu_SetPinDiretion+0xe0>
    2656:	80 95       	com	r24
    2658:	84 23       	and	r24, r20
    265a:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRB |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
    265c:	a7 e3       	ldi	r26, 0x37	; 55
    265e:	b0 e0       	ldi	r27, 0x00	; 0
    2660:	e7 e3       	ldi	r30, 0x37	; 55
    2662:	f0 e0       	ldi	r31, 0x00	; 0
    2664:	80 81       	ld	r24, Z
    2666:	48 2f       	mov	r20, r24
    2668:	8c 81       	ldd	r24, Y+4	; 0x04
    266a:	28 2f       	mov	r18, r24
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	8b 81       	ldd	r24, Y+3	; 0x03
    2670:	88 2f       	mov	r24, r24
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	b9 01       	movw	r22, r18
    2676:	02 c0       	rjmp	.+4      	; 0x267c <DIO_enu_SetPinDiretion+0x10e>
    2678:	66 0f       	add	r22, r22
    267a:	77 1f       	adc	r23, r23
    267c:	8a 95       	dec	r24
    267e:	e2 f7       	brpl	.-8      	; 0x2678 <DIO_enu_SetPinDiretion+0x10a>
    2680:	cb 01       	movw	r24, r22
    2682:	84 2b       	or	r24, r20
    2684:	8c 93       	st	X, r24
    2686:	51 c0       	rjmp	.+162    	; 0x272a <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_C:
            //Masking the bit
            DIO_DDRC &= ~( 1 << Copy_u8_PinNumber);
    2688:	a4 e3       	ldi	r26, 0x34	; 52
    268a:	b0 e0       	ldi	r27, 0x00	; 0
    268c:	e4 e3       	ldi	r30, 0x34	; 52
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	80 81       	ld	r24, Z
    2692:	48 2f       	mov	r20, r24
    2694:	8b 81       	ldd	r24, Y+3	; 0x03
    2696:	28 2f       	mov	r18, r24
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	02 c0       	rjmp	.+4      	; 0x26a4 <DIO_enu_SetPinDiretion+0x136>
    26a0:	88 0f       	add	r24, r24
    26a2:	99 1f       	adc	r25, r25
    26a4:	2a 95       	dec	r18
    26a6:	e2 f7       	brpl	.-8      	; 0x26a0 <DIO_enu_SetPinDiretion+0x132>
    26a8:	80 95       	com	r24
    26aa:	84 23       	and	r24, r20
    26ac:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRC |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
    26ae:	a4 e3       	ldi	r26, 0x34	; 52
    26b0:	b0 e0       	ldi	r27, 0x00	; 0
    26b2:	e4 e3       	ldi	r30, 0x34	; 52
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	80 81       	ld	r24, Z
    26b8:	48 2f       	mov	r20, r24
    26ba:	8c 81       	ldd	r24, Y+4	; 0x04
    26bc:	28 2f       	mov	r18, r24
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	8b 81       	ldd	r24, Y+3	; 0x03
    26c2:	88 2f       	mov	r24, r24
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	b9 01       	movw	r22, r18
    26c8:	02 c0       	rjmp	.+4      	; 0x26ce <DIO_enu_SetPinDiretion+0x160>
    26ca:	66 0f       	add	r22, r22
    26cc:	77 1f       	adc	r23, r23
    26ce:	8a 95       	dec	r24
    26d0:	e2 f7       	brpl	.-8      	; 0x26ca <DIO_enu_SetPinDiretion+0x15c>
    26d2:	cb 01       	movw	r24, r22
    26d4:	84 2b       	or	r24, r20
    26d6:	8c 93       	st	X, r24
    26d8:	28 c0       	rjmp	.+80     	; 0x272a <DIO_enu_SetPinDiretion+0x1bc>
            break;

            case DIO_PIN_GROUP_D:
            //Masking the bit
            DIO_DDRD &= ~( 1 << Copy_u8_PinNumber);
    26da:	a1 e3       	ldi	r26, 0x31	; 49
    26dc:	b0 e0       	ldi	r27, 0x00	; 0
    26de:	e1 e3       	ldi	r30, 0x31	; 49
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	80 81       	ld	r24, Z
    26e4:	48 2f       	mov	r20, r24
    26e6:	8b 81       	ldd	r24, Y+3	; 0x03
    26e8:	28 2f       	mov	r18, r24
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	02 c0       	rjmp	.+4      	; 0x26f6 <DIO_enu_SetPinDiretion+0x188>
    26f2:	88 0f       	add	r24, r24
    26f4:	99 1f       	adc	r25, r25
    26f6:	2a 95       	dec	r18
    26f8:	e2 f7       	brpl	.-8      	; 0x26f2 <DIO_enu_SetPinDiretion+0x184>
    26fa:	80 95       	com	r24
    26fc:	84 23       	and	r24, r20
    26fe:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRD |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
    2700:	a1 e3       	ldi	r26, 0x31	; 49
    2702:	b0 e0       	ldi	r27, 0x00	; 0
    2704:	e1 e3       	ldi	r30, 0x31	; 49
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	80 81       	ld	r24, Z
    270a:	48 2f       	mov	r20, r24
    270c:	8c 81       	ldd	r24, Y+4	; 0x04
    270e:	28 2f       	mov	r18, r24
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	8b 81       	ldd	r24, Y+3	; 0x03
    2714:	88 2f       	mov	r24, r24
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	b9 01       	movw	r22, r18
    271a:	02 c0       	rjmp	.+4      	; 0x2720 <DIO_enu_SetPinDiretion+0x1b2>
    271c:	66 0f       	add	r22, r22
    271e:	77 1f       	adc	r23, r23
    2720:	8a 95       	dec	r24
    2722:	e2 f7       	brpl	.-8      	; 0x271c <DIO_enu_SetPinDiretion+0x1ae>
    2724:	cb 01       	movw	r24, r22
    2726:	84 2b       	or	r24, r20
    2728:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    272a:	19 82       	std	Y+1, r1	; 0x01
    272c:	02 c0       	rjmp	.+4      	; 0x2732 <DIO_enu_SetPinDiretion+0x1c4>

    }
    else
    {
        Local_u8_ErrorFlag =ES_OUT_OF_RANGE;
    272e:	82 e0       	ldi	r24, 0x02	; 2
    2730:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    2732:	89 81       	ldd	r24, Y+1	; 0x01
}
    2734:	26 96       	adiw	r28, 0x06	; 6
    2736:	0f b6       	in	r0, 0x3f	; 63
    2738:	f8 94       	cli
    273a:	de bf       	out	0x3e, r29	; 62
    273c:	0f be       	out	0x3f, r0	; 63
    273e:	cd bf       	out	0x3d, r28	; 61
    2740:	cf 91       	pop	r28
    2742:	df 91       	pop	r29
    2744:	08 95       	ret

00002746 <DIO_enu_SetPinState>:

extern ErrorState_t DIO_enu_SetPinState(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinState)
{
    2746:	df 93       	push	r29
    2748:	cf 93       	push	r28
    274a:	00 d0       	rcall	.+0      	; 0x274c <DIO_enu_SetPinState+0x6>
    274c:	00 d0       	rcall	.+0      	; 0x274e <DIO_enu_SetPinState+0x8>
    274e:	00 d0       	rcall	.+0      	; 0x2750 <DIO_enu_SetPinState+0xa>
    2750:	cd b7       	in	r28, 0x3d	; 61
    2752:	de b7       	in	r29, 0x3e	; 62
    2754:	8a 83       	std	Y+2, r24	; 0x02
    2756:	6b 83       	std	Y+3, r22	; 0x03
    2758:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7) && (Copy_u8_PinState <= DIO_PULL_UP))
    275e:	8a 81       	ldd	r24, Y+2	; 0x02
    2760:	84 30       	cpi	r24, 0x04	; 4
    2762:	08 f0       	brcs	.+2      	; 0x2766 <DIO_enu_SetPinState+0x20>
    2764:	d0 c0       	rjmp	.+416    	; 0x2906 <DIO_enu_SetPinState+0x1c0>
    2766:	8b 81       	ldd	r24, Y+3	; 0x03
    2768:	88 30       	cpi	r24, 0x08	; 8
    276a:	08 f0       	brcs	.+2      	; 0x276e <DIO_enu_SetPinState+0x28>
    276c:	cc c0       	rjmp	.+408    	; 0x2906 <DIO_enu_SetPinState+0x1c0>
    276e:	8c 81       	ldd	r24, Y+4	; 0x04
    2770:	82 30       	cpi	r24, 0x02	; 2
    2772:	08 f0       	brcs	.+2      	; 0x2776 <DIO_enu_SetPinState+0x30>
    2774:	c8 c0       	rjmp	.+400    	; 0x2906 <DIO_enu_SetPinState+0x1c0>
    {
        switch (Copy_u8_PinGroup)
    2776:	8a 81       	ldd	r24, Y+2	; 0x02
    2778:	28 2f       	mov	r18, r24
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	3e 83       	std	Y+6, r19	; 0x06
    277e:	2d 83       	std	Y+5, r18	; 0x05
    2780:	6d 81       	ldd	r22, Y+5	; 0x05
    2782:	7e 81       	ldd	r23, Y+6	; 0x06
    2784:	61 30       	cpi	r22, 0x01	; 1
    2786:	71 05       	cpc	r23, r1
    2788:	09 f4       	brne	.+2      	; 0x278c <DIO_enu_SetPinState+0x46>
    278a:	41 c0       	rjmp	.+130    	; 0x280e <DIO_enu_SetPinState+0xc8>
    278c:	8d 81       	ldd	r24, Y+5	; 0x05
    278e:	9e 81       	ldd	r25, Y+6	; 0x06
    2790:	82 30       	cpi	r24, 0x02	; 2
    2792:	91 05       	cpc	r25, r1
    2794:	34 f4       	brge	.+12     	; 0x27a2 <DIO_enu_SetPinState+0x5c>
    2796:	2d 81       	ldd	r18, Y+5	; 0x05
    2798:	3e 81       	ldd	r19, Y+6	; 0x06
    279a:	21 15       	cp	r18, r1
    279c:	31 05       	cpc	r19, r1
    279e:	71 f0       	breq	.+28     	; 0x27bc <DIO_enu_SetPinState+0x76>
    27a0:	b0 c0       	rjmp	.+352    	; 0x2902 <DIO_enu_SetPinState+0x1bc>
    27a2:	6d 81       	ldd	r22, Y+5	; 0x05
    27a4:	7e 81       	ldd	r23, Y+6	; 0x06
    27a6:	62 30       	cpi	r22, 0x02	; 2
    27a8:	71 05       	cpc	r23, r1
    27aa:	09 f4       	brne	.+2      	; 0x27ae <DIO_enu_SetPinState+0x68>
    27ac:	59 c0       	rjmp	.+178    	; 0x2860 <DIO_enu_SetPinState+0x11a>
    27ae:	8d 81       	ldd	r24, Y+5	; 0x05
    27b0:	9e 81       	ldd	r25, Y+6	; 0x06
    27b2:	83 30       	cpi	r24, 0x03	; 3
    27b4:	91 05       	cpc	r25, r1
    27b6:	09 f4       	brne	.+2      	; 0x27ba <DIO_enu_SetPinState+0x74>
    27b8:	7c c0       	rjmp	.+248    	; 0x28b2 <DIO_enu_SetPinState+0x16c>
    27ba:	a3 c0       	rjmp	.+326    	; 0x2902 <DIO_enu_SetPinState+0x1bc>
        {
            case DIO_PIN_GROUP_A:
            DIO_PORTA &= ~( 1 << Copy_u8_PinNumber);
    27bc:	ab e3       	ldi	r26, 0x3B	; 59
    27be:	b0 e0       	ldi	r27, 0x00	; 0
    27c0:	eb e3       	ldi	r30, 0x3B	; 59
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	80 81       	ld	r24, Z
    27c6:	48 2f       	mov	r20, r24
    27c8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ca:	28 2f       	mov	r18, r24
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	81 e0       	ldi	r24, 0x01	; 1
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	02 c0       	rjmp	.+4      	; 0x27d8 <DIO_enu_SetPinState+0x92>
    27d4:	88 0f       	add	r24, r24
    27d6:	99 1f       	adc	r25, r25
    27d8:	2a 95       	dec	r18
    27da:	e2 f7       	brpl	.-8      	; 0x27d4 <DIO_enu_SetPinState+0x8e>
    27dc:	80 95       	com	r24
    27de:	84 23       	and	r24, r20
    27e0:	8c 93       	st	X, r24
            DIO_PORTA |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    27e2:	ab e3       	ldi	r26, 0x3B	; 59
    27e4:	b0 e0       	ldi	r27, 0x00	; 0
    27e6:	eb e3       	ldi	r30, 0x3B	; 59
    27e8:	f0 e0       	ldi	r31, 0x00	; 0
    27ea:	80 81       	ld	r24, Z
    27ec:	48 2f       	mov	r20, r24
    27ee:	8c 81       	ldd	r24, Y+4	; 0x04
    27f0:	28 2f       	mov	r18, r24
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	8b 81       	ldd	r24, Y+3	; 0x03
    27f6:	88 2f       	mov	r24, r24
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	b9 01       	movw	r22, r18
    27fc:	02 c0       	rjmp	.+4      	; 0x2802 <DIO_enu_SetPinState+0xbc>
    27fe:	66 0f       	add	r22, r22
    2800:	77 1f       	adc	r23, r23
    2802:	8a 95       	dec	r24
    2804:	e2 f7       	brpl	.-8      	; 0x27fe <DIO_enu_SetPinState+0xb8>
    2806:	cb 01       	movw	r24, r22
    2808:	84 2b       	or	r24, r20
    280a:	8c 93       	st	X, r24
    280c:	7a c0       	rjmp	.+244    	; 0x2902 <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_B:
            DIO_PORTB &= ~( 1 << Copy_u8_PinNumber);
    280e:	a8 e3       	ldi	r26, 0x38	; 56
    2810:	b0 e0       	ldi	r27, 0x00	; 0
    2812:	e8 e3       	ldi	r30, 0x38	; 56
    2814:	f0 e0       	ldi	r31, 0x00	; 0
    2816:	80 81       	ld	r24, Z
    2818:	48 2f       	mov	r20, r24
    281a:	8b 81       	ldd	r24, Y+3	; 0x03
    281c:	28 2f       	mov	r18, r24
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	02 c0       	rjmp	.+4      	; 0x282a <DIO_enu_SetPinState+0xe4>
    2826:	88 0f       	add	r24, r24
    2828:	99 1f       	adc	r25, r25
    282a:	2a 95       	dec	r18
    282c:	e2 f7       	brpl	.-8      	; 0x2826 <DIO_enu_SetPinState+0xe0>
    282e:	80 95       	com	r24
    2830:	84 23       	and	r24, r20
    2832:	8c 93       	st	X, r24
            DIO_PORTB |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    2834:	a8 e3       	ldi	r26, 0x38	; 56
    2836:	b0 e0       	ldi	r27, 0x00	; 0
    2838:	e8 e3       	ldi	r30, 0x38	; 56
    283a:	f0 e0       	ldi	r31, 0x00	; 0
    283c:	80 81       	ld	r24, Z
    283e:	48 2f       	mov	r20, r24
    2840:	8c 81       	ldd	r24, Y+4	; 0x04
    2842:	28 2f       	mov	r18, r24
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	8b 81       	ldd	r24, Y+3	; 0x03
    2848:	88 2f       	mov	r24, r24
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	b9 01       	movw	r22, r18
    284e:	02 c0       	rjmp	.+4      	; 0x2854 <DIO_enu_SetPinState+0x10e>
    2850:	66 0f       	add	r22, r22
    2852:	77 1f       	adc	r23, r23
    2854:	8a 95       	dec	r24
    2856:	e2 f7       	brpl	.-8      	; 0x2850 <DIO_enu_SetPinState+0x10a>
    2858:	cb 01       	movw	r24, r22
    285a:	84 2b       	or	r24, r20
    285c:	8c 93       	st	X, r24
    285e:	51 c0       	rjmp	.+162    	; 0x2902 <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_C:
            DIO_PORTC &= ~( 1 << Copy_u8_PinNumber);
    2860:	a5 e3       	ldi	r26, 0x35	; 53
    2862:	b0 e0       	ldi	r27, 0x00	; 0
    2864:	e5 e3       	ldi	r30, 0x35	; 53
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	80 81       	ld	r24, Z
    286a:	48 2f       	mov	r20, r24
    286c:	8b 81       	ldd	r24, Y+3	; 0x03
    286e:	28 2f       	mov	r18, r24
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	02 c0       	rjmp	.+4      	; 0x287c <DIO_enu_SetPinState+0x136>
    2878:	88 0f       	add	r24, r24
    287a:	99 1f       	adc	r25, r25
    287c:	2a 95       	dec	r18
    287e:	e2 f7       	brpl	.-8      	; 0x2878 <DIO_enu_SetPinState+0x132>
    2880:	80 95       	com	r24
    2882:	84 23       	and	r24, r20
    2884:	8c 93       	st	X, r24
            DIO_PORTC |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    2886:	a5 e3       	ldi	r26, 0x35	; 53
    2888:	b0 e0       	ldi	r27, 0x00	; 0
    288a:	e5 e3       	ldi	r30, 0x35	; 53
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	80 81       	ld	r24, Z
    2890:	48 2f       	mov	r20, r24
    2892:	8c 81       	ldd	r24, Y+4	; 0x04
    2894:	28 2f       	mov	r18, r24
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	8b 81       	ldd	r24, Y+3	; 0x03
    289a:	88 2f       	mov	r24, r24
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	b9 01       	movw	r22, r18
    28a0:	02 c0       	rjmp	.+4      	; 0x28a6 <DIO_enu_SetPinState+0x160>
    28a2:	66 0f       	add	r22, r22
    28a4:	77 1f       	adc	r23, r23
    28a6:	8a 95       	dec	r24
    28a8:	e2 f7       	brpl	.-8      	; 0x28a2 <DIO_enu_SetPinState+0x15c>
    28aa:	cb 01       	movw	r24, r22
    28ac:	84 2b       	or	r24, r20
    28ae:	8c 93       	st	X, r24
    28b0:	28 c0       	rjmp	.+80     	; 0x2902 <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_D:
            DIO_PORTD &= ~( 1 << Copy_u8_PinNumber);
    28b2:	a2 e3       	ldi	r26, 0x32	; 50
    28b4:	b0 e0       	ldi	r27, 0x00	; 0
    28b6:	e2 e3       	ldi	r30, 0x32	; 50
    28b8:	f0 e0       	ldi	r31, 0x00	; 0
    28ba:	80 81       	ld	r24, Z
    28bc:	48 2f       	mov	r20, r24
    28be:	8b 81       	ldd	r24, Y+3	; 0x03
    28c0:	28 2f       	mov	r18, r24
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	81 e0       	ldi	r24, 0x01	; 1
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	02 c0       	rjmp	.+4      	; 0x28ce <DIO_enu_SetPinState+0x188>
    28ca:	88 0f       	add	r24, r24
    28cc:	99 1f       	adc	r25, r25
    28ce:	2a 95       	dec	r18
    28d0:	e2 f7       	brpl	.-8      	; 0x28ca <DIO_enu_SetPinState+0x184>
    28d2:	80 95       	com	r24
    28d4:	84 23       	and	r24, r20
    28d6:	8c 93       	st	X, r24
            DIO_PORTD |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    28d8:	a2 e3       	ldi	r26, 0x32	; 50
    28da:	b0 e0       	ldi	r27, 0x00	; 0
    28dc:	e2 e3       	ldi	r30, 0x32	; 50
    28de:	f0 e0       	ldi	r31, 0x00	; 0
    28e0:	80 81       	ld	r24, Z
    28e2:	48 2f       	mov	r20, r24
    28e4:	8c 81       	ldd	r24, Y+4	; 0x04
    28e6:	28 2f       	mov	r18, r24
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	8b 81       	ldd	r24, Y+3	; 0x03
    28ec:	88 2f       	mov	r24, r24
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	b9 01       	movw	r22, r18
    28f2:	02 c0       	rjmp	.+4      	; 0x28f8 <DIO_enu_SetPinState+0x1b2>
    28f4:	66 0f       	add	r22, r22
    28f6:	77 1f       	adc	r23, r23
    28f8:	8a 95       	dec	r24
    28fa:	e2 f7       	brpl	.-8      	; 0x28f4 <DIO_enu_SetPinState+0x1ae>
    28fc:	cb 01       	movw	r24, r22
    28fe:	84 2b       	or	r24, r20
    2900:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    2902:	19 82       	std	Y+1, r1	; 0x01
    2904:	02 c0       	rjmp	.+4      	; 0x290a <DIO_enu_SetPinState+0x1c4>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2906:	82 e0       	ldi	r24, 0x02	; 2
    2908:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    290a:	89 81       	ldd	r24, Y+1	; 0x01
}
    290c:	26 96       	adiw	r28, 0x06	; 6
    290e:	0f b6       	in	r0, 0x3f	; 63
    2910:	f8 94       	cli
    2912:	de bf       	out	0x3e, r29	; 62
    2914:	0f be       	out	0x3f, r0	; 63
    2916:	cd bf       	out	0x3d, r28	; 61
    2918:	cf 91       	pop	r28
    291a:	df 91       	pop	r29
    291c:	08 95       	ret

0000291e <DIO_enu_SetPinValue>:

extern ErrorState_t DIO_enu_SetPinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinValue)
{
    291e:	df 93       	push	r29
    2920:	cf 93       	push	r28
    2922:	00 d0       	rcall	.+0      	; 0x2924 <DIO_enu_SetPinValue+0x6>
    2924:	00 d0       	rcall	.+0      	; 0x2926 <DIO_enu_SetPinValue+0x8>
    2926:	00 d0       	rcall	.+0      	; 0x2928 <DIO_enu_SetPinValue+0xa>
    2928:	cd b7       	in	r28, 0x3d	; 61
    292a:	de b7       	in	r29, 0x3e	; 62
    292c:	8a 83       	std	Y+2, r24	; 0x02
    292e:	6b 83       	std	Y+3, r22	; 0x03
    2930:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D ) && (Copy_u8_PinNumber <= DIO_PIN_7 ) && (Copy_u8_PinValue <= DIO_HIGH))
    2936:	8a 81       	ldd	r24, Y+2	; 0x02
    2938:	84 30       	cpi	r24, 0x04	; 4
    293a:	08 f0       	brcs	.+2      	; 0x293e <DIO_enu_SetPinValue+0x20>
    293c:	db c0       	rjmp	.+438    	; 0x2af4 <DIO_enu_SetPinValue+0x1d6>
    293e:	8b 81       	ldd	r24, Y+3	; 0x03
    2940:	88 30       	cpi	r24, 0x08	; 8
    2942:	08 f0       	brcs	.+2      	; 0x2946 <DIO_enu_SetPinValue+0x28>
    2944:	d7 c0       	rjmp	.+430    	; 0x2af4 <DIO_enu_SetPinValue+0x1d6>
    2946:	8c 81       	ldd	r24, Y+4	; 0x04
    2948:	82 30       	cpi	r24, 0x02	; 2
    294a:	08 f0       	brcs	.+2      	; 0x294e <DIO_enu_SetPinValue+0x30>
    294c:	d3 c0       	rjmp	.+422    	; 0x2af4 <DIO_enu_SetPinValue+0x1d6>
    {
        switch (Copy_u8_PinGroup)
    294e:	8a 81       	ldd	r24, Y+2	; 0x02
    2950:	28 2f       	mov	r18, r24
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	3e 83       	std	Y+6, r19	; 0x06
    2956:	2d 83       	std	Y+5, r18	; 0x05
    2958:	8d 81       	ldd	r24, Y+5	; 0x05
    295a:	9e 81       	ldd	r25, Y+6	; 0x06
    295c:	81 30       	cpi	r24, 0x01	; 1
    295e:	91 05       	cpc	r25, r1
    2960:	09 f4       	brne	.+2      	; 0x2964 <DIO_enu_SetPinValue+0x46>
    2962:	43 c0       	rjmp	.+134    	; 0x29ea <DIO_enu_SetPinValue+0xcc>
    2964:	2d 81       	ldd	r18, Y+5	; 0x05
    2966:	3e 81       	ldd	r19, Y+6	; 0x06
    2968:	22 30       	cpi	r18, 0x02	; 2
    296a:	31 05       	cpc	r19, r1
    296c:	2c f4       	brge	.+10     	; 0x2978 <DIO_enu_SetPinValue+0x5a>
    296e:	8d 81       	ldd	r24, Y+5	; 0x05
    2970:	9e 81       	ldd	r25, Y+6	; 0x06
    2972:	00 97       	sbiw	r24, 0x00	; 0
    2974:	71 f0       	breq	.+28     	; 0x2992 <DIO_enu_SetPinValue+0x74>
    2976:	bc c0       	rjmp	.+376    	; 0x2af0 <DIO_enu_SetPinValue+0x1d2>
    2978:	2d 81       	ldd	r18, Y+5	; 0x05
    297a:	3e 81       	ldd	r19, Y+6	; 0x06
    297c:	22 30       	cpi	r18, 0x02	; 2
    297e:	31 05       	cpc	r19, r1
    2980:	09 f4       	brne	.+2      	; 0x2984 <DIO_enu_SetPinValue+0x66>
    2982:	5f c0       	rjmp	.+190    	; 0x2a42 <DIO_enu_SetPinValue+0x124>
    2984:	8d 81       	ldd	r24, Y+5	; 0x05
    2986:	9e 81       	ldd	r25, Y+6	; 0x06
    2988:	83 30       	cpi	r24, 0x03	; 3
    298a:	91 05       	cpc	r25, r1
    298c:	09 f4       	brne	.+2      	; 0x2990 <DIO_enu_SetPinValue+0x72>
    298e:	85 c0       	rjmp	.+266    	; 0x2a9a <DIO_enu_SetPinValue+0x17c>
    2990:	af c0       	rjmp	.+350    	; 0x2af0 <DIO_enu_SetPinValue+0x1d2>
        {
            case DIO_PIN_GROUP_A:
            if(Copy_u8_PinValue == DIO_HIGH)
    2992:	8c 81       	ldd	r24, Y+4	; 0x04
    2994:	81 30       	cpi	r24, 0x01	; 1
    2996:	a1 f4       	brne	.+40     	; 0x29c0 <DIO_enu_SetPinValue+0xa2>
            {
                DIO_PORTA |= ( 1 << Copy_u8_PinNumber );
    2998:	ab e3       	ldi	r26, 0x3B	; 59
    299a:	b0 e0       	ldi	r27, 0x00	; 0
    299c:	eb e3       	ldi	r30, 0x3B	; 59
    299e:	f0 e0       	ldi	r31, 0x00	; 0
    29a0:	80 81       	ld	r24, Z
    29a2:	48 2f       	mov	r20, r24
    29a4:	8b 81       	ldd	r24, Y+3	; 0x03
    29a6:	28 2f       	mov	r18, r24
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	81 e0       	ldi	r24, 0x01	; 1
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	02 2e       	mov	r0, r18
    29b0:	02 c0       	rjmp	.+4      	; 0x29b6 <DIO_enu_SetPinValue+0x98>
    29b2:	88 0f       	add	r24, r24
    29b4:	99 1f       	adc	r25, r25
    29b6:	0a 94       	dec	r0
    29b8:	e2 f7       	brpl	.-8      	; 0x29b2 <DIO_enu_SetPinValue+0x94>
    29ba:	84 2b       	or	r24, r20
    29bc:	8c 93       	st	X, r24
    29be:	98 c0       	rjmp	.+304    	; 0x2af0 <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTA &= ~ (1 << Copy_u8_PinNumber);
    29c0:	ab e3       	ldi	r26, 0x3B	; 59
    29c2:	b0 e0       	ldi	r27, 0x00	; 0
    29c4:	eb e3       	ldi	r30, 0x3B	; 59
    29c6:	f0 e0       	ldi	r31, 0x00	; 0
    29c8:	80 81       	ld	r24, Z
    29ca:	48 2f       	mov	r20, r24
    29cc:	8b 81       	ldd	r24, Y+3	; 0x03
    29ce:	28 2f       	mov	r18, r24
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	81 e0       	ldi	r24, 0x01	; 1
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	02 2e       	mov	r0, r18
    29d8:	02 c0       	rjmp	.+4      	; 0x29de <DIO_enu_SetPinValue+0xc0>
    29da:	88 0f       	add	r24, r24
    29dc:	99 1f       	adc	r25, r25
    29de:	0a 94       	dec	r0
    29e0:	e2 f7       	brpl	.-8      	; 0x29da <DIO_enu_SetPinValue+0xbc>
    29e2:	80 95       	com	r24
    29e4:	84 23       	and	r24, r20
    29e6:	8c 93       	st	X, r24
    29e8:	83 c0       	rjmp	.+262    	; 0x2af0 <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_B:
            if(Copy_u8_PinValue == DIO_HIGH)
    29ea:	8c 81       	ldd	r24, Y+4	; 0x04
    29ec:	81 30       	cpi	r24, 0x01	; 1
    29ee:	a1 f4       	brne	.+40     	; 0x2a18 <DIO_enu_SetPinValue+0xfa>
            {
                DIO_PORTB |= ( 1 << Copy_u8_PinNumber );
    29f0:	a8 e3       	ldi	r26, 0x38	; 56
    29f2:	b0 e0       	ldi	r27, 0x00	; 0
    29f4:	e8 e3       	ldi	r30, 0x38	; 56
    29f6:	f0 e0       	ldi	r31, 0x00	; 0
    29f8:	80 81       	ld	r24, Z
    29fa:	48 2f       	mov	r20, r24
    29fc:	8b 81       	ldd	r24, Y+3	; 0x03
    29fe:	28 2f       	mov	r18, r24
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	81 e0       	ldi	r24, 0x01	; 1
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	02 2e       	mov	r0, r18
    2a08:	02 c0       	rjmp	.+4      	; 0x2a0e <DIO_enu_SetPinValue+0xf0>
    2a0a:	88 0f       	add	r24, r24
    2a0c:	99 1f       	adc	r25, r25
    2a0e:	0a 94       	dec	r0
    2a10:	e2 f7       	brpl	.-8      	; 0x2a0a <DIO_enu_SetPinValue+0xec>
    2a12:	84 2b       	or	r24, r20
    2a14:	8c 93       	st	X, r24
    2a16:	6c c0       	rjmp	.+216    	; 0x2af0 <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTB &= ~ (1 << Copy_u8_PinNumber);
    2a18:	a8 e3       	ldi	r26, 0x38	; 56
    2a1a:	b0 e0       	ldi	r27, 0x00	; 0
    2a1c:	e8 e3       	ldi	r30, 0x38	; 56
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	80 81       	ld	r24, Z
    2a22:	48 2f       	mov	r20, r24
    2a24:	8b 81       	ldd	r24, Y+3	; 0x03
    2a26:	28 2f       	mov	r18, r24
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	81 e0       	ldi	r24, 0x01	; 1
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	02 2e       	mov	r0, r18
    2a30:	02 c0       	rjmp	.+4      	; 0x2a36 <DIO_enu_SetPinValue+0x118>
    2a32:	88 0f       	add	r24, r24
    2a34:	99 1f       	adc	r25, r25
    2a36:	0a 94       	dec	r0
    2a38:	e2 f7       	brpl	.-8      	; 0x2a32 <DIO_enu_SetPinValue+0x114>
    2a3a:	80 95       	com	r24
    2a3c:	84 23       	and	r24, r20
    2a3e:	8c 93       	st	X, r24
    2a40:	57 c0       	rjmp	.+174    	; 0x2af0 <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_C:
            if(Copy_u8_PinValue == DIO_HIGH)
    2a42:	8c 81       	ldd	r24, Y+4	; 0x04
    2a44:	81 30       	cpi	r24, 0x01	; 1
    2a46:	a1 f4       	brne	.+40     	; 0x2a70 <DIO_enu_SetPinValue+0x152>
            {
                DIO_PORTC |= ( 1 << Copy_u8_PinNumber );
    2a48:	a5 e3       	ldi	r26, 0x35	; 53
    2a4a:	b0 e0       	ldi	r27, 0x00	; 0
    2a4c:	e5 e3       	ldi	r30, 0x35	; 53
    2a4e:	f0 e0       	ldi	r31, 0x00	; 0
    2a50:	80 81       	ld	r24, Z
    2a52:	48 2f       	mov	r20, r24
    2a54:	8b 81       	ldd	r24, Y+3	; 0x03
    2a56:	28 2f       	mov	r18, r24
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	81 e0       	ldi	r24, 0x01	; 1
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	02 2e       	mov	r0, r18
    2a60:	02 c0       	rjmp	.+4      	; 0x2a66 <DIO_enu_SetPinValue+0x148>
    2a62:	88 0f       	add	r24, r24
    2a64:	99 1f       	adc	r25, r25
    2a66:	0a 94       	dec	r0
    2a68:	e2 f7       	brpl	.-8      	; 0x2a62 <DIO_enu_SetPinValue+0x144>
    2a6a:	84 2b       	or	r24, r20
    2a6c:	8c 93       	st	X, r24
    2a6e:	40 c0       	rjmp	.+128    	; 0x2af0 <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTC &= ~ (1 << Copy_u8_PinNumber);
    2a70:	a5 e3       	ldi	r26, 0x35	; 53
    2a72:	b0 e0       	ldi	r27, 0x00	; 0
    2a74:	e5 e3       	ldi	r30, 0x35	; 53
    2a76:	f0 e0       	ldi	r31, 0x00	; 0
    2a78:	80 81       	ld	r24, Z
    2a7a:	48 2f       	mov	r20, r24
    2a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7e:	28 2f       	mov	r18, r24
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	81 e0       	ldi	r24, 0x01	; 1
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	02 2e       	mov	r0, r18
    2a88:	02 c0       	rjmp	.+4      	; 0x2a8e <DIO_enu_SetPinValue+0x170>
    2a8a:	88 0f       	add	r24, r24
    2a8c:	99 1f       	adc	r25, r25
    2a8e:	0a 94       	dec	r0
    2a90:	e2 f7       	brpl	.-8      	; 0x2a8a <DIO_enu_SetPinValue+0x16c>
    2a92:	80 95       	com	r24
    2a94:	84 23       	and	r24, r20
    2a96:	8c 93       	st	X, r24
    2a98:	2b c0       	rjmp	.+86     	; 0x2af0 <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_D:
            if(Copy_u8_PinValue == DIO_HIGH)
    2a9a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a9c:	81 30       	cpi	r24, 0x01	; 1
    2a9e:	a1 f4       	brne	.+40     	; 0x2ac8 <DIO_enu_SetPinValue+0x1aa>
            {
                DIO_PORTD |= ( 1 << Copy_u8_PinNumber );
    2aa0:	a2 e3       	ldi	r26, 0x32	; 50
    2aa2:	b0 e0       	ldi	r27, 0x00	; 0
    2aa4:	e2 e3       	ldi	r30, 0x32	; 50
    2aa6:	f0 e0       	ldi	r31, 0x00	; 0
    2aa8:	80 81       	ld	r24, Z
    2aaa:	48 2f       	mov	r20, r24
    2aac:	8b 81       	ldd	r24, Y+3	; 0x03
    2aae:	28 2f       	mov	r18, r24
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	02 2e       	mov	r0, r18
    2ab8:	02 c0       	rjmp	.+4      	; 0x2abe <DIO_enu_SetPinValue+0x1a0>
    2aba:	88 0f       	add	r24, r24
    2abc:	99 1f       	adc	r25, r25
    2abe:	0a 94       	dec	r0
    2ac0:	e2 f7       	brpl	.-8      	; 0x2aba <DIO_enu_SetPinValue+0x19c>
    2ac2:	84 2b       	or	r24, r20
    2ac4:	8c 93       	st	X, r24
    2ac6:	14 c0       	rjmp	.+40     	; 0x2af0 <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
    2ac8:	a2 e3       	ldi	r26, 0x32	; 50
    2aca:	b0 e0       	ldi	r27, 0x00	; 0
    2acc:	e2 e3       	ldi	r30, 0x32	; 50
    2ace:	f0 e0       	ldi	r31, 0x00	; 0
    2ad0:	80 81       	ld	r24, Z
    2ad2:	48 2f       	mov	r20, r24
    2ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad6:	28 2f       	mov	r18, r24
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	81 e0       	ldi	r24, 0x01	; 1
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	02 2e       	mov	r0, r18
    2ae0:	02 c0       	rjmp	.+4      	; 0x2ae6 <DIO_enu_SetPinValue+0x1c8>
    2ae2:	88 0f       	add	r24, r24
    2ae4:	99 1f       	adc	r25, r25
    2ae6:	0a 94       	dec	r0
    2ae8:	e2 f7       	brpl	.-8      	; 0x2ae2 <DIO_enu_SetPinValue+0x1c4>
    2aea:	80 95       	com	r24
    2aec:	84 23       	and	r24, r20
    2aee:	8c 93       	st	X, r24
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    2af0:	19 82       	std	Y+1, r1	; 0x01
    2af2:	02 c0       	rjmp	.+4      	; 0x2af8 <DIO_enu_SetPinValue+0x1da>


    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2af4:	82 e0       	ldi	r24, 0x02	; 2
    2af6:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    2af8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2afa:	26 96       	adiw	r28, 0x06	; 6
    2afc:	0f b6       	in	r0, 0x3f	; 63
    2afe:	f8 94       	cli
    2b00:	de bf       	out	0x3e, r29	; 62
    2b02:	0f be       	out	0x3f, r0	; 63
    2b04:	cd bf       	out	0x3d, r28	; 61
    2b06:	cf 91       	pop	r28
    2b08:	df 91       	pop	r29
    2b0a:	08 95       	ret

00002b0c <DIO_enu_TogglePinValue>:

extern ErrorState_t DIO_enu_TogglePinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber)
{
    2b0c:	df 93       	push	r29
    2b0e:	cf 93       	push	r28
    2b10:	00 d0       	rcall	.+0      	; 0x2b12 <DIO_enu_TogglePinValue+0x6>
    2b12:	00 d0       	rcall	.+0      	; 0x2b14 <DIO_enu_TogglePinValue+0x8>
    2b14:	0f 92       	push	r0
    2b16:	cd b7       	in	r28, 0x3d	; 61
    2b18:	de b7       	in	r29, 0x3e	; 62
    2b1a:	8a 83       	std	Y+2, r24	; 0x02
    2b1c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    2b1e:	81 e0       	ldi	r24, 0x01	; 1
    2b20:	89 83       	std	Y+1, r24	; 0x01

    if ( (Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7))
    2b22:	8a 81       	ldd	r24, Y+2	; 0x02
    2b24:	84 30       	cpi	r24, 0x04	; 4
    2b26:	08 f0       	brcs	.+2      	; 0x2b2a <DIO_enu_TogglePinValue+0x1e>
    2b28:	73 c0       	rjmp	.+230    	; 0x2c10 <DIO_enu_TogglePinValue+0x104>
    2b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2c:	88 30       	cpi	r24, 0x08	; 8
    2b2e:	08 f0       	brcs	.+2      	; 0x2b32 <DIO_enu_TogglePinValue+0x26>
    2b30:	6f c0       	rjmp	.+222    	; 0x2c10 <DIO_enu_TogglePinValue+0x104>
    {
        switch (Copy_u8_PinGroup)
    2b32:	8a 81       	ldd	r24, Y+2	; 0x02
    2b34:	28 2f       	mov	r18, r24
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	3d 83       	std	Y+5, r19	; 0x05
    2b3a:	2c 83       	std	Y+4, r18	; 0x04
    2b3c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b3e:	9d 81       	ldd	r25, Y+5	; 0x05
    2b40:	81 30       	cpi	r24, 0x01	; 1
    2b42:	91 05       	cpc	r25, r1
    2b44:	49 f1       	breq	.+82     	; 0x2b98 <DIO_enu_TogglePinValue+0x8c>
    2b46:	2c 81       	ldd	r18, Y+4	; 0x04
    2b48:	3d 81       	ldd	r19, Y+5	; 0x05
    2b4a:	22 30       	cpi	r18, 0x02	; 2
    2b4c:	31 05       	cpc	r19, r1
    2b4e:	2c f4       	brge	.+10     	; 0x2b5a <DIO_enu_TogglePinValue+0x4e>
    2b50:	8c 81       	ldd	r24, Y+4	; 0x04
    2b52:	9d 81       	ldd	r25, Y+5	; 0x05
    2b54:	00 97       	sbiw	r24, 0x00	; 0
    2b56:	61 f0       	breq	.+24     	; 0x2b70 <DIO_enu_TogglePinValue+0x64>
    2b58:	5a c0       	rjmp	.+180    	; 0x2c0e <DIO_enu_TogglePinValue+0x102>
    2b5a:	2c 81       	ldd	r18, Y+4	; 0x04
    2b5c:	3d 81       	ldd	r19, Y+5	; 0x05
    2b5e:	22 30       	cpi	r18, 0x02	; 2
    2b60:	31 05       	cpc	r19, r1
    2b62:	71 f1       	breq	.+92     	; 0x2bc0 <DIO_enu_TogglePinValue+0xb4>
    2b64:	8c 81       	ldd	r24, Y+4	; 0x04
    2b66:	9d 81       	ldd	r25, Y+5	; 0x05
    2b68:	83 30       	cpi	r24, 0x03	; 3
    2b6a:	91 05       	cpc	r25, r1
    2b6c:	e9 f1       	breq	.+122    	; 0x2be8 <DIO_enu_TogglePinValue+0xdc>
    2b6e:	4f c0       	rjmp	.+158    	; 0x2c0e <DIO_enu_TogglePinValue+0x102>
        {
            case DIO_PIN_GROUP_A:
            DIO_PORTA ^= ( 1 << Copy_u8_PinNumber);
    2b70:	ab e3       	ldi	r26, 0x3B	; 59
    2b72:	b0 e0       	ldi	r27, 0x00	; 0
    2b74:	eb e3       	ldi	r30, 0x3B	; 59
    2b76:	f0 e0       	ldi	r31, 0x00	; 0
    2b78:	80 81       	ld	r24, Z
    2b7a:	48 2f       	mov	r20, r24
    2b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b7e:	28 2f       	mov	r18, r24
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	81 e0       	ldi	r24, 0x01	; 1
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	02 2e       	mov	r0, r18
    2b88:	02 c0       	rjmp	.+4      	; 0x2b8e <DIO_enu_TogglePinValue+0x82>
    2b8a:	88 0f       	add	r24, r24
    2b8c:	99 1f       	adc	r25, r25
    2b8e:	0a 94       	dec	r0
    2b90:	e2 f7       	brpl	.-8      	; 0x2b8a <DIO_enu_TogglePinValue+0x7e>
    2b92:	84 27       	eor	r24, r20
    2b94:	8c 93       	st	X, r24
    2b96:	3b c0       	rjmp	.+118    	; 0x2c0e <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_B:
            DIO_PORTB ^= ( 1 << Copy_u8_PinNumber);
    2b98:	a8 e3       	ldi	r26, 0x38	; 56
    2b9a:	b0 e0       	ldi	r27, 0x00	; 0
    2b9c:	e8 e3       	ldi	r30, 0x38	; 56
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	80 81       	ld	r24, Z
    2ba2:	48 2f       	mov	r20, r24
    2ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba6:	28 2f       	mov	r18, r24
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	81 e0       	ldi	r24, 0x01	; 1
    2bac:	90 e0       	ldi	r25, 0x00	; 0
    2bae:	02 2e       	mov	r0, r18
    2bb0:	02 c0       	rjmp	.+4      	; 0x2bb6 <DIO_enu_TogglePinValue+0xaa>
    2bb2:	88 0f       	add	r24, r24
    2bb4:	99 1f       	adc	r25, r25
    2bb6:	0a 94       	dec	r0
    2bb8:	e2 f7       	brpl	.-8      	; 0x2bb2 <DIO_enu_TogglePinValue+0xa6>
    2bba:	84 27       	eor	r24, r20
    2bbc:	8c 93       	st	X, r24
    2bbe:	27 c0       	rjmp	.+78     	; 0x2c0e <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_C:
            DIO_PORTC ^= ( 1 << Copy_u8_PinNumber);
    2bc0:	a5 e3       	ldi	r26, 0x35	; 53
    2bc2:	b0 e0       	ldi	r27, 0x00	; 0
    2bc4:	e5 e3       	ldi	r30, 0x35	; 53
    2bc6:	f0 e0       	ldi	r31, 0x00	; 0
    2bc8:	80 81       	ld	r24, Z
    2bca:	48 2f       	mov	r20, r24
    2bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bce:	28 2f       	mov	r18, r24
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	81 e0       	ldi	r24, 0x01	; 1
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	02 2e       	mov	r0, r18
    2bd8:	02 c0       	rjmp	.+4      	; 0x2bde <DIO_enu_TogglePinValue+0xd2>
    2bda:	88 0f       	add	r24, r24
    2bdc:	99 1f       	adc	r25, r25
    2bde:	0a 94       	dec	r0
    2be0:	e2 f7       	brpl	.-8      	; 0x2bda <DIO_enu_TogglePinValue+0xce>
    2be2:	84 27       	eor	r24, r20
    2be4:	8c 93       	st	X, r24
    2be6:	13 c0       	rjmp	.+38     	; 0x2c0e <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_D:
            DIO_PORTD ^= ( 1 << Copy_u8_PinNumber);
    2be8:	a2 e3       	ldi	r26, 0x32	; 50
    2bea:	b0 e0       	ldi	r27, 0x00	; 0
    2bec:	e2 e3       	ldi	r30, 0x32	; 50
    2bee:	f0 e0       	ldi	r31, 0x00	; 0
    2bf0:	80 81       	ld	r24, Z
    2bf2:	48 2f       	mov	r20, r24
    2bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf6:	28 2f       	mov	r18, r24
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	81 e0       	ldi	r24, 0x01	; 1
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	02 2e       	mov	r0, r18
    2c00:	02 c0       	rjmp	.+4      	; 0x2c06 <DIO_enu_TogglePinValue+0xfa>
    2c02:	88 0f       	add	r24, r24
    2c04:	99 1f       	adc	r25, r25
    2c06:	0a 94       	dec	r0
    2c08:	e2 f7       	brpl	.-8      	; 0x2c02 <DIO_enu_TogglePinValue+0xf6>
    2c0a:	84 27       	eor	r24, r20
    2c0c:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    2c0e:	19 82       	std	Y+1, r1	; 0x01

    }

    return Local_u8_ErrorFlag;
    2c10:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c12:	0f 90       	pop	r0
    2c14:	0f 90       	pop	r0
    2c16:	0f 90       	pop	r0
    2c18:	0f 90       	pop	r0
    2c1a:	0f 90       	pop	r0
    2c1c:	cf 91       	pop	r28
    2c1e:	df 91       	pop	r29
    2c20:	08 95       	ret

00002c22 <DIO_enu_GetPinValue>:

extern ErrorState_t DIO_enu_GetPinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8* Copy_pu8_PinValue)
{
    2c22:	df 93       	push	r29
    2c24:	cf 93       	push	r28
    2c26:	cd b7       	in	r28, 0x3d	; 61
    2c28:	de b7       	in	r29, 0x3e	; 62
    2c2a:	27 97       	sbiw	r28, 0x07	; 7
    2c2c:	0f b6       	in	r0, 0x3f	; 63
    2c2e:	f8 94       	cli
    2c30:	de bf       	out	0x3e, r29	; 62
    2c32:	0f be       	out	0x3f, r0	; 63
    2c34:	cd bf       	out	0x3d, r28	; 61
    2c36:	8a 83       	std	Y+2, r24	; 0x02
    2c38:	6b 83       	std	Y+3, r22	; 0x03
    2c3a:	5d 83       	std	Y+5, r21	; 0x05
    2c3c:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    2c3e:	81 e0       	ldi	r24, 0x01	; 1
    2c40:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu8_PinValue)
    2c42:	8c 81       	ldd	r24, Y+4	; 0x04
    2c44:	9d 81       	ldd	r25, Y+5	; 0x05
    2c46:	00 97       	sbiw	r24, 0x00	; 0
    2c48:	09 f4       	brne	.+2      	; 0x2c4c <DIO_enu_GetPinValue+0x2a>
    2c4a:	7d c0       	rjmp	.+250    	; 0x2d46 <DIO_enu_GetPinValue+0x124>
    {

        if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D ) && (Copy_u8_PinNumber <= DIO_PIN_7 ) )
    2c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c4e:	84 30       	cpi	r24, 0x04	; 4
    2c50:	08 f0       	brcs	.+2      	; 0x2c54 <DIO_enu_GetPinValue+0x32>
    2c52:	76 c0       	rjmp	.+236    	; 0x2d40 <DIO_enu_GetPinValue+0x11e>
    2c54:	8b 81       	ldd	r24, Y+3	; 0x03
    2c56:	88 30       	cpi	r24, 0x08	; 8
    2c58:	08 f0       	brcs	.+2      	; 0x2c5c <DIO_enu_GetPinValue+0x3a>
    2c5a:	72 c0       	rjmp	.+228    	; 0x2d40 <DIO_enu_GetPinValue+0x11e>
        {
            switch (Copy_u8_PinGroup)
    2c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5e:	28 2f       	mov	r18, r24
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	3f 83       	std	Y+7, r19	; 0x07
    2c64:	2e 83       	std	Y+6, r18	; 0x06
    2c66:	4e 81       	ldd	r20, Y+6	; 0x06
    2c68:	5f 81       	ldd	r21, Y+7	; 0x07
    2c6a:	41 30       	cpi	r20, 0x01	; 1
    2c6c:	51 05       	cpc	r21, r1
    2c6e:	59 f1       	breq	.+86     	; 0x2cc6 <DIO_enu_GetPinValue+0xa4>
    2c70:	8e 81       	ldd	r24, Y+6	; 0x06
    2c72:	9f 81       	ldd	r25, Y+7	; 0x07
    2c74:	82 30       	cpi	r24, 0x02	; 2
    2c76:	91 05       	cpc	r25, r1
    2c78:	34 f4       	brge	.+12     	; 0x2c86 <DIO_enu_GetPinValue+0x64>
    2c7a:	2e 81       	ldd	r18, Y+6	; 0x06
    2c7c:	3f 81       	ldd	r19, Y+7	; 0x07
    2c7e:	21 15       	cp	r18, r1
    2c80:	31 05       	cpc	r19, r1
    2c82:	69 f0       	breq	.+26     	; 0x2c9e <DIO_enu_GetPinValue+0x7c>
    2c84:	5b c0       	rjmp	.+182    	; 0x2d3c <DIO_enu_GetPinValue+0x11a>
    2c86:	4e 81       	ldd	r20, Y+6	; 0x06
    2c88:	5f 81       	ldd	r21, Y+7	; 0x07
    2c8a:	42 30       	cpi	r20, 0x02	; 2
    2c8c:	51 05       	cpc	r21, r1
    2c8e:	79 f1       	breq	.+94     	; 0x2cee <DIO_enu_GetPinValue+0xcc>
    2c90:	8e 81       	ldd	r24, Y+6	; 0x06
    2c92:	9f 81       	ldd	r25, Y+7	; 0x07
    2c94:	83 30       	cpi	r24, 0x03	; 3
    2c96:	91 05       	cpc	r25, r1
    2c98:	09 f4       	brne	.+2      	; 0x2c9c <DIO_enu_GetPinValue+0x7a>
    2c9a:	3d c0       	rjmp	.+122    	; 0x2d16 <DIO_enu_GetPinValue+0xf4>
    2c9c:	4f c0       	rjmp	.+158    	; 0x2d3c <DIO_enu_GetPinValue+0x11a>
            {
                case DIO_PIN_GROUP_A:
                (*Copy_pu8_PinValue) = (DIO_PINA >> Copy_u8_PinNumber) & 1;
    2c9e:	e9 e3       	ldi	r30, 0x39	; 57
    2ca0:	f0 e0       	ldi	r31, 0x00	; 0
    2ca2:	80 81       	ld	r24, Z
    2ca4:	28 2f       	mov	r18, r24
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    2caa:	88 2f       	mov	r24, r24
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	a9 01       	movw	r20, r18
    2cb0:	02 c0       	rjmp	.+4      	; 0x2cb6 <DIO_enu_GetPinValue+0x94>
    2cb2:	55 95       	asr	r21
    2cb4:	47 95       	ror	r20
    2cb6:	8a 95       	dec	r24
    2cb8:	e2 f7       	brpl	.-8      	; 0x2cb2 <DIO_enu_GetPinValue+0x90>
    2cba:	ca 01       	movw	r24, r20
    2cbc:	81 70       	andi	r24, 0x01	; 1
    2cbe:	ec 81       	ldd	r30, Y+4	; 0x04
    2cc0:	fd 81       	ldd	r31, Y+5	; 0x05
    2cc2:	80 83       	st	Z, r24
    2cc4:	3b c0       	rjmp	.+118    	; 0x2d3c <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_B:
                (*Copy_pu8_PinValue) = (DIO_PINB >> Copy_u8_PinNumber) & 1;
    2cc6:	e6 e3       	ldi	r30, 0x36	; 54
    2cc8:	f0 e0       	ldi	r31, 0x00	; 0
    2cca:	80 81       	ld	r24, Z
    2ccc:	28 2f       	mov	r18, r24
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd2:	88 2f       	mov	r24, r24
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	a9 01       	movw	r20, r18
    2cd8:	02 c0       	rjmp	.+4      	; 0x2cde <DIO_enu_GetPinValue+0xbc>
    2cda:	55 95       	asr	r21
    2cdc:	47 95       	ror	r20
    2cde:	8a 95       	dec	r24
    2ce0:	e2 f7       	brpl	.-8      	; 0x2cda <DIO_enu_GetPinValue+0xb8>
    2ce2:	ca 01       	movw	r24, r20
    2ce4:	81 70       	andi	r24, 0x01	; 1
    2ce6:	ec 81       	ldd	r30, Y+4	; 0x04
    2ce8:	fd 81       	ldd	r31, Y+5	; 0x05
    2cea:	80 83       	st	Z, r24
    2cec:	27 c0       	rjmp	.+78     	; 0x2d3c <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_C:
                (*Copy_pu8_PinValue) = (DIO_PINC >> Copy_u8_PinNumber) & 1;
    2cee:	e3 e3       	ldi	r30, 0x33	; 51
    2cf0:	f0 e0       	ldi	r31, 0x00	; 0
    2cf2:	80 81       	ld	r24, Z
    2cf4:	28 2f       	mov	r18, r24
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cfa:	88 2f       	mov	r24, r24
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	a9 01       	movw	r20, r18
    2d00:	02 c0       	rjmp	.+4      	; 0x2d06 <DIO_enu_GetPinValue+0xe4>
    2d02:	55 95       	asr	r21
    2d04:	47 95       	ror	r20
    2d06:	8a 95       	dec	r24
    2d08:	e2 f7       	brpl	.-8      	; 0x2d02 <DIO_enu_GetPinValue+0xe0>
    2d0a:	ca 01       	movw	r24, r20
    2d0c:	81 70       	andi	r24, 0x01	; 1
    2d0e:	ec 81       	ldd	r30, Y+4	; 0x04
    2d10:	fd 81       	ldd	r31, Y+5	; 0x05
    2d12:	80 83       	st	Z, r24
    2d14:	13 c0       	rjmp	.+38     	; 0x2d3c <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_D:
                (*Copy_pu8_PinValue) = (DIO_PIND >> Copy_u8_PinNumber) & 1;
    2d16:	e0 e3       	ldi	r30, 0x30	; 48
    2d18:	f0 e0       	ldi	r31, 0x00	; 0
    2d1a:	80 81       	ld	r24, Z
    2d1c:	28 2f       	mov	r18, r24
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	8b 81       	ldd	r24, Y+3	; 0x03
    2d22:	88 2f       	mov	r24, r24
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	a9 01       	movw	r20, r18
    2d28:	02 c0       	rjmp	.+4      	; 0x2d2e <DIO_enu_GetPinValue+0x10c>
    2d2a:	55 95       	asr	r21
    2d2c:	47 95       	ror	r20
    2d2e:	8a 95       	dec	r24
    2d30:	e2 f7       	brpl	.-8      	; 0x2d2a <DIO_enu_GetPinValue+0x108>
    2d32:	ca 01       	movw	r24, r20
    2d34:	81 70       	andi	r24, 0x01	; 1
    2d36:	ec 81       	ldd	r30, Y+4	; 0x04
    2d38:	fd 81       	ldd	r31, Y+5	; 0x05
    2d3a:	80 83       	st	Z, r24

                default:
                break;
            }

            Local_u8_ErrorFlag =ES_OK;
    2d3c:	19 82       	std	Y+1, r1	; 0x01
    2d3e:	05 c0       	rjmp	.+10     	; 0x2d4a <DIO_enu_GetPinValue+0x128>


        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2d40:	82 e0       	ldi	r24, 0x02	; 2
    2d42:	89 83       	std	Y+1, r24	; 0x01
    2d44:	02 c0       	rjmp	.+4      	; 0x2d4a <DIO_enu_GetPinValue+0x128>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    2d46:	83 e0       	ldi	r24, 0x03	; 3
    2d48:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    2d4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d4c:	27 96       	adiw	r28, 0x07	; 7
    2d4e:	0f b6       	in	r0, 0x3f	; 63
    2d50:	f8 94       	cli
    2d52:	de bf       	out	0x3e, r29	; 62
    2d54:	0f be       	out	0x3f, r0	; 63
    2d56:	cd bf       	out	0x3d, r28	; 61
    2d58:	cf 91       	pop	r28
    2d5a:	df 91       	pop	r29
    2d5c:	08 95       	ret

00002d5e <ADC_enu_Initialization>:
static void* pvid_ISRParameters = NULL;

//APIs implementation

extern ErrorState_t ADC_enu_Initialization(void)
{
    2d5e:	df 93       	push	r29
    2d60:	cf 93       	push	r28
    2d62:	0f 92       	push	r0
    2d64:	cd b7       	in	r28, 0x3d	; 61
    2d66:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    2d68:	81 e0       	ldi	r24, 0x01	; 1
    2d6a:	89 83       	std	Y+1, r24	; 0x01

    //Bits contain 00
    ADMUX &= ~(3 << ADMUX_REFS0 );
    2d6c:	a7 e2       	ldi	r26, 0x27	; 39
    2d6e:	b0 e0       	ldi	r27, 0x00	; 0
    2d70:	e7 e2       	ldi	r30, 0x27	; 39
    2d72:	f0 e0       	ldi	r31, 0x00	; 0
    2d74:	80 81       	ld	r24, Z
    2d76:	8f 73       	andi	r24, 0x3F	; 63
    2d78:	8c 93       	st	X, r24
        //bITS ALREADY CONTAIN 00  
    
    #elif ADC_V_REFERENCE_SOURCE == ADC_AVCC
       
        //Bits contain 01
        ADMUX |= (1 < ADMUX_REFS0);
    2d7a:	a7 e2       	ldi	r26, 0x27	; 39
    2d7c:	b0 e0       	ldi	r27, 0x00	; 0
    2d7e:	e7 e2       	ldi	r30, 0x27	; 39
    2d80:	f0 e0       	ldi	r31, 0x00	; 0
    2d82:	80 81       	ld	r24, Z
    2d84:	81 60       	ori	r24, 0x01	; 1
    2d86:	8c 93       	st	X, r24


    //Handling Data adjustment direction
    #if  ADC_DATA_ADJUSTMENT == ADC_LEFT_ADJUSTED
        //Setting ADLAR bit
        ADMUX |= ( 1 << ADMUX_ADLAR);
    2d88:	a7 e2       	ldi	r26, 0x27	; 39
    2d8a:	b0 e0       	ldi	r27, 0x00	; 0
    2d8c:	e7 e2       	ldi	r30, 0x27	; 39
    2d8e:	f0 e0       	ldi	r31, 0x00	; 0
    2d90:	80 81       	ld	r24, Z
    2d92:	80 62       	ori	r24, 0x20	; 32
    2d94:	8c 93       	st	X, r24
        ADCSRA &= ~( 1 << ADCSRA_ADATE);

    #elif  ADC_TRIGGER_SOURCE >= ADC_FREE_RUNNING &&  ADC_TRIGGER_SOURCE <= ADC_TIMER1_CAPTURE_EVENT

        //Clearing ADTS bits
        SFIOR &= (0X1F);
    2d96:	a0 e5       	ldi	r26, 0x50	; 80
    2d98:	b0 e0       	ldi	r27, 0x00	; 0
    2d9a:	e0 e5       	ldi	r30, 0x50	; 80
    2d9c:	f0 e0       	ldi	r31, 0x00	; 0
    2d9e:	80 81       	ld	r24, Z
    2da0:	8f 71       	andi	r24, 0x1F	; 31
    2da2:	8c 93       	st	X, r24

        //Choosing AT source
        SFIOR |= (ADC_TRIGGER_SOURCE << SFIOR_ADTS0); 
    2da4:	a0 e5       	ldi	r26, 0x50	; 80
    2da6:	b0 e0       	ldi	r27, 0x00	; 0
    2da8:	e0 e5       	ldi	r30, 0x50	; 80
    2daa:	f0 e0       	ldi	r31, 0x00	; 0
    2dac:	80 81       	ld	r24, Z
    2dae:	8c 93       	st	X, r24
        
        //Setting ADATE bit
        ADCSRA |=  ( 1 << ADCSRA_ADATE);
    2db0:	a6 e2       	ldi	r26, 0x26	; 38
    2db2:	b0 e0       	ldi	r27, 0x00	; 0
    2db4:	e6 e2       	ldi	r30, 0x26	; 38
    2db6:	f0 e0       	ldi	r31, 0x00	; 0
    2db8:	80 81       	ld	r24, Z
    2dba:	80 62       	ori	r24, 0x20	; 32
    2dbc:	8c 93       	st	X, r24
    #endif


    //Handling Interrupt Event Status (PIE)
    #if ADC_INT_EVENT_STATUS == ADC_INT_ENABLE
        ADCSRA |= ( 1 << ADCSRA_ADIE); //Bit contains 1 
    2dbe:	a6 e2       	ldi	r26, 0x26	; 38
    2dc0:	b0 e0       	ldi	r27, 0x00	; 0
    2dc2:	e6 e2       	ldi	r30, 0x26	; 38
    2dc4:	f0 e0       	ldi	r31, 0x00	; 0
    2dc6:	80 81       	ld	r24, Z
    2dc8:	88 60       	ori	r24, 0x08	; 8
    2dca:	8c 93       	st	X, r24
    #endif


    //Handling ADC clock speed
    //Clearing PS bits
    ADCSRA &= (0xF8);
    2dcc:	a6 e2       	ldi	r26, 0x26	; 38
    2dce:	b0 e0       	ldi	r27, 0x00	; 0
    2dd0:	e6 e2       	ldi	r30, 0x26	; 38
    2dd2:	f0 e0       	ldi	r31, 0x00	; 0
    2dd4:	80 81       	ld	r24, Z
    2dd6:	88 7f       	andi	r24, 0xF8	; 248
    2dd8:	8c 93       	st	X, r24
    #if ADC_PS_FACTOR >= ADC_PS_2 && ADC_PS_FACTOR <= ADC_PS_128 
        
        ADCSRA |= (ADC_PS_FACTOR << ADCSRA_ADPS0);
    2dda:	a6 e2       	ldi	r26, 0x26	; 38
    2ddc:	b0 e0       	ldi	r27, 0x00	; 0
    2dde:	e6 e2       	ldi	r30, 0x26	; 38
    2de0:	f0 e0       	ldi	r31, 0x00	; 0
    2de2:	80 81       	ld	r24, Z
    2de4:	86 60       	ori	r24, 0x06	; 6
    2de6:	8c 93       	st	X, r24

    #endif


    //Handling input channels
    ADMUX &= (0xE0); //Clearing bits
    2de8:	a7 e2       	ldi	r26, 0x27	; 39
    2dea:	b0 e0       	ldi	r27, 0x00	; 0
    2dec:	e7 e2       	ldi	r30, 0x27	; 39
    2dee:	f0 e0       	ldi	r31, 0x00	; 0
    2df0:	80 81       	ld	r24, Z
    2df2:	80 7e       	andi	r24, 0xE0	; 224
    2df4:	8c 93       	st	X, r24
    #if ADC_INPUT_CHANNEL >= ADC_ADC0 && ADC_INPUT_CHANNEL <= ADC_V_GND
        //Channel Selection
        ADMUX |= (ADC_INPUT_CHANNEL << ADMUX_MUX0);
    2df6:	a7 e2       	ldi	r26, 0x27	; 39
    2df8:	b0 e0       	ldi	r27, 0x00	; 0
    2dfa:	e7 e2       	ldi	r30, 0x27	; 39
    2dfc:	f0 e0       	ldi	r31, 0x00	; 0
    2dfe:	80 81       	ld	r24, Z
    2e00:	8c 93       	st	X, r24

    #endif


    // /Powering ADC
    ADCSRA |= (1 << ADCSRA_ADEN );
    2e02:	a6 e2       	ldi	r26, 0x26	; 38
    2e04:	b0 e0       	ldi	r27, 0x00	; 0
    2e06:	e6 e2       	ldi	r30, 0x26	; 38
    2e08:	f0 e0       	ldi	r31, 0x00	; 0
    2e0a:	80 81       	ld	r24, Z
    2e0c:	80 68       	ori	r24, 0x80	; 128
    2e0e:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    2e10:	19 82       	std	Y+1, r1	; 0x01
    return Local_u8_ErrorFlag; 
    2e12:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e14:	0f 90       	pop	r0
    2e16:	cf 91       	pop	r28
    2e18:	df 91       	pop	r29
    2e1a:	08 95       	ret

00002e1c <ADC_enu_ReadPolling>:

extern ErrorState_t ADC_enu_ReadPolling(u8 Copy_u8_Channel, u16* Copy_pu16_Result)
{
    2e1c:	df 93       	push	r29
    2e1e:	cf 93       	push	r28
    2e20:	00 d0       	rcall	.+0      	; 0x2e22 <ADC_enu_ReadPolling+0x6>
    2e22:	00 d0       	rcall	.+0      	; 0x2e24 <ADC_enu_ReadPolling+0x8>
    2e24:	cd b7       	in	r28, 0x3d	; 61
    2e26:	de b7       	in	r29, 0x3e	; 62
    2e28:	8a 83       	std	Y+2, r24	; 0x02
    2e2a:	7c 83       	std	Y+4, r23	; 0x04
    2e2c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
    2e2e:	81 e0       	ldi	r24, 0x01	; 1
    2e30:	89 83       	std	Y+1, r24	; 0x01

    if ((Copy_u8_Channel >= ADC_ADC0) && (Copy_u8_Channel <= ADC_V_GND))
    2e32:	8a 81       	ldd	r24, Y+2	; 0x02
    2e34:	80 32       	cpi	r24, 0x20	; 32
    2e36:	08 f0       	brcs	.+2      	; 0x2e3a <ADC_enu_ReadPolling+0x1e>
    2e38:	50 c0       	rjmp	.+160    	; 0x2eda <ADC_enu_ReadPolling+0xbe>
    {
        //Clearing PIF, Assuming that the ADC is in Polling mode.
        ADCSRA |= (1 << ADCSRA_ADIF);
    2e3a:	a6 e2       	ldi	r26, 0x26	; 38
    2e3c:	b0 e0       	ldi	r27, 0x00	; 0
    2e3e:	e6 e2       	ldi	r30, 0x26	; 38
    2e40:	f0 e0       	ldi	r31, 0x00	; 0
    2e42:	80 81       	ld	r24, Z
    2e44:	80 61       	ori	r24, 0x10	; 16
    2e46:	8c 93       	st	X, r24
        
        //Clearing MUX it
        ADMUX &= (0xE0);
    2e48:	a7 e2       	ldi	r26, 0x27	; 39
    2e4a:	b0 e0       	ldi	r27, 0x00	; 0
    2e4c:	e7 e2       	ldi	r30, 0x27	; 39
    2e4e:	f0 e0       	ldi	r31, 0x00	; 0
    2e50:	80 81       	ld	r24, Z
    2e52:	80 7e       	andi	r24, 0xE0	; 224
    2e54:	8c 93       	st	X, r24

        //Choosing channel
        ADMUX |= (Copy_u8_Channel << ADMUX_MUX0);
    2e56:	a7 e2       	ldi	r26, 0x27	; 39
    2e58:	b0 e0       	ldi	r27, 0x00	; 0
    2e5a:	e7 e2       	ldi	r30, 0x27	; 39
    2e5c:	f0 e0       	ldi	r31, 0x00	; 0
    2e5e:	90 81       	ld	r25, Z
    2e60:	8a 81       	ldd	r24, Y+2	; 0x02
    2e62:	89 2b       	or	r24, r25
    2e64:	8c 93       	st	X, r24
       
        //Setting ADSC to start a conversion
        ADCSRA |= (1 << ADCSRA_ADSC);
    2e66:	a6 e2       	ldi	r26, 0x26	; 38
    2e68:	b0 e0       	ldi	r27, 0x00	; 0
    2e6a:	e6 e2       	ldi	r30, 0x26	; 38
    2e6c:	f0 e0       	ldi	r31, 0x00	; 0
    2e6e:	80 81       	ld	r24, Z
    2e70:	80 64       	ori	r24, 0x40	; 64
    2e72:	8c 93       	st	X, r24

        //Waiting for ADC to raise ADIF
        while (((ADCSRA >> ADCSRA_ADIF) & 1) == False);
    2e74:	e6 e2       	ldi	r30, 0x26	; 38
    2e76:	f0 e0       	ldi	r31, 0x00	; 0
    2e78:	80 81       	ld	r24, Z
    2e7a:	82 95       	swap	r24
    2e7c:	8f 70       	andi	r24, 0x0F	; 15
    2e7e:	88 2f       	mov	r24, r24
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	81 70       	andi	r24, 0x01	; 1
    2e84:	90 70       	andi	r25, 0x00	; 0
    2e86:	00 97       	sbiw	r24, 0x00	; 0
    2e88:	a9 f3       	breq	.-22     	; 0x2e74 <ADC_enu_ReadPolling+0x58>

        
        #if ADC_DATA_ADJUSTMENT == ADC_LEFT_ADJUSTED 

            //ADCL must be read first
            *Copy_pu16_Result = (ADCL >> 6);
    2e8a:	e4 e2       	ldi	r30, 0x24	; 36
    2e8c:	f0 e0       	ldi	r31, 0x00	; 0
    2e8e:	80 81       	ld	r24, Z
    2e90:	82 95       	swap	r24
    2e92:	86 95       	lsr	r24
    2e94:	86 95       	lsr	r24
    2e96:	83 70       	andi	r24, 0x03	; 3
    2e98:	88 2f       	mov	r24, r24
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	eb 81       	ldd	r30, Y+3	; 0x03
    2e9e:	fc 81       	ldd	r31, Y+4	; 0x04
    2ea0:	91 83       	std	Z+1, r25	; 0x01
    2ea2:	80 83       	st	Z, r24
            //ADCH is then read
            *Copy_pu16_Result |= ((u16)ADCH << 2);
    2ea4:	eb 81       	ldd	r30, Y+3	; 0x03
    2ea6:	fc 81       	ldd	r31, Y+4	; 0x04
    2ea8:	20 81       	ld	r18, Z
    2eaa:	31 81       	ldd	r19, Z+1	; 0x01
    2eac:	e5 e2       	ldi	r30, 0x25	; 37
    2eae:	f0 e0       	ldi	r31, 0x00	; 0
    2eb0:	80 81       	ld	r24, Z
    2eb2:	88 2f       	mov	r24, r24
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	88 0f       	add	r24, r24
    2eb8:	99 1f       	adc	r25, r25
    2eba:	88 0f       	add	r24, r24
    2ebc:	99 1f       	adc	r25, r25
    2ebe:	82 2b       	or	r24, r18
    2ec0:	93 2b       	or	r25, r19
    2ec2:	eb 81       	ldd	r30, Y+3	; 0x03
    2ec4:	fc 81       	ldd	r31, Y+4	; 0x04
    2ec6:	91 83       	std	Z+1, r25	; 0x01
    2ec8:	80 83       	st	Z, r24
            *Copy_pu16_Result |= (u16)ADCH << 8;

        #endif
   
        //Clearing PIF
        ADCSRA |= (1 << ADCSRA_ADIF);
    2eca:	a6 e2       	ldi	r26, 0x26	; 38
    2ecc:	b0 e0       	ldi	r27, 0x00	; 0
    2ece:	e6 e2       	ldi	r30, 0x26	; 38
    2ed0:	f0 e0       	ldi	r31, 0x00	; 0
    2ed2:	80 81       	ld	r24, Z
    2ed4:	80 61       	ori	r24, 0x10	; 16
    2ed6:	8c 93       	st	X, r24
    2ed8:	02 c0       	rjmp	.+4      	; 0x2ede <ADC_enu_ReadPolling+0xc2>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2eda:	82 e0       	ldi	r24, 0x02	; 2
    2edc:	89 83       	std	Y+1, r24	; 0x01
    }


    Local_u8_ErrorFlag = ES_OK;
    2ede:	19 82       	std	Y+1, r1	; 0x01
    

    


    return Local_u8_ErrorFlag;
    2ee0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ee2:	0f 90       	pop	r0
    2ee4:	0f 90       	pop	r0
    2ee6:	0f 90       	pop	r0
    2ee8:	0f 90       	pop	r0
    2eea:	cf 91       	pop	r28
    2eec:	df 91       	pop	r29
    2eee:	08 95       	ret

00002ef0 <ADC_enu_StartConversion>:

extern ErrorState_t ADC_enu_StartConversion(void)
{
    2ef0:	df 93       	push	r29
    2ef2:	cf 93       	push	r28
    2ef4:	0f 92       	push	r0
    2ef6:	cd b7       	in	r28, 0x3d	; 61
    2ef8:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    2efa:	81 e0       	ldi	r24, 0x01	; 1
    2efc:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA |= (1 <<ADCSRA_ADSC);
    2efe:	a6 e2       	ldi	r26, 0x26	; 38
    2f00:	b0 e0       	ldi	r27, 0x00	; 0
    2f02:	e6 e2       	ldi	r30, 0x26	; 38
    2f04:	f0 e0       	ldi	r31, 0x00	; 0
    2f06:	80 81       	ld	r24, Z
    2f08:	80 64       	ori	r24, 0x40	; 64
    2f0a:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    2f0c:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    2f0e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f10:	0f 90       	pop	r0
    2f12:	cf 91       	pop	r28
    2f14:	df 91       	pop	r29
    2f16:	08 95       	ret

00002f18 <ADC_enu_SetTriggerringSource>:

extern ErrorState_t ADC_enu_SetTriggerringSource(u8 Copy_u8_TriggeringSource)
{
    2f18:	df 93       	push	r29
    2f1a:	cf 93       	push	r28
    2f1c:	00 d0       	rcall	.+0      	; 0x2f1e <ADC_enu_SetTriggerringSource+0x6>
    2f1e:	cd b7       	in	r28, 0x3d	; 61
    2f20:	de b7       	in	r29, 0x3e	; 62
    2f22:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    2f24:	81 e0       	ldi	r24, 0x01	; 1
    2f26:	89 83       	std	Y+1, r24	; 0x01
    
    if(Copy_u8_TriggeringSource == ADC_SINGLE_CONVERSION)
    2f28:	8a 81       	ldd	r24, Y+2	; 0x02
    2f2a:	88 30       	cpi	r24, 0x08	; 8
    2f2c:	49 f4       	brne	.+18     	; 0x2f40 <ADC_enu_SetTriggerringSource+0x28>
    {
        //Clearing ADATE bit
        ADCSRA &= ~(1 << ADCSRA_ADATE);
    2f2e:	a6 e2       	ldi	r26, 0x26	; 38
    2f30:	b0 e0       	ldi	r27, 0x00	; 0
    2f32:	e6 e2       	ldi	r30, 0x26	; 38
    2f34:	f0 e0       	ldi	r31, 0x00	; 0
    2f36:	80 81       	ld	r24, Z
    2f38:	8f 7d       	andi	r24, 0xDF	; 223
    2f3a:	8c 93       	st	X, r24

        Local_u8_ErrorFlag = ES_OK;
    2f3c:	19 82       	std	Y+1, r1	; 0x01
    2f3e:	28 c0       	rjmp	.+80     	; 0x2f90 <ADC_enu_SetTriggerringSource+0x78>
    }
    else if((Copy_u8_TriggeringSource >= ADC_FREE_RUNNING) && (Copy_u8_TriggeringSource <= ADC_TIMER1_CAPTURE_EVENT))
    2f40:	8a 81       	ldd	r24, Y+2	; 0x02
    2f42:	88 30       	cpi	r24, 0x08	; 8
    2f44:	18 f5       	brcc	.+70     	; 0x2f8c <ADC_enu_SetTriggerringSource+0x74>
    {
        //Clearing ADTS bits
        SFIOR &= ~ (1 << SFIOR_ADTS0);
    2f46:	a0 e5       	ldi	r26, 0x50	; 80
    2f48:	b0 e0       	ldi	r27, 0x00	; 0
    2f4a:	e0 e5       	ldi	r30, 0x50	; 80
    2f4c:	f0 e0       	ldi	r31, 0x00	; 0
    2f4e:	80 81       	ld	r24, Z
    2f50:	8f 7d       	andi	r24, 0xDF	; 223
    2f52:	8c 93       	st	X, r24

        //Choosing AT source
        SFIOR |= (Copy_u8_TriggeringSource << SFIOR_ADTS0);
    2f54:	a0 e5       	ldi	r26, 0x50	; 80
    2f56:	b0 e0       	ldi	r27, 0x00	; 0
    2f58:	e0 e5       	ldi	r30, 0x50	; 80
    2f5a:	f0 e0       	ldi	r31, 0x00	; 0
    2f5c:	80 81       	ld	r24, Z
    2f5e:	28 2f       	mov	r18, r24
    2f60:	8a 81       	ldd	r24, Y+2	; 0x02
    2f62:	88 2f       	mov	r24, r24
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	88 0f       	add	r24, r24
    2f68:	99 1f       	adc	r25, r25
    2f6a:	82 95       	swap	r24
    2f6c:	92 95       	swap	r25
    2f6e:	90 7f       	andi	r25, 0xF0	; 240
    2f70:	98 27       	eor	r25, r24
    2f72:	80 7f       	andi	r24, 0xF0	; 240
    2f74:	98 27       	eor	r25, r24
    2f76:	82 2b       	or	r24, r18
    2f78:	8c 93       	st	X, r24

        //Setting ADATE bit
        ADCSRA |= (1 << ADCSRA_ADATE);
    2f7a:	a6 e2       	ldi	r26, 0x26	; 38
    2f7c:	b0 e0       	ldi	r27, 0x00	; 0
    2f7e:	e6 e2       	ldi	r30, 0x26	; 38
    2f80:	f0 e0       	ldi	r31, 0x00	; 0
    2f82:	80 81       	ld	r24, Z
    2f84:	80 62       	ori	r24, 0x20	; 32
    2f86:	8c 93       	st	X, r24

        Local_u8_ErrorFlag =ES_OK;
    2f88:	19 82       	std	Y+1, r1	; 0x01
    2f8a:	02 c0       	rjmp	.+4      	; 0x2f90 <ADC_enu_SetTriggerringSource+0x78>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2f8c:	82 e0       	ldi	r24, 0x02	; 2
    2f8e:	89 83       	std	Y+1, r24	; 0x01
    }
        
        

    return Local_u8_ErrorFlag;
    2f90:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f92:	0f 90       	pop	r0
    2f94:	0f 90       	pop	r0
    2f96:	cf 91       	pop	r28
    2f98:	df 91       	pop	r29
    2f9a:	08 95       	ret

00002f9c <ADC_enu_ChangePrescalerFactor>:

extern ErrorState_t ADC_enu_ChangePrescalerFactor(u8 Copy_u8_DivisonFactor)
{
    2f9c:	df 93       	push	r29
    2f9e:	cf 93       	push	r28
    2fa0:	00 d0       	rcall	.+0      	; 0x2fa2 <ADC_enu_ChangePrescalerFactor+0x6>
    2fa2:	cd b7       	in	r28, 0x3d	; 61
    2fa4:	de b7       	in	r29, 0x3e	; 62
    2fa6:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    2fa8:	81 e0       	ldi	r24, 0x01	; 1
    2faa:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_DivisonFactor >= ADC_PS_2) && (Copy_u8_DivisonFactor <= ADC_PS_128))
    2fac:	8a 81       	ldd	r24, Y+2	; 0x02
    2fae:	88 23       	and	r24, r24
    2fb0:	a1 f0       	breq	.+40     	; 0x2fda <ADC_enu_ChangePrescalerFactor+0x3e>
    2fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb4:	88 30       	cpi	r24, 0x08	; 8
    2fb6:	88 f4       	brcc	.+34     	; 0x2fda <ADC_enu_ChangePrescalerFactor+0x3e>
    {
        //Clearins PS bits
        ADCSRA &= ~ (7 << ADCSRA_ADPS0);
    2fb8:	a6 e2       	ldi	r26, 0x26	; 38
    2fba:	b0 e0       	ldi	r27, 0x00	; 0
    2fbc:	e6 e2       	ldi	r30, 0x26	; 38
    2fbe:	f0 e0       	ldi	r31, 0x00	; 0
    2fc0:	80 81       	ld	r24, Z
    2fc2:	88 7f       	andi	r24, 0xF8	; 248
    2fc4:	8c 93       	st	X, r24

        //Choosing divisuon factor
        ADCSRA |=  (Copy_u8_DivisonFactor << ADCSRA_ADPS0);
    2fc6:	a6 e2       	ldi	r26, 0x26	; 38
    2fc8:	b0 e0       	ldi	r27, 0x00	; 0
    2fca:	e6 e2       	ldi	r30, 0x26	; 38
    2fcc:	f0 e0       	ldi	r31, 0x00	; 0
    2fce:	90 81       	ld	r25, Z
    2fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd2:	89 2b       	or	r24, r25
    2fd4:	8c 93       	st	X, r24

        Local_u8_ErrorFlag = ES_OK;
    2fd6:	19 82       	std	Y+1, r1	; 0x01
    2fd8:	02 c0       	rjmp	.+4      	; 0x2fde <ADC_enu_ChangePrescalerFactor+0x42>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    2fda:	82 e0       	ldi	r24, 0x02	; 2
    2fdc:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8_ErrorFlag;
    2fde:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fe0:	0f 90       	pop	r0
    2fe2:	0f 90       	pop	r0
    2fe4:	cf 91       	pop	r28
    2fe6:	df 91       	pop	r29
    2fe8:	08 95       	ret

00002fea <ADC_enu_ReadADCH>:

extern ErrorState_t ADC_enu_ReadADCH(u16* Copy_pu16_Result)
{
    2fea:	df 93       	push	r29
    2fec:	cf 93       	push	r28
    2fee:	00 d0       	rcall	.+0      	; 0x2ff0 <ADC_enu_ReadADCH+0x6>
    2ff0:	0f 92       	push	r0
    2ff2:	cd b7       	in	r28, 0x3d	; 61
    2ff4:	de b7       	in	r29, 0x3e	; 62
    2ff6:	9b 83       	std	Y+3, r25	; 0x03
    2ff8:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    2ffa:	81 e0       	ldi	r24, 0x01	; 1
    2ffc:	89 83       	std	Y+1, r24	; 0x01


    if(Copy_pu16_Result)
    2ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    3000:	9b 81       	ldd	r25, Y+3	; 0x03
    3002:	00 97       	sbiw	r24, 0x00	; 0
    3004:	79 f0       	breq	.+30     	; 0x3024 <ADC_enu_ReadADCH+0x3a>
            
            *Copy_pu16_Result = (u16)ADCH << 8;
        
        #else ADC_DATA_ADJUSTMENT == ADC_LEFT_ADJUSTED

                *Copy_pu16_Result = (u16)ADCH << 2;
    3006:	e5 e2       	ldi	r30, 0x25	; 37
    3008:	f0 e0       	ldi	r31, 0x00	; 0
    300a:	80 81       	ld	r24, Z
    300c:	88 2f       	mov	r24, r24
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	88 0f       	add	r24, r24
    3012:	99 1f       	adc	r25, r25
    3014:	88 0f       	add	r24, r24
    3016:	99 1f       	adc	r25, r25
    3018:	ea 81       	ldd	r30, Y+2	; 0x02
    301a:	fb 81       	ldd	r31, Y+3	; 0x03
    301c:	91 83       	std	Z+1, r25	; 0x01
    301e:	80 83       	st	Z, r24

        #endif

        Local_u8_ErrorFlag = ES_OK;
    3020:	19 82       	std	Y+1, r1	; 0x01
    3022:	02 c0       	rjmp	.+4      	; 0x3028 <ADC_enu_ReadADCH+0x3e>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    3024:	83 e0       	ldi	r24, 0x03	; 3
    3026:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag; 
    3028:	89 81       	ldd	r24, Y+1	; 0x01
}
    302a:	0f 90       	pop	r0
    302c:	0f 90       	pop	r0
    302e:	0f 90       	pop	r0
    3030:	cf 91       	pop	r28
    3032:	df 91       	pop	r29
    3034:	08 95       	ret

00003036 <ADC_enu_ReadADCL>:

extern ErrorState_t ADC_enu_ReadADCL(u16* Copy_pu16_Result)
{
    3036:	df 93       	push	r29
    3038:	cf 93       	push	r28
    303a:	00 d0       	rcall	.+0      	; 0x303c <ADC_enu_ReadADCL+0x6>
    303c:	0f 92       	push	r0
    303e:	cd b7       	in	r28, 0x3d	; 61
    3040:	de b7       	in	r29, 0x3e	; 62
    3042:	9b 83       	std	Y+3, r25	; 0x03
    3044:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3046:	81 e0       	ldi	r24, 0x01	; 1
    3048:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu16_Result)
    304a:	8a 81       	ldd	r24, Y+2	; 0x02
    304c:	9b 81       	ldd	r25, Y+3	; 0x03
    304e:	00 97       	sbiw	r24, 0x00	; 0
    3050:	11 f0       	breq	.+4      	; 0x3056 <ADC_enu_ReadADCL+0x20>

            

        #endif

        Local_u8_ErrorFlag = ES_OK;
    3052:	19 82       	std	Y+1, r1	; 0x01
    3054:	02 c0       	rjmp	.+4      	; 0x305a <ADC_enu_ReadADCL+0x24>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    3056:	83 e0       	ldi	r24, 0x03	; 3
    3058:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag; 
    305a:	89 81       	ldd	r24, Y+1	; 0x01
}
    305c:	0f 90       	pop	r0
    305e:	0f 90       	pop	r0
    3060:	0f 90       	pop	r0
    3062:	cf 91       	pop	r28
    3064:	df 91       	pop	r29
    3066:	08 95       	ret

00003068 <ADC_enu_ReadData>:

extern ErrorState_t ADC_enu_ReadData(u16* Copy_pu16_Result)
{
    3068:	df 93       	push	r29
    306a:	cf 93       	push	r28
    306c:	00 d0       	rcall	.+0      	; 0x306e <ADC_enu_ReadData+0x6>
    306e:	0f 92       	push	r0
    3070:	cd b7       	in	r28, 0x3d	; 61
    3072:	de b7       	in	r29, 0x3e	; 62
    3074:	9b 83       	std	Y+3, r25	; 0x03
    3076:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    3078:	81 e0       	ldi	r24, 0x01	; 1
    307a:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu16_Result)
    307c:	8a 81       	ldd	r24, Y+2	; 0x02
    307e:	9b 81       	ldd	r25, Y+3	; 0x03
    3080:	00 97       	sbiw	r24, 0x00	; 0
    3082:	11 f1       	breq	.+68     	; 0x30c8 <ADC_enu_ReadData+0x60>
    {
        #if ADC_DATA_ADJUSTMENT == ADC_LEFT_ADJUSTED 

            //ADCL must be read first
            *Copy_pu16_Result = (ADCL >> 6);
    3084:	e4 e2       	ldi	r30, 0x24	; 36
    3086:	f0 e0       	ldi	r31, 0x00	; 0
    3088:	80 81       	ld	r24, Z
    308a:	82 95       	swap	r24
    308c:	86 95       	lsr	r24
    308e:	86 95       	lsr	r24
    3090:	83 70       	andi	r24, 0x03	; 3
    3092:	88 2f       	mov	r24, r24
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	ea 81       	ldd	r30, Y+2	; 0x02
    3098:	fb 81       	ldd	r31, Y+3	; 0x03
    309a:	91 83       	std	Z+1, r25	; 0x01
    309c:	80 83       	st	Z, r24
            //ADCH is then read
            *Copy_pu16_Result |= ((u16)ADCH << 2);
    309e:	ea 81       	ldd	r30, Y+2	; 0x02
    30a0:	fb 81       	ldd	r31, Y+3	; 0x03
    30a2:	20 81       	ld	r18, Z
    30a4:	31 81       	ldd	r19, Z+1	; 0x01
    30a6:	e5 e2       	ldi	r30, 0x25	; 37
    30a8:	f0 e0       	ldi	r31, 0x00	; 0
    30aa:	80 81       	ld	r24, Z
    30ac:	88 2f       	mov	r24, r24
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	88 0f       	add	r24, r24
    30b2:	99 1f       	adc	r25, r25
    30b4:	88 0f       	add	r24, r24
    30b6:	99 1f       	adc	r25, r25
    30b8:	82 2b       	or	r24, r18
    30ba:	93 2b       	or	r25, r19
    30bc:	ea 81       	ldd	r30, Y+2	; 0x02
    30be:	fb 81       	ldd	r31, Y+3	; 0x03
    30c0:	91 83       	std	Z+1, r25	; 0x01
    30c2:	80 83       	st	Z, r24

        #endif

        

        Local_u8_ErrorFlag = ES_OK;
    30c4:	19 82       	std	Y+1, r1	; 0x01
    30c6:	02 c0       	rjmp	.+4      	; 0x30cc <ADC_enu_ReadData+0x64>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    30c8:	83 e0       	ldi	r24, 0x03	; 3
    30ca:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8_ErrorFlag;
    30cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    30ce:	0f 90       	pop	r0
    30d0:	0f 90       	pop	r0
    30d2:	0f 90       	pop	r0
    30d4:	cf 91       	pop	r28
    30d6:	df 91       	pop	r29
    30d8:	08 95       	ret

000030da <ADC_enu_EnableINT>:

extern ErrorState_t ADC_enu_EnableINT(void)
{
    30da:	df 93       	push	r29
    30dc:	cf 93       	push	r28
    30de:	0f 92       	push	r0
    30e0:	cd b7       	in	r28, 0x3d	; 61
    30e2:	de b7       	in	r29, 0x3e	; 62
    
    u8 Local_u8_ErrorFlag = ES_NOK;
    30e4:	81 e0       	ldi	r24, 0x01	; 1
    30e6:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA |= (1 << ADCSRA_ADIE);
    30e8:	a6 e2       	ldi	r26, 0x26	; 38
    30ea:	b0 e0       	ldi	r27, 0x00	; 0
    30ec:	e6 e2       	ldi	r30, 0x26	; 38
    30ee:	f0 e0       	ldi	r31, 0x00	; 0
    30f0:	80 81       	ld	r24, Z
    30f2:	88 60       	ori	r24, 0x08	; 8
    30f4:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    30f6:	19 82       	std	Y+1, r1	; 0x01
    
    return Local_u8_ErrorFlag;
    30f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    30fa:	0f 90       	pop	r0
    30fc:	cf 91       	pop	r28
    30fe:	df 91       	pop	r29
    3100:	08 95       	ret

00003102 <ADC_enu_DisableINT>:

extern ErrorState_t ADC_enu_DisableINT(void)
{
    3102:	df 93       	push	r29
    3104:	cf 93       	push	r28
    3106:	0f 92       	push	r0
    3108:	cd b7       	in	r28, 0x3d	; 61
    310a:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    310c:	81 e0       	ldi	r24, 0x01	; 1
    310e:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA &= ~(1 << ADCSRA_ADIE);
    3110:	a6 e2       	ldi	r26, 0x26	; 38
    3112:	b0 e0       	ldi	r27, 0x00	; 0
    3114:	e6 e2       	ldi	r30, 0x26	; 38
    3116:	f0 e0       	ldi	r31, 0x00	; 0
    3118:	80 81       	ld	r24, Z
    311a:	87 7f       	andi	r24, 0xF7	; 247
    311c:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    311e:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    3120:	89 81       	ldd	r24, Y+1	; 0x01
}
    3122:	0f 90       	pop	r0
    3124:	cf 91       	pop	r28
    3126:	df 91       	pop	r29
    3128:	08 95       	ret

0000312a <ADC_enu_EnableADC>:

extern ErrorState_t ADC_enu_EnableADC(void)
{
    312a:	df 93       	push	r29
    312c:	cf 93       	push	r28
    312e:	0f 92       	push	r0
    3130:	cd b7       	in	r28, 0x3d	; 61
    3132:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3134:	81 e0       	ldi	r24, 0x01	; 1
    3136:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA |= (1 << ADCSRA_ADEN);
    3138:	a6 e2       	ldi	r26, 0x26	; 38
    313a:	b0 e0       	ldi	r27, 0x00	; 0
    313c:	e6 e2       	ldi	r30, 0x26	; 38
    313e:	f0 e0       	ldi	r31, 0x00	; 0
    3140:	80 81       	ld	r24, Z
    3142:	80 68       	ori	r24, 0x80	; 128
    3144:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    3146:	19 82       	std	Y+1, r1	; 0x01
    
    return Local_u8_ErrorFlag;
    3148:	89 81       	ldd	r24, Y+1	; 0x01

}
    314a:	0f 90       	pop	r0
    314c:	cf 91       	pop	r28
    314e:	df 91       	pop	r29
    3150:	08 95       	ret

00003152 <ADC_enu_DisableADC>:

extern ErrorState_t ADC_enu_DisableADC(void)
{
    3152:	df 93       	push	r29
    3154:	cf 93       	push	r28
    3156:	0f 92       	push	r0
    3158:	cd b7       	in	r28, 0x3d	; 61
    315a:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    315c:	81 e0       	ldi	r24, 0x01	; 1
    315e:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA &= ~(1 << ADCSRA_ADEN);
    3160:	a6 e2       	ldi	r26, 0x26	; 38
    3162:	b0 e0       	ldi	r27, 0x00	; 0
    3164:	e6 e2       	ldi	r30, 0x26	; 38
    3166:	f0 e0       	ldi	r31, 0x00	; 0
    3168:	80 81       	ld	r24, Z
    316a:	8f 77       	andi	r24, 0x7F	; 127
    316c:	8c 93       	st	X, r24

    Local_u8_ErrorFlag = ES_OK;
    316e:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
    3170:	89 81       	ldd	r24, Y+1	; 0x01

}
    3172:	0f 90       	pop	r0
    3174:	cf 91       	pop	r28
    3176:	df 91       	pop	r29
    3178:	08 95       	ret

0000317a <ADC_enu_SetCallBack>:

extern ErrorState_t ADC_enu_SetCallBack(void (*Copy_pfun_AppFunction)(void), void* Copy_u8_Parameters)
{
    317a:	df 93       	push	r29
    317c:	cf 93       	push	r28
    317e:	00 d0       	rcall	.+0      	; 0x3180 <ADC_enu_SetCallBack+0x6>
    3180:	00 d0       	rcall	.+0      	; 0x3182 <ADC_enu_SetCallBack+0x8>
    3182:	0f 92       	push	r0
    3184:	cd b7       	in	r28, 0x3d	; 61
    3186:	de b7       	in	r29, 0x3e	; 62
    3188:	9b 83       	std	Y+3, r25	; 0x03
    318a:	8a 83       	std	Y+2, r24	; 0x02
    318c:	7d 83       	std	Y+5, r23	; 0x05
    318e:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
    3190:	81 e0       	ldi	r24, 0x01	; 1
    3192:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pfun_AppFunction)
    3194:	8a 81       	ldd	r24, Y+2	; 0x02
    3196:	9b 81       	ldd	r25, Y+3	; 0x03
    3198:	00 97       	sbiw	r24, 0x00	; 0
    319a:	69 f0       	breq	.+26     	; 0x31b6 <ADC_enu_SetCallBack+0x3c>
    {
        pfun_ISRPointer = Copy_pfun_AppFunction;
    319c:	8a 81       	ldd	r24, Y+2	; 0x02
    319e:	9b 81       	ldd	r25, Y+3	; 0x03
    31a0:	90 93 a7 00 	sts	0x00A7, r25
    31a4:	80 93 a6 00 	sts	0x00A6, r24

        pvid_ISRParameters = Copy_u8_Parameters;
    31a8:	8c 81       	ldd	r24, Y+4	; 0x04
    31aa:	9d 81       	ldd	r25, Y+5	; 0x05
    31ac:	90 93 a9 00 	sts	0x00A9, r25
    31b0:	80 93 a8 00 	sts	0x00A8, r24
        
        Local_u8_ErrorFlag = ES_OK;
    31b4:	19 82       	std	Y+1, r1	; 0x01
    }

    return Local_u8_ErrorFlag;
    31b6:	89 81       	ldd	r24, Y+1	; 0x01
    
}
    31b8:	0f 90       	pop	r0
    31ba:	0f 90       	pop	r0
    31bc:	0f 90       	pop	r0
    31be:	0f 90       	pop	r0
    31c0:	0f 90       	pop	r0
    31c2:	cf 91       	pop	r28
    31c4:	df 91       	pop	r29
    31c6:	08 95       	ret

000031c8 <__vector_16>:

//ISR functions

void __vector_16 (void)__attribute__((signal));
void __vector_16 (void)
{
    31c8:	1f 92       	push	r1
    31ca:	0f 92       	push	r0
    31cc:	0f b6       	in	r0, 0x3f	; 63
    31ce:	0f 92       	push	r0
    31d0:	11 24       	eor	r1, r1
    31d2:	2f 93       	push	r18
    31d4:	3f 93       	push	r19
    31d6:	4f 93       	push	r20
    31d8:	5f 93       	push	r21
    31da:	6f 93       	push	r22
    31dc:	7f 93       	push	r23
    31de:	8f 93       	push	r24
    31e0:	9f 93       	push	r25
    31e2:	af 93       	push	r26
    31e4:	bf 93       	push	r27
    31e6:	ef 93       	push	r30
    31e8:	ff 93       	push	r31
    31ea:	df 93       	push	r29
    31ec:	cf 93       	push	r28
    31ee:	cd b7       	in	r28, 0x3d	; 61
    31f0:	de b7       	in	r29, 0x3e	; 62
    if (pfun_ISRPointer != NULL)
    31f2:	80 91 a6 00 	lds	r24, 0x00A6
    31f6:	90 91 a7 00 	lds	r25, 0x00A7
    31fa:	00 97       	sbiw	r24, 0x00	; 0
    31fc:	49 f0       	breq	.+18     	; 0x3210 <__vector_16+0x48>
    {
        pfun_ISRPointer (pvid_ISRParameters);
    31fe:	e0 91 a6 00 	lds	r30, 0x00A6
    3202:	f0 91 a7 00 	lds	r31, 0x00A7
    3206:	80 91 a8 00 	lds	r24, 0x00A8
    320a:	90 91 a9 00 	lds	r25, 0x00A9
    320e:	09 95       	icall
    }
    3210:	cf 91       	pop	r28
    3212:	df 91       	pop	r29
    3214:	ff 91       	pop	r31
    3216:	ef 91       	pop	r30
    3218:	bf 91       	pop	r27
    321a:	af 91       	pop	r26
    321c:	9f 91       	pop	r25
    321e:	8f 91       	pop	r24
    3220:	7f 91       	pop	r23
    3222:	6f 91       	pop	r22
    3224:	5f 91       	pop	r21
    3226:	4f 91       	pop	r20
    3228:	3f 91       	pop	r19
    322a:	2f 91       	pop	r18
    322c:	0f 90       	pop	r0
    322e:	0f be       	out	0x3f, r0	; 63
    3230:	0f 90       	pop	r0
    3232:	1f 90       	pop	r1
    3234:	18 95       	reti

00003236 <LED_enu_Initialization>:

extern LED_t LED_astr_LEDsList [];

//APIs' implementations
extern ErrorState_t LED_enu_Initialization(void)
{
    3236:	df 93       	push	r29
    3238:	cf 93       	push	r28
    323a:	00 d0       	rcall	.+0      	; 0x323c <LED_enu_Initialization+0x6>
    323c:	cd b7       	in	r28, 0x3d	; 61
    323e:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3240:	81 e0       	ldi	r24, 0x01	; 1
    3242:	8a 83       	std	Y+2, r24	; 0x02
    
    u8 Local_u8_Counter = 0;
    3244:	19 82       	std	Y+1, r1	; 0x01
    
    for (Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++ )
    3246:	19 82       	std	Y+1, r1	; 0x01
    3248:	31 c0       	rjmp	.+98     	; 0x32ac <LED_enu_Initialization+0x76>
    {
        DIO_enu_SetPinDiretion(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_PIN_WRITE);
    324a:	89 81       	ldd	r24, Y+1	; 0x01
    324c:	88 2f       	mov	r24, r24
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	88 0f       	add	r24, r24
    3252:	99 1f       	adc	r25, r25
    3254:	fc 01       	movw	r30, r24
    3256:	e8 58       	subi	r30, 0x88	; 136
    3258:	ff 4f       	sbci	r31, 0xFF	; 255
    325a:	20 81       	ld	r18, Z
    325c:	89 81       	ldd	r24, Y+1	; 0x01
    325e:	88 2f       	mov	r24, r24
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	88 0f       	add	r24, r24
    3264:	99 1f       	adc	r25, r25
    3266:	fc 01       	movw	r30, r24
    3268:	e7 58       	subi	r30, 0x87	; 135
    326a:	ff 4f       	sbci	r31, 0xFF	; 255
    326c:	90 81       	ld	r25, Z
    326e:	82 2f       	mov	r24, r18
    3270:	69 2f       	mov	r22, r25
    3272:	41 e0       	ldi	r20, 0x01	; 1
    3274:	0e 94 b7 12 	call	0x256e	; 0x256e <DIO_enu_SetPinDiretion>
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    3278:	89 81       	ldd	r24, Y+1	; 0x01
    327a:	88 2f       	mov	r24, r24
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	88 0f       	add	r24, r24
    3280:	99 1f       	adc	r25, r25
    3282:	fc 01       	movw	r30, r24
    3284:	e8 58       	subi	r30, 0x88	; 136
    3286:	ff 4f       	sbci	r31, 0xFF	; 255
    3288:	20 81       	ld	r18, Z
    328a:	89 81       	ldd	r24, Y+1	; 0x01
    328c:	88 2f       	mov	r24, r24
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	88 0f       	add	r24, r24
    3292:	99 1f       	adc	r25, r25
    3294:	fc 01       	movw	r30, r24
    3296:	e7 58       	subi	r30, 0x87	; 135
    3298:	ff 4f       	sbci	r31, 0xFF	; 255
    329a:	90 81       	ld	r25, Z
    329c:	82 2f       	mov	r24, r18
    329e:	69 2f       	mov	r22, r25
    32a0:	40 e0       	ldi	r20, 0x00	; 0
    32a2:	0e 94 8f 14 	call	0x291e	; 0x291e <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    
    u8 Local_u8_Counter = 0;
    
    for (Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++ )
    32a6:	89 81       	ldd	r24, Y+1	; 0x01
    32a8:	8f 5f       	subi	r24, 0xFF	; 255
    32aa:	89 83       	std	Y+1, r24	; 0x01
    32ac:	90 91 77 00 	lds	r25, 0x0077
    32b0:	89 81       	ldd	r24, Y+1	; 0x01
    32b2:	89 17       	cp	r24, r25
    32b4:	50 f2       	brcs	.-108    	; 0x324a <LED_enu_Initialization+0x14>
    {
        DIO_enu_SetPinDiretion(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_PIN_WRITE);
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    }

    Local_u8_ErrorFlag = ES_OK;
    32b6:	1a 82       	std	Y+2, r1	; 0x02

    return Local_u8_ErrorFlag;
    32b8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    32ba:	0f 90       	pop	r0
    32bc:	0f 90       	pop	r0
    32be:	cf 91       	pop	r28
    32c0:	df 91       	pop	r29
    32c2:	08 95       	ret

000032c4 <LED_enu_TurnOnLED>:

extern ErrorState_t LED_enu_TurnOnLED(u8 Copy_u8_LEDNumber)
{
    32c4:	df 93       	push	r29
    32c6:	cf 93       	push	r28
    32c8:	00 d0       	rcall	.+0      	; 0x32ca <LED_enu_TurnOnLED+0x6>
    32ca:	cd b7       	in	r28, 0x3d	; 61
    32cc:	de b7       	in	r29, 0x3e	; 62
    32ce:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    32d0:	81 e0       	ldi	r24, 0x01	; 1
    32d2:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_LEDNumber < LED_u8_LEDsCount)
    32d4:	90 91 77 00 	lds	r25, 0x0077
    32d8:	8a 81       	ldd	r24, Y+2	; 0x02
    32da:	89 17       	cp	r24, r25
    32dc:	c8 f4       	brcc	.+50     	; 0x3310 <LED_enu_TurnOnLED+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Group,LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Pin,DIO_HIGH);
    32de:	8a 81       	ldd	r24, Y+2	; 0x02
    32e0:	88 2f       	mov	r24, r24
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	88 0f       	add	r24, r24
    32e6:	99 1f       	adc	r25, r25
    32e8:	fc 01       	movw	r30, r24
    32ea:	e8 58       	subi	r30, 0x88	; 136
    32ec:	ff 4f       	sbci	r31, 0xFF	; 255
    32ee:	20 81       	ld	r18, Z
    32f0:	8a 81       	ldd	r24, Y+2	; 0x02
    32f2:	88 2f       	mov	r24, r24
    32f4:	90 e0       	ldi	r25, 0x00	; 0
    32f6:	88 0f       	add	r24, r24
    32f8:	99 1f       	adc	r25, r25
    32fa:	fc 01       	movw	r30, r24
    32fc:	e7 58       	subi	r30, 0x87	; 135
    32fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3300:	90 81       	ld	r25, Z
    3302:	82 2f       	mov	r24, r18
    3304:	69 2f       	mov	r22, r25
    3306:	41 e0       	ldi	r20, 0x01	; 1
    3308:	0e 94 8f 14 	call	0x291e	; 0x291e <DIO_enu_SetPinValue>
    330c:	89 83       	std	Y+1, r24	; 0x01
    330e:	02 c0       	rjmp	.+4      	; 0x3314 <LED_enu_TurnOnLED+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    3310:	82 e0       	ldi	r24, 0x02	; 2
    3312:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    3314:	89 81       	ldd	r24, Y+1	; 0x01
}
    3316:	0f 90       	pop	r0
    3318:	0f 90       	pop	r0
    331a:	cf 91       	pop	r28
    331c:	df 91       	pop	r29
    331e:	08 95       	ret

00003320 <LED_enu_TurnOffLED>:

extern ErrorState_t LED_enu_TurnOffLED(u8 Copy_u8_LEDNumber)
{
    3320:	df 93       	push	r29
    3322:	cf 93       	push	r28
    3324:	00 d0       	rcall	.+0      	; 0x3326 <LED_enu_TurnOffLED+0x6>
    3326:	cd b7       	in	r28, 0x3d	; 61
    3328:	de b7       	in	r29, 0x3e	; 62
    332a:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    332c:	81 e0       	ldi	r24, 0x01	; 1
    332e:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_LEDNumber <= LED_u8_LEDsCount)
    3330:	90 91 77 00 	lds	r25, 0x0077
    3334:	8a 81       	ldd	r24, Y+2	; 0x02
    3336:	98 17       	cp	r25, r24
    3338:	c8 f0       	brcs	.+50     	; 0x336c <LED_enu_TurnOffLED+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Group,LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Pin,DIO_LOW);
    333a:	8a 81       	ldd	r24, Y+2	; 0x02
    333c:	88 2f       	mov	r24, r24
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	88 0f       	add	r24, r24
    3342:	99 1f       	adc	r25, r25
    3344:	fc 01       	movw	r30, r24
    3346:	e8 58       	subi	r30, 0x88	; 136
    3348:	ff 4f       	sbci	r31, 0xFF	; 255
    334a:	20 81       	ld	r18, Z
    334c:	8a 81       	ldd	r24, Y+2	; 0x02
    334e:	88 2f       	mov	r24, r24
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	88 0f       	add	r24, r24
    3354:	99 1f       	adc	r25, r25
    3356:	fc 01       	movw	r30, r24
    3358:	e7 58       	subi	r30, 0x87	; 135
    335a:	ff 4f       	sbci	r31, 0xFF	; 255
    335c:	90 81       	ld	r25, Z
    335e:	82 2f       	mov	r24, r18
    3360:	69 2f       	mov	r22, r25
    3362:	40 e0       	ldi	r20, 0x00	; 0
    3364:	0e 94 8f 14 	call	0x291e	; 0x291e <DIO_enu_SetPinValue>
    3368:	89 83       	std	Y+1, r24	; 0x01
    336a:	02 c0       	rjmp	.+4      	; 0x3370 <LED_enu_TurnOffLED+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    336c:	82 e0       	ldi	r24, 0x02	; 2
    336e:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    3370:	89 81       	ldd	r24, Y+1	; 0x01
}
    3372:	0f 90       	pop	r0
    3374:	0f 90       	pop	r0
    3376:	cf 91       	pop	r28
    3378:	df 91       	pop	r29
    337a:	08 95       	ret

0000337c <LED_enu_TurnOnCombination>:

extern ErrorState_t LED_enu_TurnOnCombination(u8 Copy_u8_Combination)
{
    337c:	df 93       	push	r29
    337e:	cf 93       	push	r28
    3380:	00 d0       	rcall	.+0      	; 0x3382 <LED_enu_TurnOnCombination+0x6>
    3382:	00 d0       	rcall	.+0      	; 0x3384 <LED_enu_TurnOnCombination+0x8>
    3384:	cd b7       	in	r28, 0x3d	; 61
    3386:	de b7       	in	r29, 0x3e	; 62
    3388:	8c 83       	std	Y+4, r24	; 0x04
    u8 Local_u8_ErrorFlag = ES_OK;
    338a:	1b 82       	std	Y+3, r1	; 0x03
    
    u8 Local_u8_TempErrorFlag = ES_OK;
    338c:	1a 82       	std	Y+2, r1	; 0x02


    if(Copy_u8_Combination <= 7 )
    338e:	8c 81       	ldd	r24, Y+4	; 0x04
    3390:	88 30       	cpi	r24, 0x08	; 8
    3392:	d8 f5       	brcc	.+118    	; 0x340a <LED_enu_TurnOnCombination+0x8e>
    {
        s8 Local_s8_Counter = 0;
    3394:	19 82       	std	Y+1, r1	; 0x01

        for(Local_s8_Counter = Copy_u8_Combination - 1; Local_s8_Counter >= 0; Local_s8_Counter-- )
    3396:	8c 81       	ldd	r24, Y+4	; 0x04
    3398:	81 50       	subi	r24, 0x01	; 1
    339a:	89 83       	std	Y+1, r24	; 0x01
    339c:	32 c0       	rjmp	.+100    	; 0x3402 <LED_enu_TurnOnCombination+0x86>
        {
           Local_u8_TempErrorFlag = DIO_enu_SetPinValue(LED_astr_LEDsList[Local_s8_Counter].LED_Group, LED_astr_LEDsList[Local_s8_Counter].LED_Pin, (Copy_u8_Combination >> Local_s8_Counter) & 1 );
    339e:	89 81       	ldd	r24, Y+1	; 0x01
    33a0:	99 27       	eor	r25, r25
    33a2:	87 fd       	sbrc	r24, 7
    33a4:	90 95       	com	r25
    33a6:	88 0f       	add	r24, r24
    33a8:	99 1f       	adc	r25, r25
    33aa:	fc 01       	movw	r30, r24
    33ac:	e8 58       	subi	r30, 0x88	; 136
    33ae:	ff 4f       	sbci	r31, 0xFF	; 255
    33b0:	50 81       	ld	r21, Z
    33b2:	89 81       	ldd	r24, Y+1	; 0x01
    33b4:	99 27       	eor	r25, r25
    33b6:	87 fd       	sbrc	r24, 7
    33b8:	90 95       	com	r25
    33ba:	88 0f       	add	r24, r24
    33bc:	99 1f       	adc	r25, r25
    33be:	fc 01       	movw	r30, r24
    33c0:	e7 58       	subi	r30, 0x87	; 135
    33c2:	ff 4f       	sbci	r31, 0xFF	; 255
    33c4:	40 81       	ld	r20, Z
    33c6:	8c 81       	ldd	r24, Y+4	; 0x04
    33c8:	28 2f       	mov	r18, r24
    33ca:	30 e0       	ldi	r19, 0x00	; 0
    33cc:	89 81       	ldd	r24, Y+1	; 0x01
    33ce:	99 27       	eor	r25, r25
    33d0:	87 fd       	sbrc	r24, 7
    33d2:	90 95       	com	r25
    33d4:	b9 01       	movw	r22, r18
    33d6:	02 c0       	rjmp	.+4      	; 0x33dc <LED_enu_TurnOnCombination+0x60>
    33d8:	75 95       	asr	r23
    33da:	67 95       	ror	r22
    33dc:	8a 95       	dec	r24
    33de:	e2 f7       	brpl	.-8      	; 0x33d8 <LED_enu_TurnOnCombination+0x5c>
    33e0:	cb 01       	movw	r24, r22
    33e2:	98 2f       	mov	r25, r24
    33e4:	91 70       	andi	r25, 0x01	; 1
    33e6:	85 2f       	mov	r24, r21
    33e8:	64 2f       	mov	r22, r20
    33ea:	49 2f       	mov	r20, r25
    33ec:	0e 94 8f 14 	call	0x291e	; 0x291e <DIO_enu_SetPinValue>
    33f0:	8a 83       	std	Y+2, r24	; 0x02

            if(Local_u8_TempErrorFlag == ES_NOK)
    33f2:	8a 81       	ldd	r24, Y+2	; 0x02
    33f4:	81 30       	cpi	r24, 0x01	; 1
    33f6:	11 f4       	brne	.+4      	; 0x33fc <LED_enu_TurnOnCombination+0x80>
            {
                Local_u8_ErrorFlag = ES_NOK;
    33f8:	81 e0       	ldi	r24, 0x01	; 1
    33fa:	8b 83       	std	Y+3, r24	; 0x03

    if(Copy_u8_Combination <= 7 )
    {
        s8 Local_s8_Counter = 0;

        for(Local_s8_Counter = Copy_u8_Combination - 1; Local_s8_Counter >= 0; Local_s8_Counter-- )
    33fc:	89 81       	ldd	r24, Y+1	; 0x01
    33fe:	81 50       	subi	r24, 0x01	; 1
    3400:	89 83       	std	Y+1, r24	; 0x01
    3402:	89 81       	ldd	r24, Y+1	; 0x01
    3404:	88 23       	and	r24, r24
    3406:	5c f6       	brge	.-106    	; 0x339e <LED_enu_TurnOnCombination+0x22>
    3408:	02 c0       	rjmp	.+4      	; 0x340e <LED_enu_TurnOnCombination+0x92>
        }
        
    } 
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    340a:	82 e0       	ldi	r24, 0x02	; 2
    340c:	8b 83       	std	Y+3, r24	; 0x03
    }

    return Local_u8_ErrorFlag;
    340e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3410:	0f 90       	pop	r0
    3412:	0f 90       	pop	r0
    3414:	0f 90       	pop	r0
    3416:	0f 90       	pop	r0
    3418:	cf 91       	pop	r28
    341a:	df 91       	pop	r29
    341c:	08 95       	ret

0000341e <LED_enu_TurnOnAllLEDs>:

extern ErrorState_t LED_enu_TurnOnAllLEDs (void)
{
    341e:	df 93       	push	r29
    3420:	cf 93       	push	r28
    3422:	00 d0       	rcall	.+0      	; 0x3424 <LED_enu_TurnOnAllLEDs+0x6>
    3424:	cd b7       	in	r28, 0x3d	; 61
    3426:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3428:	81 e0       	ldi	r24, 0x01	; 1
    342a:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    342c:	19 82       	std	Y+1, r1	; 0x01

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    342e:	19 82       	std	Y+1, r1	; 0x01
    3430:	1a c0       	rjmp	.+52     	; 0x3466 <LED_enu_TurnOnAllLEDs+0x48>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_HIGH);
    3432:	89 81       	ldd	r24, Y+1	; 0x01
    3434:	88 2f       	mov	r24, r24
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	88 0f       	add	r24, r24
    343a:	99 1f       	adc	r25, r25
    343c:	fc 01       	movw	r30, r24
    343e:	e8 58       	subi	r30, 0x88	; 136
    3440:	ff 4f       	sbci	r31, 0xFF	; 255
    3442:	20 81       	ld	r18, Z
    3444:	89 81       	ldd	r24, Y+1	; 0x01
    3446:	88 2f       	mov	r24, r24
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	88 0f       	add	r24, r24
    344c:	99 1f       	adc	r25, r25
    344e:	fc 01       	movw	r30, r24
    3450:	e7 58       	subi	r30, 0x87	; 135
    3452:	ff 4f       	sbci	r31, 0xFF	; 255
    3454:	90 81       	ld	r25, Z
    3456:	82 2f       	mov	r24, r18
    3458:	69 2f       	mov	r22, r25
    345a:	41 e0       	ldi	r20, 0x01	; 1
    345c:	0e 94 8f 14 	call	0x291e	; 0x291e <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    3460:	89 81       	ldd	r24, Y+1	; 0x01
    3462:	8f 5f       	subi	r24, 0xFF	; 255
    3464:	89 83       	std	Y+1, r24	; 0x01
    3466:	90 91 77 00 	lds	r25, 0x0077
    346a:	89 81       	ldd	r24, Y+1	; 0x01
    346c:	89 17       	cp	r24, r25
    346e:	08 f3       	brcs	.-62     	; 0x3432 <LED_enu_TurnOnAllLEDs+0x14>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_HIGH);
    }
    //Error Flags handling to be done later
    Local_u8_ErrorFlag = ES_OK;
    3470:	1a 82       	std	Y+2, r1	; 0x02

    return Local_u8_ErrorFlag;
    3472:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3474:	0f 90       	pop	r0
    3476:	0f 90       	pop	r0
    3478:	cf 91       	pop	r28
    347a:	df 91       	pop	r29
    347c:	08 95       	ret

0000347e <LED_enu_TurnOffAllLEDs>:

extern ErrorState_t LED_enu_TurnOffAllLEDs (void)
{
    347e:	df 93       	push	r29
    3480:	cf 93       	push	r28
    3482:	00 d0       	rcall	.+0      	; 0x3484 <LED_enu_TurnOffAllLEDs+0x6>
    3484:	cd b7       	in	r28, 0x3d	; 61
    3486:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    3488:	81 e0       	ldi	r24, 0x01	; 1
    348a:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    348c:	19 82       	std	Y+1, r1	; 0x01

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    348e:	19 82       	std	Y+1, r1	; 0x01
    3490:	1a c0       	rjmp	.+52     	; 0x34c6 <LED_enu_TurnOffAllLEDs+0x48>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    3492:	89 81       	ldd	r24, Y+1	; 0x01
    3494:	88 2f       	mov	r24, r24
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	88 0f       	add	r24, r24
    349a:	99 1f       	adc	r25, r25
    349c:	fc 01       	movw	r30, r24
    349e:	e8 58       	subi	r30, 0x88	; 136
    34a0:	ff 4f       	sbci	r31, 0xFF	; 255
    34a2:	20 81       	ld	r18, Z
    34a4:	89 81       	ldd	r24, Y+1	; 0x01
    34a6:	88 2f       	mov	r24, r24
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	88 0f       	add	r24, r24
    34ac:	99 1f       	adc	r25, r25
    34ae:	fc 01       	movw	r30, r24
    34b0:	e7 58       	subi	r30, 0x87	; 135
    34b2:	ff 4f       	sbci	r31, 0xFF	; 255
    34b4:	90 81       	ld	r25, Z
    34b6:	82 2f       	mov	r24, r18
    34b8:	69 2f       	mov	r22, r25
    34ba:	40 e0       	ldi	r20, 0x00	; 0
    34bc:	0e 94 8f 14 	call	0x291e	; 0x291e <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    34c0:	89 81       	ldd	r24, Y+1	; 0x01
    34c2:	8f 5f       	subi	r24, 0xFF	; 255
    34c4:	89 83       	std	Y+1, r24	; 0x01
    34c6:	90 91 77 00 	lds	r25, 0x0077
    34ca:	89 81       	ldd	r24, Y+1	; 0x01
    34cc:	89 17       	cp	r24, r25
    34ce:	08 f3       	brcs	.-62     	; 0x3492 <LED_enu_TurnOffAllLEDs+0x14>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    }
    
    //Error Flags handling to be done later
    Local_u8_ErrorFlag = ES_OK;
    34d0:	1a 82       	std	Y+2, r1	; 0x02
    
    return Local_u8_ErrorFlag;
    34d2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    34d4:	0f 90       	pop	r0
    34d6:	0f 90       	pop	r0
    34d8:	cf 91       	pop	r28
    34da:	df 91       	pop	r29
    34dc:	08 95       	ret

000034de <LED_enu_GetLEDCount>:

extern ErrorState_t LED_enu_GetLEDCount(u8* Copy_u8_Count)
{
    34de:	df 93       	push	r29
    34e0:	cf 93       	push	r28
    34e2:	00 d0       	rcall	.+0      	; 0x34e4 <LED_enu_GetLEDCount+0x6>
    34e4:	0f 92       	push	r0
    34e6:	cd b7       	in	r28, 0x3d	; 61
    34e8:	de b7       	in	r29, 0x3e	; 62
    34ea:	9b 83       	std	Y+3, r25	; 0x03
    34ec:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    34ee:	81 e0       	ldi	r24, 0x01	; 1
    34f0:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_Count)
    34f2:	8a 81       	ldd	r24, Y+2	; 0x02
    34f4:	9b 81       	ldd	r25, Y+3	; 0x03
    34f6:	00 97       	sbiw	r24, 0x00	; 0
    34f8:	39 f0       	breq	.+14     	; 0x3508 <LED_enu_GetLEDCount+0x2a>
    {
        *Copy_u8_Count = LED_u8_LEDsCount;
    34fa:	80 91 77 00 	lds	r24, 0x0077
    34fe:	ea 81       	ldd	r30, Y+2	; 0x02
    3500:	fb 81       	ldd	r31, Y+3	; 0x03
    3502:	80 83       	st	Z, r24

        Local_u8_ErrorFlag = ES_OK;
    3504:	19 82       	std	Y+1, r1	; 0x01
    3506:	02 c0       	rjmp	.+4      	; 0x350c <LED_enu_GetLEDCount+0x2e>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    3508:	83 e0       	ldi	r24, 0x03	; 3
    350a:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8_ErrorFlag;
    350c:	89 81       	ldd	r24, Y+1	; 0x01
    350e:	0f 90       	pop	r0
    3510:	0f 90       	pop	r0
    3512:	0f 90       	pop	r0
    3514:	cf 91       	pop	r28
    3516:	df 91       	pop	r29
    3518:	08 95       	ret

0000351a <main>:
#include "../MCAL/DIO/DIO_Interface.h"
#include <util/delay.h>

int main(void)
{
    351a:	df 93       	push	r29
    351c:	cf 93       	push	r28
    351e:	cd b7       	in	r28, 0x3d	; 61
    3520:	de b7       	in	r29, 0x3e	; 62
    3522:	6c 97       	sbiw	r28, 0x1c	; 28
    3524:	0f b6       	in	r0, 0x3f	; 63
    3526:	f8 94       	cli
    3528:	de bf       	out	0x3e, r29	; 62
    352a:	0f be       	out	0x3f, r0	; 63
    352c:	cd bf       	out	0x3d, r28	; 61
	DIO_enu_SetPinDiretion(DIO_PIN_GROUP_A, DIO_PIN_4, DIO_PIN_WRITE);
    352e:	80 e0       	ldi	r24, 0x00	; 0
    3530:	64 e0       	ldi	r22, 0x04	; 4
    3532:	41 e0       	ldi	r20, 0x01	; 1
    3534:	0e 94 b7 12 	call	0x256e	; 0x256e <DIO_enu_SetPinDiretion>
	DIO_enu_SetPinValue(DIO_PIN_GROUP_A, DIO_PIN_4, DIO_LOW);
    3538:	80 e0       	ldi	r24, 0x00	; 0
    353a:	64 e0       	ldi	r22, 0x04	; 4
    353c:	40 e0       	ldi	r20, 0x00	; 0
    353e:	0e 94 8f 14 	call	0x291e	; 0x291e <DIO_enu_SetPinValue>
    3542:	80 e0       	ldi	r24, 0x00	; 0
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	aa ef       	ldi	r26, 0xFA	; 250
    3548:	b3 e4       	ldi	r27, 0x43	; 67
    354a:	89 8f       	std	Y+25, r24	; 0x19
    354c:	9a 8f       	std	Y+26, r25	; 0x1a
    354e:	ab 8f       	std	Y+27, r26	; 0x1b
    3550:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3552:	69 8d       	ldd	r22, Y+25	; 0x19
    3554:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3556:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3558:	9c 8d       	ldd	r25, Y+28	; 0x1c
    355a:	20 e0       	ldi	r18, 0x00	; 0
    355c:	30 e0       	ldi	r19, 0x00	; 0
    355e:	4a e7       	ldi	r20, 0x7A	; 122
    3560:	55 e4       	ldi	r21, 0x45	; 69
    3562:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3566:	dc 01       	movw	r26, r24
    3568:	cb 01       	movw	r24, r22
    356a:	8d 8b       	std	Y+21, r24	; 0x15
    356c:	9e 8b       	std	Y+22, r25	; 0x16
    356e:	af 8b       	std	Y+23, r26	; 0x17
    3570:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3572:	6d 89       	ldd	r22, Y+21	; 0x15
    3574:	7e 89       	ldd	r23, Y+22	; 0x16
    3576:	8f 89       	ldd	r24, Y+23	; 0x17
    3578:	98 8d       	ldd	r25, Y+24	; 0x18
    357a:	20 e0       	ldi	r18, 0x00	; 0
    357c:	30 e0       	ldi	r19, 0x00	; 0
    357e:	40 e8       	ldi	r20, 0x80	; 128
    3580:	5f e3       	ldi	r21, 0x3F	; 63
    3582:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3586:	88 23       	and	r24, r24
    3588:	2c f4       	brge	.+10     	; 0x3594 <main+0x7a>
		__ticks = 1;
    358a:	81 e0       	ldi	r24, 0x01	; 1
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	9c 8b       	std	Y+20, r25	; 0x14
    3590:	8b 8b       	std	Y+19, r24	; 0x13
    3592:	3f c0       	rjmp	.+126    	; 0x3612 <main+0xf8>
	else if (__tmp > 65535)
    3594:	6d 89       	ldd	r22, Y+21	; 0x15
    3596:	7e 89       	ldd	r23, Y+22	; 0x16
    3598:	8f 89       	ldd	r24, Y+23	; 0x17
    359a:	98 8d       	ldd	r25, Y+24	; 0x18
    359c:	20 e0       	ldi	r18, 0x00	; 0
    359e:	3f ef       	ldi	r19, 0xFF	; 255
    35a0:	4f e7       	ldi	r20, 0x7F	; 127
    35a2:	57 e4       	ldi	r21, 0x47	; 71
    35a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35a8:	18 16       	cp	r1, r24
    35aa:	4c f5       	brge	.+82     	; 0x35fe <main+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35ac:	69 8d       	ldd	r22, Y+25	; 0x19
    35ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35b4:	20 e0       	ldi	r18, 0x00	; 0
    35b6:	30 e0       	ldi	r19, 0x00	; 0
    35b8:	40 e2       	ldi	r20, 0x20	; 32
    35ba:	51 e4       	ldi	r21, 0x41	; 65
    35bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35c0:	dc 01       	movw	r26, r24
    35c2:	cb 01       	movw	r24, r22
    35c4:	bc 01       	movw	r22, r24
    35c6:	cd 01       	movw	r24, r26
    35c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35cc:	dc 01       	movw	r26, r24
    35ce:	cb 01       	movw	r24, r22
    35d0:	9c 8b       	std	Y+20, r25	; 0x14
    35d2:	8b 8b       	std	Y+19, r24	; 0x13
    35d4:	0f c0       	rjmp	.+30     	; 0x35f4 <main+0xda>
    35d6:	80 e9       	ldi	r24, 0x90	; 144
    35d8:	91 e0       	ldi	r25, 0x01	; 1
    35da:	9a 8b       	std	Y+18, r25	; 0x12
    35dc:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    35de:	89 89       	ldd	r24, Y+17	; 0x11
    35e0:	9a 89       	ldd	r25, Y+18	; 0x12
    35e2:	01 97       	sbiw	r24, 0x01	; 1
    35e4:	f1 f7       	brne	.-4      	; 0x35e2 <main+0xc8>
    35e6:	9a 8b       	std	Y+18, r25	; 0x12
    35e8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35ea:	8b 89       	ldd	r24, Y+19	; 0x13
    35ec:	9c 89       	ldd	r25, Y+20	; 0x14
    35ee:	01 97       	sbiw	r24, 0x01	; 1
    35f0:	9c 8b       	std	Y+20, r25	; 0x14
    35f2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35f4:	8b 89       	ldd	r24, Y+19	; 0x13
    35f6:	9c 89       	ldd	r25, Y+20	; 0x14
    35f8:	00 97       	sbiw	r24, 0x00	; 0
    35fa:	69 f7       	brne	.-38     	; 0x35d6 <main+0xbc>
    35fc:	14 c0       	rjmp	.+40     	; 0x3626 <main+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35fe:	6d 89       	ldd	r22, Y+21	; 0x15
    3600:	7e 89       	ldd	r23, Y+22	; 0x16
    3602:	8f 89       	ldd	r24, Y+23	; 0x17
    3604:	98 8d       	ldd	r25, Y+24	; 0x18
    3606:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    360a:	dc 01       	movw	r26, r24
    360c:	cb 01       	movw	r24, r22
    360e:	9c 8b       	std	Y+20, r25	; 0x14
    3610:	8b 8b       	std	Y+19, r24	; 0x13
    3612:	8b 89       	ldd	r24, Y+19	; 0x13
    3614:	9c 89       	ldd	r25, Y+20	; 0x14
    3616:	98 8b       	std	Y+16, r25	; 0x10
    3618:	8f 87       	std	Y+15, r24	; 0x0f
    361a:	8f 85       	ldd	r24, Y+15	; 0x0f
    361c:	98 89       	ldd	r25, Y+16	; 0x10
    361e:	01 97       	sbiw	r24, 0x01	; 1
    3620:	f1 f7       	brne	.-4      	; 0x361e <main+0x104>
    3622:	98 8b       	std	Y+16, r25	; 0x10
    3624:	8f 87       	std	Y+15, r24	; 0x0f

	while (1)
	{
		_delay_ms(500);
		DIO_enu_TogglePinValue(DIO_PIN_GROUP_A, DIO_PIN_4);
    3626:	80 e0       	ldi	r24, 0x00	; 0
    3628:	64 e0       	ldi	r22, 0x04	; 4
    362a:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <DIO_enu_TogglePinValue>
    362e:	80 e0       	ldi	r24, 0x00	; 0
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	aa ef       	ldi	r26, 0xFA	; 250
    3634:	b3 e4       	ldi	r27, 0x43	; 67
    3636:	8b 87       	std	Y+11, r24	; 0x0b
    3638:	9c 87       	std	Y+12, r25	; 0x0c
    363a:	ad 87       	std	Y+13, r26	; 0x0d
    363c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    363e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3640:	7c 85       	ldd	r23, Y+12	; 0x0c
    3642:	8d 85       	ldd	r24, Y+13	; 0x0d
    3644:	9e 85       	ldd	r25, Y+14	; 0x0e
    3646:	20 e0       	ldi	r18, 0x00	; 0
    3648:	30 e0       	ldi	r19, 0x00	; 0
    364a:	4a e7       	ldi	r20, 0x7A	; 122
    364c:	55 e4       	ldi	r21, 0x45	; 69
    364e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3652:	dc 01       	movw	r26, r24
    3654:	cb 01       	movw	r24, r22
    3656:	8f 83       	std	Y+7, r24	; 0x07
    3658:	98 87       	std	Y+8, r25	; 0x08
    365a:	a9 87       	std	Y+9, r26	; 0x09
    365c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    365e:	6f 81       	ldd	r22, Y+7	; 0x07
    3660:	78 85       	ldd	r23, Y+8	; 0x08
    3662:	89 85       	ldd	r24, Y+9	; 0x09
    3664:	9a 85       	ldd	r25, Y+10	; 0x0a
    3666:	20 e0       	ldi	r18, 0x00	; 0
    3668:	30 e0       	ldi	r19, 0x00	; 0
    366a:	40 e8       	ldi	r20, 0x80	; 128
    366c:	5f e3       	ldi	r21, 0x3F	; 63
    366e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3672:	88 23       	and	r24, r24
    3674:	2c f4       	brge	.+10     	; 0x3680 <main+0x166>
		__ticks = 1;
    3676:	81 e0       	ldi	r24, 0x01	; 1
    3678:	90 e0       	ldi	r25, 0x00	; 0
    367a:	9e 83       	std	Y+6, r25	; 0x06
    367c:	8d 83       	std	Y+5, r24	; 0x05
    367e:	3f c0       	rjmp	.+126    	; 0x36fe <main+0x1e4>
	else if (__tmp > 65535)
    3680:	6f 81       	ldd	r22, Y+7	; 0x07
    3682:	78 85       	ldd	r23, Y+8	; 0x08
    3684:	89 85       	ldd	r24, Y+9	; 0x09
    3686:	9a 85       	ldd	r25, Y+10	; 0x0a
    3688:	20 e0       	ldi	r18, 0x00	; 0
    368a:	3f ef       	ldi	r19, 0xFF	; 255
    368c:	4f e7       	ldi	r20, 0x7F	; 127
    368e:	57 e4       	ldi	r21, 0x47	; 71
    3690:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3694:	18 16       	cp	r1, r24
    3696:	4c f5       	brge	.+82     	; 0x36ea <main+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3698:	6b 85       	ldd	r22, Y+11	; 0x0b
    369a:	7c 85       	ldd	r23, Y+12	; 0x0c
    369c:	8d 85       	ldd	r24, Y+13	; 0x0d
    369e:	9e 85       	ldd	r25, Y+14	; 0x0e
    36a0:	20 e0       	ldi	r18, 0x00	; 0
    36a2:	30 e0       	ldi	r19, 0x00	; 0
    36a4:	40 e2       	ldi	r20, 0x20	; 32
    36a6:	51 e4       	ldi	r21, 0x41	; 65
    36a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ac:	dc 01       	movw	r26, r24
    36ae:	cb 01       	movw	r24, r22
    36b0:	bc 01       	movw	r22, r24
    36b2:	cd 01       	movw	r24, r26
    36b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36b8:	dc 01       	movw	r26, r24
    36ba:	cb 01       	movw	r24, r22
    36bc:	9e 83       	std	Y+6, r25	; 0x06
    36be:	8d 83       	std	Y+5, r24	; 0x05
    36c0:	0f c0       	rjmp	.+30     	; 0x36e0 <main+0x1c6>
    36c2:	80 e9       	ldi	r24, 0x90	; 144
    36c4:	91 e0       	ldi	r25, 0x01	; 1
    36c6:	9c 83       	std	Y+4, r25	; 0x04
    36c8:	8b 83       	std	Y+3, r24	; 0x03
    36ca:	8b 81       	ldd	r24, Y+3	; 0x03
    36cc:	9c 81       	ldd	r25, Y+4	; 0x04
    36ce:	01 97       	sbiw	r24, 0x01	; 1
    36d0:	f1 f7       	brne	.-4      	; 0x36ce <main+0x1b4>
    36d2:	9c 83       	std	Y+4, r25	; 0x04
    36d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36d6:	8d 81       	ldd	r24, Y+5	; 0x05
    36d8:	9e 81       	ldd	r25, Y+6	; 0x06
    36da:	01 97       	sbiw	r24, 0x01	; 1
    36dc:	9e 83       	std	Y+6, r25	; 0x06
    36de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36e0:	8d 81       	ldd	r24, Y+5	; 0x05
    36e2:	9e 81       	ldd	r25, Y+6	; 0x06
    36e4:	00 97       	sbiw	r24, 0x00	; 0
    36e6:	69 f7       	brne	.-38     	; 0x36c2 <main+0x1a8>
    36e8:	2c cf       	rjmp	.-424    	; 0x3542 <main+0x28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36ea:	6f 81       	ldd	r22, Y+7	; 0x07
    36ec:	78 85       	ldd	r23, Y+8	; 0x08
    36ee:	89 85       	ldd	r24, Y+9	; 0x09
    36f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    36f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36f6:	dc 01       	movw	r26, r24
    36f8:	cb 01       	movw	r24, r22
    36fa:	9e 83       	std	Y+6, r25	; 0x06
    36fc:	8d 83       	std	Y+5, r24	; 0x05
    36fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3700:	9e 81       	ldd	r25, Y+6	; 0x06
    3702:	9a 83       	std	Y+2, r25	; 0x02
    3704:	89 83       	std	Y+1, r24	; 0x01
    3706:	89 81       	ldd	r24, Y+1	; 0x01
    3708:	9a 81       	ldd	r25, Y+2	; 0x02
    370a:	01 97       	sbiw	r24, 0x01	; 1
    370c:	f1 f7       	brne	.-4      	; 0x370a <main+0x1f0>
    370e:	9a 83       	std	Y+2, r25	; 0x02
    3710:	89 83       	std	Y+1, r24	; 0x01
    3712:	17 cf       	rjmp	.-466    	; 0x3542 <main+0x28>

00003714 <__prologue_saves__>:
    3714:	2f 92       	push	r2
    3716:	3f 92       	push	r3
    3718:	4f 92       	push	r4
    371a:	5f 92       	push	r5
    371c:	6f 92       	push	r6
    371e:	7f 92       	push	r7
    3720:	8f 92       	push	r8
    3722:	9f 92       	push	r9
    3724:	af 92       	push	r10
    3726:	bf 92       	push	r11
    3728:	cf 92       	push	r12
    372a:	df 92       	push	r13
    372c:	ef 92       	push	r14
    372e:	ff 92       	push	r15
    3730:	0f 93       	push	r16
    3732:	1f 93       	push	r17
    3734:	cf 93       	push	r28
    3736:	df 93       	push	r29
    3738:	cd b7       	in	r28, 0x3d	; 61
    373a:	de b7       	in	r29, 0x3e	; 62
    373c:	ca 1b       	sub	r28, r26
    373e:	db 0b       	sbc	r29, r27
    3740:	0f b6       	in	r0, 0x3f	; 63
    3742:	f8 94       	cli
    3744:	de bf       	out	0x3e, r29	; 62
    3746:	0f be       	out	0x3f, r0	; 63
    3748:	cd bf       	out	0x3d, r28	; 61
    374a:	09 94       	ijmp

0000374c <__epilogue_restores__>:
    374c:	2a 88       	ldd	r2, Y+18	; 0x12
    374e:	39 88       	ldd	r3, Y+17	; 0x11
    3750:	48 88       	ldd	r4, Y+16	; 0x10
    3752:	5f 84       	ldd	r5, Y+15	; 0x0f
    3754:	6e 84       	ldd	r6, Y+14	; 0x0e
    3756:	7d 84       	ldd	r7, Y+13	; 0x0d
    3758:	8c 84       	ldd	r8, Y+12	; 0x0c
    375a:	9b 84       	ldd	r9, Y+11	; 0x0b
    375c:	aa 84       	ldd	r10, Y+10	; 0x0a
    375e:	b9 84       	ldd	r11, Y+9	; 0x09
    3760:	c8 84       	ldd	r12, Y+8	; 0x08
    3762:	df 80       	ldd	r13, Y+7	; 0x07
    3764:	ee 80       	ldd	r14, Y+6	; 0x06
    3766:	fd 80       	ldd	r15, Y+5	; 0x05
    3768:	0c 81       	ldd	r16, Y+4	; 0x04
    376a:	1b 81       	ldd	r17, Y+3	; 0x03
    376c:	aa 81       	ldd	r26, Y+2	; 0x02
    376e:	b9 81       	ldd	r27, Y+1	; 0x01
    3770:	ce 0f       	add	r28, r30
    3772:	d1 1d       	adc	r29, r1
    3774:	0f b6       	in	r0, 0x3f	; 63
    3776:	f8 94       	cli
    3778:	de bf       	out	0x3e, r29	; 62
    377a:	0f be       	out	0x3f, r0	; 63
    377c:	cd bf       	out	0x3d, r28	; 61
    377e:	ed 01       	movw	r28, r26
    3780:	08 95       	ret

00003782 <_exit>:
    3782:	f8 94       	cli

00003784 <__stop_program>:
    3784:	ff cf       	rjmp	.-2      	; 0x3784 <__stop_program>
